<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>梅炜 个人博客</title>
    <link>https://www.iterdaily.com/</link>
    <description>Recent content on 梅炜 个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 14 Aug 2020 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://www.iterdaily.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>kubernetes06 kubectl命令</title>
      <link>https://www.iterdaily.com/post/kubernetes06/</link>
      <pubDate>Fri, 19 Jul 2019 21:01:20 +0100</pubDate>
      
      <guid>https://www.iterdaily.com/post/kubernetes06/</guid>
      
        <description>&lt;h3 id=&#34;kubectl-命令&#34;&gt;kubectl 命令&lt;/h3&gt;
&lt;p&gt;使用 k8s 时我们会比较常用 &lt;code&gt;kubectl&lt;/code&gt; 命令,  因为通常集群的管理都是需要经过 &lt;code&gt;api-server&lt;/code&gt; 的, 所以这里的 &lt;code&gt;kubectl&lt;/code&gt; 实际上就是我们访问 &lt;code&gt;api-server&lt;/code&gt; 管理入口的客户端工具,  它能连接到 &lt;code&gt;api-server&lt;/code&gt; 上完成对于集群的各种资源对象的 增 删 改 查 等一些基本操作. K8S 中可以管理的资源对象是非常多的, 在之前我们所提到的诸如 &lt;code&gt;pod&lt;/code&gt;, &lt;code&gt;service&lt;/code&gt;, &lt;code&gt;replicaset&lt;/code&gt;, &lt;code&gt;deployment&lt;/code&gt;, &lt;code&gt;statefulet&lt;/code&gt;, &lt;code&gt;daemonset&lt;/code&gt;, &lt;code&gt;job&lt;/code&gt;, &lt;code&gt;cronjob&lt;/code&gt;, &lt;code&gt;node&lt;/code&gt; 等等都是资源对象.&lt;/p&gt;
&lt;p&gt;这里我们简单介绍一下 &lt;code&gt;kubectl&lt;/code&gt; , 这个命令有非常多的子命令, 可以操作各种对象, 而对象的指定是通过 &lt;code&gt;类型&lt;/code&gt; + &lt;code&gt;名称&lt;/code&gt; + &lt;code&gt;flags参数指配&lt;/code&gt; 来完成的, 其基本命令格式如下:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# kubectl 操作动作  操作的资源类型  资源名称  其他指定的可选参数&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# kubectl [command] [TYPE] [NAME] [flags]&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# 查看两个示例 pod&lt;/span&gt;
kubectl get pod example-pod1 example-pod2

&lt;span style=&#34;color:#75715e&#34;&gt;# 查看节点信息 (因为输出信息过长, 这里就不贴出来了)&lt;/span&gt;
kubectl describe node node1

&lt;span style=&#34;color:#75715e&#34;&gt;# 或&lt;/span&gt;
kubectl describe node master

&lt;span style=&#34;color:#75715e&#34;&gt;# 获取某个命令的帮助&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# kubectl &amp;lt;command&amp;gt; --help&lt;/span&gt;
kube get --help
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;常用子命令&#34;&gt;常用子命令:&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;基本命令 (初级):
  create        从文件或 stdin 创建一个或多个资源.
  expose        将副本控制器, 服务 或 pod 作为新的 Kubernetes 服务暴露
  run           在集群上运行指定的镜像
  set           设定对象的特定特性

基本命令 (中级):
  explain       获取多种资源的文档. 例如 pod, node, service 等
  get           列出一个或多个资源
  edit          使用默认编辑器编辑和更新服务器上一个或多个资源的定义
  delete        从文件、标准输入或指定标签选择器、名称、资源选择器或资源中删除资源

Deploy 命令:
  rollout       管理资源 rollout
  scale         更新指定 Deployment, ReplicaSet, or ReplicationController
  autoscale     自动伸缩 Deployment, ReplicaSet, or ReplicationController

集群管理命令:
  certificate   Modify certificate resources.
  cluster-info  显示集群信息
  top           显示资源 (CPU/Memory/Storage) 用量.
  cordon        标记节点为不可调度
  uncordon      标记节点为可调度
  drain         排空节点, 准备进入维护
  taint         更新一个或多个节点的 污点

排障 与 Debugging 命令:
  describe      显示一个或一组资源的详细状态
  logs          在 pod 中打印容器的日志
  attach        Attach to a running container
  exec          Execute a command in a container
  port-forward  将一个或多个本地端口转发到一个 pod
  proxy         运行 Kubernetes API 服务器的代理
  cp            Copy files and directories to and from containers.
  auth          检查授权

高级命令:
  diff          将 当前时时 配置和 期望 配置做对比
  apply         从文件或 stdin 对资源应用配置更改
  patch         使用策略合并 patch 程序更新资源的一个或多个字段
  replace       从文件或标准输入中替换资源
  wait          为一个或多个资源等待特定的条件
  convert       在不同 API 版本间转换配置文件
  kustomize     从目录或远程 url 构建 kustomization 目标

配置命令:
  label         更新资源的标签
  annotate      更新资源注释 (没有长度限制)
  completion    输出针对特定 shell的 shell 的补全代码(bash或zsh)

其他命令:
  alpha         处于 alpha 阶段的特性命令
  api-resources 打印服务器上受支持的 API 资源
  api-versions  打服务器上印受支持的 API 版本, 使用 &amp;quot;组/版本&amp;quot; 格式
  config        修改 kubeconfig 文件.
  plugin        给出与插件交互的实用工具
  version       打印客户端和服务端版本信息
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;对于这些子命令我们可以随时使用 &lt;code&gt;kubectl &amp;lt;command&amp;gt; --help&lt;/code&gt; 来查看它的帮助信息, 如果你需要全面细致的命令说明和示例, 如参数 &lt;code&gt;flags&lt;/code&gt; 等信息, 我推荐大家在学习中去看一下官方的 &lt;a href=&#34;https://kubernetes.io/zh/docs/reference/kubectl/overview/&#34;&gt;kubectl概述&lt;/a&gt; .&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>kubernetes05 环境部署</title>
      <link>https://www.iterdaily.com/post/kubernetes05/</link>
      <pubDate>Sun, 14 Jul 2019 21:01:23 +0800</pubDate>
      
      <guid>https://www.iterdaily.com/post/kubernetes05/</guid>
      
        <description>&lt;h2 id=&#34;部署方式&#34;&gt;部署方式&lt;/h2&gt;
&lt;p&gt;K8S 的安装部署本身还是具有一定的复杂度的, 一般有两种部署方式, 它们也分别会用到不同的工具&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;软件包的形式安装, 将 K8S 的管理服务以节点上的守护进程的方式进行运行, 节点配置各种服务daemon, docker.&lt;/li&gt;
&lt;li&gt;容器镜像的方式安装, 将 K8S 的服务也以 Pod 的方式运行, 节点安装 kubelet, docker.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;采用第一种方式, 平台需要准备多套CA, 需要在各个角色节点安装对应的组件, api-server, scheduler, controller等都需要独立运行, 这样的部署通常都会借助一定的部署工具来完成, 例如 ansible role 的方式编排各个节点上的服务, (mini kube 之类的单节点部署工具只能用于简单测试, 是不具备模拟生产环境深入学习的能力的). 其中, K8S 相关的软件源需要配置好, 也可以自己下载源代码编译到本地安装.&lt;/p&gt;
&lt;p&gt;而第二种, 我们可以采用官方推荐的 kube-adm 部署,  kube-adm 将 kubelet 以外的所有组件都以容器方式进行部署, 将服务容器话简化了部署难度. 这里需要注意两点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;kubeadm 部署的 K8S 服务 Pod 是静态的, 这些 Pod 并未被 K8S 集群托管.&lt;/li&gt;
&lt;li&gt;kube-adm 的所有容器镜像都托管在 gcr 的容器托管仓库中, 而出于一些(不可描述的)原因, 国内是无法访问到的, 因此使用起来也需要费一番周折.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们这里实验准备用 kubeadm 创建一个单控制节点的 kubenetes 集群来学习 K8S , 因为 master 节点之间是主备以保障高可用并没有复杂的服务的中间状态和逻辑关系, 所以单主节点是不影响我们的学习的, 在部署之前我们先看一下服务结构&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
+-----------------------------------------------+
| +------------------------+ +----------------+ |
| | kube controller manager| | kube scheduler | |
| +-----------------+------+ +--+-------------+ |
|                    |          |               |
|  +-----------------+----------+-+   +-------+ |
|  |      kube api server         +---+ etcd  | |
|  +---+-----------+--------------+   +-------+ |
|      |           |                            |
+-----------------------------------------------+
       |           |
 +------------------------+ +-------+  +-------+
 |     |           |      | |       |  |       |
 | +---+---+ +-----+----+ | |       |  |       |
 | |kubelet| |kube proxy| | |       |  |       |
 | +-------+ +----------+ | | node2 |  | node3 |
 |           +----------+ | |       |  |       |
 | node1     |  docker  | | |       |  |       |
 |           +----------+ | |       |  |       |
 +------------------------+ +---+---+  +---+---+
                 |              |          |
 +---------------+--------------+----------+---+
 |              docker registry                |
 +---------------------------------------------+
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;1.这里的 etcd 在实际生产最好可以独立出来并且以集群的方式运行, 实验环境下可以直接部署在主节点上.&lt;/p&gt;
&lt;p&gt;2.这里的 docker-registry 应该是独立的, 企业内我们通常有配置好的可用仓库 (K8S 本身的服务镜像也可以放在上面), 这里为了简化部署我们没有配置独立的 registry 而是采用公用镜像仓库中的镜像来配置我们的应用.&lt;/p&gt;
&lt;h2 id=&#34;网络规划&#34;&gt;网络规划&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;
Service Net ------------------+--------------+--------------+--10.96.0.0/12
                              |              |              |
+-MASTER-&amp;amp;-ETCD----+  +-Node1-|---+  +-Node2-|---+  +-Node3-|---+
|API Server &amp;amp; etcd |  | kube proxy|  | kube proxy|  | kube proxy|
|controller manager|  |kubelet    |  |kubelet    |  |kubelet    |
|scheduler         |  |docker     |  |docker     |  |docker     |
|           flannel|  |    flannel|  |    flannel|  |    flannel|
+---------+--------+  +--+---|----+  +--+---|----+  +--+---|----+
          |              |   |          |   |          |   |
Node Net--+--------------+--------------+--------------+------192.168.3.0/24
                             |              |              |
              Pod Net--------+--------------+--------------+---10.224.0.0/16

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Service 网络: 10.96.0.0/12&lt;/p&gt;
&lt;p&gt;Node 网络: 192.168.3.0/24&lt;/p&gt;
&lt;p&gt;Pod 网络: 10.224.0.0/16&lt;/p&gt;
&lt;h2 id=&#34;节点环境准备&#34;&gt;节点环境准备&lt;/h2&gt;
&lt;p&gt;这里操作系统使用的:  CentOS 7.3&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;节点&lt;/th&gt;
&lt;th&gt;节点IP&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;master, etcd&lt;/td&gt;
&lt;td&gt;192.168.3.91&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;node1&lt;/td&gt;
&lt;td&gt;192.168.3.88&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;node2&lt;/td&gt;
&lt;td&gt;192.168.3.89&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;主机环境预配置&#34;&gt;主机环境预配置&lt;/h4&gt;
&lt;p&gt;这里的前 4 项检查必须完成, 为了避免错误建议你全部完成. 随着版本的更新这些内容可能会有变化, 你可以参考官方文档的 &lt;a href=&#34;https://kubernetes.io/zh/docs/setup/production-environment/tools/kubeadm/install-kubeadm/#check-required-ports&#34;&gt;安装kubeadm&lt;/a&gt; 了解最新版本的安装准备工作.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;基于主机名的局域网解析通信, /etc/hosts;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# cat /etc/hosts&lt;/span&gt;
127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
::1         localhost localhost.localdomain localhost6 localhost6.localdomain6

192.168.3.91 master.iterdaily.com master
192.168.3.88  node1.iterdaily.com node1
192.168.3.89  node2.iterdaily.com node2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;确保节点时间同步正常;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;确保关闭 firewalld, iptables.service&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;systemctl disable firewalld ; systemctl stop firewalld
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;关闭 selinux&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 将 SELinux 设置为 permissive 模式（相当于将其禁用）&lt;/span&gt;
setenforce &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
sed -i &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s/^SELINUX=enforcing$/SELINUX=permissive/&amp;#39;&lt;/span&gt; /etc/selinux/config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;请注意：&lt;/strong&gt;
通过运行命令 &lt;code&gt;setenforce 0&lt;/code&gt; 和 &lt;code&gt;sed ...&lt;/code&gt; 将 SELinux 设置为 permissive 模式可以有效的将其禁用。 这是允许容器访问主机文件系统所必须的，例如正常使用 pod 网络。 您必须这么做，直到 kubelet 做出升级支持 SELinux 为止。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;内核 lvs 模块检查 (如果默认的 lvs 出现加载异常则会回退使用 iptables )&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# lvs 模块: ip_vs, ip_vs_rr, ip_vs_wrr, ip_vs_sh, nf_conntrack_ipv4&lt;/span&gt;
lsmod |grep -E &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ip_vs|nf_contrack&amp;#34;&lt;/span&gt; ip_vs
ip_vs_rr
ip_vs_wrr
ip_vs_sh
nf_conntrack_ipv4
ip_vs_sh               &lt;span style=&#34;color:#ae81ff&#34;&gt;12688&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; 
ip_vs_wrr              &lt;span style=&#34;color:#ae81ff&#34;&gt;12697&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; 
ip_vs_rr               &lt;span style=&#34;color:#ae81ff&#34;&gt;12600&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; 
ip_vs                 &lt;span style=&#34;color:#ae81ff&#34;&gt;145497&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; ip_vs_rr,ip_vs_sh,ip_vs_wrr
nf_conntrack          &lt;span style=&#34;color:#ae81ff&#34;&gt;139264&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; ip_vs,...,nf_conntrack_ipv4
   
&lt;span style=&#34;color:#75715e&#34;&gt;# 配置自动加载&lt;/span&gt;
cat &amp;gt; /etc/sysconfig/modules/ipvs.modules &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt;EOF
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;modprobe -- ip_vs
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;modprobe -- ip_vs_rr
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;modprobe -- ip_vs_wrr
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;modprobe -- ip_vs_sh
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;modprobe -- nf_conntrack_ipv4
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;EOF&lt;/span&gt;
chmod &lt;span style=&#34;color:#ae81ff&#34;&gt;755&lt;/span&gt; /etc/sysconfig/modules/ipvs.modules &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; bash /etc/sysconfig/modules/ipvs.modules &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; lsmod | grep -e ip_vs -e nf_conntrack_ipv4
   
&lt;span style=&#34;color:#75715e&#34;&gt;# 为了方便查看 lvs 规则, 建议安装 lvsadm&lt;/span&gt;
yum install ipvsadm ipset
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(红帽系OS) 配置系统  &lt;code&gt;net.bridge.bridge-nf-call-iptables&lt;/code&gt; 设置为 1&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 先检查 br_netfilter 模块&lt;/span&gt;
lsmod | grep br_netfilter
&lt;span style=&#34;color:#75715e&#34;&gt;# 执行模块加载&lt;/span&gt;
modprobe br_netfilter
   
&lt;span style=&#34;color:#75715e&#34;&gt;# 配置规则自动加载&lt;/span&gt;
cat &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt;EOF &amp;gt;  /etc/sysctl.d/k8s.conf
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;net.bridge.bridge-nf-call-ip6tables = 1
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;net.bridge.bridge-nf-call-iptables = 1
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;EOF&lt;/span&gt;
sysctl --system
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;一些 RHEL/CentOS 7 的用户曾经遇到过问题：由于 iptables 被绕过而导致流量无法正确路由的问题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;各个服务的分布&#34;&gt;各个服务的分布&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;etcd cluster      master 节点&lt;/li&gt;
&lt;li&gt;flannel              所有节点&lt;/li&gt;
&lt;li&gt;配置master      master节点
&lt;ol&gt;
&lt;li&gt;kube-apiserver&lt;/li&gt;
&lt;li&gt;kube-scheduler&lt;/li&gt;
&lt;li&gt;kube-controller-manager&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;配置node节点
&lt;ol&gt;
&lt;li&gt;docker 服务&lt;/li&gt;
&lt;li&gt;kube-proxy&lt;/li&gt;
&lt;li&gt;kubelet&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;安装配置步骤&#34;&gt;安装配置步骤:&lt;/h2&gt;
&lt;p&gt;准备 kubeadm 部署工具&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;master, nodes: 安装kubelet, kubeadm, docker&lt;/li&gt;
&lt;li&gt;master: kubeadm init&lt;/li&gt;
&lt;li&gt;nodes: kubeadm join&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;更多关于 kubeadm 的信息参见 kubernetes/kubeadm &lt;a href=&#34;https://github.com/kubernetes/kubeadm/tree/master/docs/design&#34;&gt;设计文档参考&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;使用 kubeadm 部署需要安装的是kubeadm, 在自行下载源代码的时候, 在 kubernetes 代码仓库 release 中 server 包用于本地运行服务守护进程, &lt;em&gt;client 包用于连接登录 K8S 平台进行管理操作&lt;/em&gt; , 其实不是必要组件.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;安装软件&#34;&gt;安装软件&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h4 id=&#34;kubelet-kubeadm-kubectl-安装&#34;&gt;kubelet kubeadm kubectl 安装&lt;/h4&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;配置 kubernetes 源, 并安装 k8s, 除了 master 节点, 其实其他节点可以不用安装 kubectl.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 生成 kubernetes.repo&lt;/span&gt;
cat &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt;EOF &amp;gt; /etc/yum.repos.d/kubernetes.repo
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[kubernetes]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;name=Kubernetes
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;enabled=1
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;gpgcheck=1
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;repo_gpgcheck=1
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;EOF&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 关闭 selinux&lt;/span&gt;
setenforce &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 安装 kubelet kubeadm kubectl&lt;/span&gt;
yum install -y kubelet kubeadm kubectl
systemctl enable kubelet &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; systemctl start kubelet
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此时查看 kubelet 服务状态, 因为环境还未初始化没有对应的配置文件, 此时 kubelet 还不能正常运行&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# systemctl status kubelet&lt;/span&gt;
● kubelet.service - kubelet: The Kubernetes Node Agent
   Loaded: loaded &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;/usr/lib/systemd/system/kubelet.service; enabled; vendor preset: disabled&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
  Drop-In: /usr/lib/systemd/system/kubelet.service.d
           └─10-kubeadm.conf
   Active: activating &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;auto-restart&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Result: exit-code&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; since 日 2019-05-17 02:09:58 EDT; 1s ago
     Docs: https://kubernetes.io/docs/
  Process: &lt;span style=&#34;color:#ae81ff&#34;&gt;13621&lt;/span&gt; ExecStart&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/usr/bin/kubelet $KUBELET_KUBECONFIG_ARGS $KUBELET_CONFIG_ARGS $KUBELET_KUBEADM_ARGS $KUBELET_EXTRA_ARGS &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;code&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;exited, status&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;255&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
 Main PID: &lt;span style=&#34;color:#ae81ff&#34;&gt;13621&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;code&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;exited, status&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;255&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

5月 &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt; 02:09:58 master systemd&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: Unit kubelet.service entered failed state.
5月 &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt; 02:09:58 master systemd&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: kubelet.service failed.

&lt;span style=&#34;color:#75715e&#34;&gt;# tail /var/log/messages&lt;/span&gt;
May &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt; 02:11:21 192e168e59e119 systemd: Started kubelet: The Kubernetes Node Agent.
May &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt; 02:11:21 192e168e59e119 kubelet: F0517 02:11:21.233633   &lt;span style=&#34;color:#ae81ff&#34;&gt;13691&lt;/span&gt; server.go:199&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; failed to load Kubelet config file /var/lib/kubelet/config.yaml, error failed to read kubelet config file &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/var/lib/kubelet/config.yaml&amp;#34;&lt;/span&gt;, error: open /var/lib/kubelet/config.yaml: no such file or directory
May &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt; 02:11:21 192e168e59e119 systemd: kubelet.service: main process exited, code&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;exited, status&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;255/n/a
May &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt; 02:11:21 192e168e59e119 systemd: Unit kubelet.service entered failed state.
May &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt; 02:11:21 192e168e59e119 systemd: kubelet.service failed.
May &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt; 02:11:21 192e168e59e119 systemd: Stopped kubelet: The Kubernetes Node Agent.

&lt;span style=&#34;color:#75715e&#34;&gt;# 先停止 kubelet 服务&lt;/span&gt;
systemctl stop kubelet
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;
&lt;h4 id=&#34;docker-ce-安装&#34;&gt;docker-ce 安装&lt;/h4&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;配置 docker 源, 并安装 docker-ce, 生产环境需要根据要求指定具体的安装版本.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# step 1: 安装必要的一些系统工具&lt;/span&gt;
sudo yum install -y yum-utils device-mapper-persistent-data lvm2
&lt;span style=&#34;color:#75715e&#34;&gt;# Step 2: 添加软件源信息&lt;/span&gt;
sudo yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
&lt;span style=&#34;color:#75715e&#34;&gt;# Step 3: 更新并安装Docker-CE&lt;/span&gt;
sudo yum makecache fast
sudo yum -y install docker-ce
&lt;span style=&#34;color:#75715e&#34;&gt;# Step 4: 开启Docker服务&lt;/span&gt;
sudo service docker start

&lt;span style=&#34;color:#75715e&#34;&gt;# 注意：&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 官方软件源默认启用了最新的软件，您可以通过编辑软件源的方式获取各个版本的软件包。例如官方并没有将测试版本的软件源置为可用，您可以通过以下方式开启。同理可以开启各种测试版本等。&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# vim /etc/yum.repos.d/docker-ee.repo&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#   将[docker-ce-test]下方的enabled=0修改为enabled=1&lt;/span&gt;
#
&lt;span style=&#34;color:#75715e&#34;&gt;# 安装指定版本的Docker-CE:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Step 1: 查找Docker-CE的版本:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# yum list docker-ce.x86_64 --showduplicates | sort -r&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#   Loading mirror speeds from cached hostfile&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#   Loaded plugins: branch, fastestmirror, langpacks&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#   docker-ce.x86_64            17.03.1.ce-1.el7.centos            docker-ce-stable&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#   docker-ce.x86_64            17.03.1.ce-1.el7.centos            @docker-ce-stable&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#   docker-ce.x86_64            17.03.0.ce-1.el7.centos            docker-ce-stable&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#   Available Packages&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Step2: 安装指定版本的Docker-CE: (VERSION例如上面的17.03.0.ce.1-1.el7.centos)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# sudo yum -y install docker-ce-[VERSION]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;不得不说一下, &lt;em&gt;阿里源的帮助说明还是很细致的&lt;/em&gt; .&lt;/p&gt;
&lt;p&gt;记得配置 docker 开机启动, &lt;code&gt;sudo systemctl enable docker&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;修改-docker-cgoup-driver-为-systemd-选做&#34;&gt;修改 docker cgoup driver 为 systemd (选做)&lt;/h3&gt;
&lt;p&gt;CRI installation 中指出，对于使用 systemd 作为 init system 的 Linux 的发行版，使用 systemd 作为 Docker 的 cgroup driver 可以确保服务器节点在资源紧张的情况更加稳定，因此这里修改各个节点上 Docker 的 cgroup driver 为 systemd.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# vim /etc/docker/daemon.json&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;exec-opts&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;native.cgroupdriver=systemd&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# systemctl daemon-reload &amp;amp;&amp;amp; systemctl restart docker&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;这里我们最好在整个集群都统一调整.&lt;/p&gt;
&lt;p&gt;重启 docker 服务后, 使用 &lt;code&gt;docker info&lt;/code&gt; 可以看到 &lt;code&gt;Cgroup Driver: systemd&lt;/code&gt; 即可.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;调整系统-swap-配置&#34;&gt;调整系统 swap 配置&lt;/h3&gt;
&lt;p&gt;Kubernetes 1.8开始要求关闭系统的Swap，如果不关闭，默认配置下kubelet将无法启动.&lt;/p&gt;
&lt;h4 id=&#34;关闭-swap&#34;&gt;关闭 swap&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 关闭当前系统 swap&lt;/span&gt;
swapoff -a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;修改 /etc/fstab 文件，注释掉 SWAP 的自动挂载，使用free -m确认swap已经关闭&lt;/p&gt;
&lt;p&gt;swappiness参数调整，修改 &lt;code&gt;/etc/sysctl.d/k8s.conf&lt;/code&gt; 添加下面一行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;vm&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;swappiness&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;执行 &lt;code&gt;sysctl -p /etc/sysctl.d/k8s.conf&lt;/code&gt; 使修改生效.&lt;/p&gt;
&lt;p&gt;因为 docker 容器不能很好的隔离对于 swap 的使用, 因此, kubernetes 会检查 swap 是否禁用.&lt;/p&gt;
&lt;h4 id=&#34;如何不关闭-swap-安装&#34;&gt;如何不关闭 swap 安装&lt;/h4&gt;
&lt;p&gt;如果不想禁用 swap 需要在初始化之前对 kubelet 进行一些配置.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# cat /etc/sysconfig/kubelet&lt;/span&gt; 
KUBELET_EXTRA_ARGS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;--fail-swap-on=false&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;同时, 初始化参数也要加上 &lt;code&gt;--ignore-preflight-errors=Swap&lt;/code&gt; , 这里实验的虚拟机配置不高, 所以就开着 swap 继续配置.&lt;/p&gt;
&lt;h3 id=&#34;初始化-master&#34;&gt;初始化 master&lt;/h3&gt;
&lt;p&gt;运行 &lt;code&gt;kubeadm init&lt;/code&gt; 初始化命令&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;kubeadm init --kubernetes-version&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;v1.14.1 --pod-network-cidr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;10.224.0.0/16 --service-cidr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;10.96.0.0/12 --image-repository registry.aliyuncs.com/google_containers --ignore-preflight-errors&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Swap 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这些参数要根据你的安装版本和环境的网络进行修改:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--kubernetes-version&lt;/code&gt;  kubernetes 版本&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--pod-network-cidr&lt;/code&gt;     Pod 网络地址&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--service-cidr&lt;/code&gt;    Service 网络地址&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--image-repository&lt;/code&gt; 使用的代理镜像仓库地址, 国内无法直接获取 k8s 镜像&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--ignore-preflight-errors&lt;/code&gt;  忽略 swap 错误&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;使用国内的-k8s-镜像仓库&#34;&gt;使用国内的 K8S 镜像仓库&lt;/h4&gt;
&lt;p&gt;这里因为 kubernetes 镜像从国内难以访问, 所以在拉取镜像的过程我们需要指定代理的地址, 如果没有配置代理从镜像仓库下载就会看到下面的报错信息:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;preflight&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Pulling images required &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; setting up a Kubernetes cluster
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;preflight&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; This might take a minute or two, depending on the speed of your internet connection
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;preflight&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; You can also perform this action in beforehand using &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;kubeadm config images pull&amp;#39;&lt;/span&gt;
error execution phase preflight: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;preflight&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Some fatal errors occurred:
	&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;ERROR ImagePull&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: failed to pull image k8s.gcr.io/kube-apiserver:v1.14.1: output: Error response from daemon: Get https://k8s.gcr.io/v2/: net/http: request canceled &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; waiting &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; connection &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Client.Timeout exceeded &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; awaiting headers&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
, error: exit status &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;手动从国内的镜像源拉取 k8s 的镜像, 在各个 node 先拉取好所需要的镜像可以加快部署速度:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 仅执行拉取镜像&lt;/span&gt;
kubeadm config images pull --image-repository registry.aliyuncs.com/google_containers
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或者&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/&amp;lt;镜像名称&amp;gt;:&amp;lt;版本tag&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;用户环境的初始化&#34;&gt;用户环境的初始化&lt;/h4&gt;
&lt;p&gt;如果初始化 master 的配置没有错误的话, 等待 &lt;code&gt;kubeadm init&lt;/code&gt; 初始化完成你将看到类似下面的信息&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Your Kubernetes control-plane has initialized successfully!

To start using your cluster, you need to run the following as a regular user:

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

You should now deploy a pod network to the cluster.
Run &amp;quot;kubectl apply -f [podnetwork].yaml&amp;quot; with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

Then you can join any number of worker nodes by running the following on each as root:

kubeadm join 192.168.3.91:6443 --token gf0l13.k6vtk8pydkb30fat \
    --discovery-token-ca-cert-hash sha256:d0c31c8d83828b7efb296f25b9f39c104a4a676c26fe2b0fe0ce93b667cff8e6
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;如果你因为一些原因需要重新初始化, 可使用 &lt;code&gt;kubeadm reset&lt;/code&gt; 重置当前节点的环境, 不过 &lt;code&gt;$HOME/.kube/&lt;/code&gt; 下的配置文件, ipvs / iptables 规则需要手动清除.  如果有其他服务调整请将服务重启.&lt;/p&gt;
&lt;p&gt;初始化完成后, 后续的节点添加需要用到这里的 token 信息, 所以我们最好先将这里的信息保存下来.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;初始化完成后, 集群中各个节点并无法建立安全通信, 所以这里加入集群需要使用 token 以保证第一次连接的安全.&lt;/p&gt;
&lt;p&gt;如果你需要使用单独的非root用户完成后续的管理工作, 那么这里需要根据提示在家目录下完成用户配置:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 该用户需要有 sudo 权限&lt;/span&gt;
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;id -u&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;:&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;id -g&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; $HOME/.kube/config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;后面我们要使用的 kubectl 工具会在执行时在 &lt;code&gt;$HOME/.kube&lt;/code&gt; 目录中寻找一个名为 config 的文件, 读取我们的一些环境信息, 诸如集群的认证信息的等.&lt;/p&gt;
&lt;p&gt;这里测试中我们也可以直接使用 root 用户完成上面的操作.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;查看一下集群组件状态 (第一次运行会稍慢).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# kubectl get cs&lt;/span&gt;
NAME                 STATUS    MESSAGE             ERROR
scheduler            Healthy   ok                  
controller-manager   Healthy   ok                  
etcd-0               Healthy   &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;health&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; 

&lt;span style=&#34;color:#75715e&#34;&gt;# kubectl get nodes&lt;/span&gt;
NAME     STATUS     ROLES    AGE    VERSION
master   NotReady   master   153m   v1.14.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里看到集群的状态显示的是 &lt;code&gt;NotReady&lt;/code&gt; 这是因为当前的集群还没有可用的网络组件, 因此集群是未就绪的.&lt;/p&gt;
&lt;h3 id=&#34;安装-flannel-network-add-on&#34;&gt;安装 flannel network add-on&lt;/h3&gt;
&lt;p&gt;关于网络插件我们这里选择 &lt;code&gt;flannel&lt;/code&gt; , 对于初级用户而言 flannel 已经提供了足够的功能和性能, 当我们逐渐深入使用在 flannel 已经不能满足要求的时候, 可以再考虑使用其他的插件.&lt;/p&gt;
&lt;p&gt;关于 flannel 的安装, 官方建议的安装方法相当简单, 只需一条命令既可&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kubectl apply -f   https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;不过, 因为一些网络相关原因, 获取 &lt;code&gt;kube-flannel.yml&lt;/code&gt; 文件可能会很不方便, 这条命令很可能不会执行成功. 所以我这里也提供了一个下载好的 &lt;code&gt;kube-flannel&lt;/code&gt; 文件, 我们可以通过这个缓存下来的文件来部署&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# kubectl apply -f  https://docs.iterdaily.com/kube-flannel.yml&lt;/span&gt;
podsecuritypolicy.policy/psp.flannel.unprivileged created
clusterrole.rbac.authorization.k8s.io/flannel created
clusterrolebinding.rbac.authorization.k8s.io/flannel created
serviceaccount/flannel created
configmap/kube-flannel-cfg created
daemonset.apps/kube-flannel-ds-amd64 created
daemonset.apps/kube-flannel-ds-arm64 created
daemonset.apps/kube-flannel-ds-arm created
daemonset.apps/kube-flannel-ds-ppc64le created
daemonset.apps/kube-flannel-ds-s390x created

&lt;span style=&#34;color:#75715e&#34;&gt;# 执行完成后, 查看一下 flannel pod 状态&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# kubectl get pods -n kube-system&lt;/span&gt;
NAME                             READY   STATUS    RESTARTS   AGE
coredns-7ff77c879f-2scfj         1/1     Running   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          30h
coredns-7ff77c879f-9kwxq         1/1     Running   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          30h
etcd-master                      1/1     Running   &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;          30h
kube-apiserver-master            1/1     Running   &lt;span style=&#34;color:#ae81ff&#34;&gt;262&lt;/span&gt;        30h
kube-controller-manager-master   1/1     Running   &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;          30h
kube-flannel-ds-amd64-rn2ls      1/1     Running   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          123m
kube-proxy-kzq9f                 1/1     Running   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          30h
kube-scheduler-master            1/1     Running   &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;          30h
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;如何重新生成-token&#34;&gt;如何重新生成 token&lt;/h3&gt;
&lt;p&gt;我这里因实验中间出现了中断导致原来的 token (默认是24小时)已经失效了, 所以我们重新生成一份 token&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 生成 token&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# kubeadm token create&lt;/span&gt;
W0518 12:48:48.956415   &lt;span style=&#34;color:#ae81ff&#34;&gt;10093&lt;/span&gt; configset.go:202&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; WARNING: kubeadm cannot validate component configs &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; API groups &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;kubelet.config.k8s.io kubeproxy.config.k8s.io&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
jrldwd.tv3nkksbo7ok5206

&lt;span style=&#34;color:#75715e&#34;&gt;# 我们还需要 master 节点的 ca 证书 sha256 hash值&lt;/span&gt; 
&lt;span style=&#34;color:#75715e&#34;&gt;# openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2&amp;gt;/dev/null | openssl dgst -sha256 -hex | sed &amp;#39;s/^.* //&amp;#39;&lt;/span&gt;
eb7bfee5270c182dc5452baeafeabd65bd1a3c6e55073589c5594c1d0ab9eb4d
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;添加-node-节点到集群&#34;&gt;添加 node 节点到集群&lt;/h3&gt;
&lt;p&gt;集群的 master 已经初始化完成了, 我们还需要把剩下的 nodes 添加进来, 不过在 node 节点在添加进集群之前, 建议你最好再检查一遍配置, 尤其是对默认的 cri 以及 swap 做过调整, 尽量去避免以下项目出现操作上的遗漏.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;docker 服务配置状态, 所使用的 &lt;code&gt;Cgroup Driver&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;kubelet 配置状态与 &lt;code&gt;/etc/sysconfig/kubelet&lt;/code&gt; 配置项&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;检查配置完成, 我们到 node 节点执行 &lt;code&gt;kubeadm join&lt;/code&gt; , 将节点加入集群&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# kubeadm join 192.168.3.91:6443 --token jrldwd.tv3nkksbo7ok5206     --discovery-token-ca-cert-hash sha256:eb7bfee5270c182dc5452baeafeabd65bd1a3c6e55073589c5594c1d0ab9eb4d     --ignore-preflight-errors=Swap&lt;/span&gt;
W0518 12:56:51.713396   &lt;span style=&#34;color:#ae81ff&#34;&gt;12787&lt;/span&gt; join.go:346&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;preflight&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; WARNING: JoinControlPane.controlPlane settings will be ignored when control-plane flag is not set.
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;preflight&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Running pre-flight checks
	&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;WARNING Swap&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: running with swap on is not supported. Please disable swap
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;preflight&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Reading configuration from the cluster...
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;preflight&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; FYI: You can look at this config file with &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;kubectl -n kube-system get cm kubeadm-config -oyaml&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;kubelet-start&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Downloading configuration &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; the kubelet from the &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kubelet-config-1.14&amp;#34;&lt;/span&gt; ConfigMap in the kube-system namespace
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;kubelet-start&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Writing kubelet configuration to file &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/var/lib/kubelet/config.yaml&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;kubelet-start&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Writing kubelet environment file with flags to file &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/var/lib/kubelet/kubeadm-flags.env&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;kubelet-start&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Starting the kubelet
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;kubelet-start&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Waiting &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; the kubelet to perform the TLS Bootstrap...

This node has joined the cluster:
* Certificate signing request was sent to apiserver and a response was received.
* The Kubelet was informed of the new secure connection details.

Run &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;kubectl get nodes&amp;#39;&lt;/span&gt; on the control-plane to see this node join the cluster.

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;如果 node 节点的swap 是开启的不要忘记使用 &lt;code&gt;--ignore-preflight-errors=Swap&lt;/code&gt; 选项&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;节点加入完成后, kubelet 会在各个节点安装相关服务和网络插件, 我们可以先到 master 节点查看一下 节点状态&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# kubectl get nodes&lt;/span&gt;
NAME     STATUS   ROLES    AGE     VERSION
master   Ready    master   31h     v1.14.1
node1    Ready    &amp;lt;none&amp;gt;   6m      v1.14.1
node2    NotReady &amp;lt;none&amp;gt;   4m29s   v1.14.1

&lt;span style=&#34;color:#75715e&#34;&gt;# 等待节点都初始化完成&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# kubectl get nodes&lt;/span&gt;
NAME     STATUS   ROLES    AGE     VERSION
master   Ready    master   31h     v1.14.1
node1    Ready    &amp;lt;none&amp;gt;   10m     v1.14.1
node2    Ready    &amp;lt;none&amp;gt;   1m29s   v1.14.1

&lt;span style=&#34;color:#75715e&#34;&gt;# kubectl get pods -n kube-system&lt;/span&gt;
NAME                             READY   STATUS    RESTARTS   AGE
coredns-7ff77c879f-2scfj         1/1     Running   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          31h
coredns-7ff77c879f-9kwxq         1/1     Running   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          31h
etcd-master                      1/1     Running   &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;          31h
kube-apiserver-master            1/1     Running   &lt;span style=&#34;color:#ae81ff&#34;&gt;262&lt;/span&gt;        31h
kube-controller-manager-master   1/1     Running   &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;         31h
kube-flannel-ds-amd64-chxgv      1/1     Running   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          22m
kube-flannel-ds-amd64-rn2ls      1/1     Running   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          3h20m
kube-flannel-ds-amd64-v9dxg      1/1     Running   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          9m57s
kube-proxy-jtr6k                 1/1     Running   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          22m
kube-proxy-kzq9f                 1/1     Running   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          31h
kube-proxy-wjgqz                 1/1     Running   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          9m57s
kube-scheduler-master            1/1     Running   &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;         31h
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;可以试着使用 &lt;code&gt;kubectl get pods -n kube-system -o wide&lt;/code&gt; 可以查看更多列信息&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;现在集群已经基本安装完成, 接下来我们会使用 k8s 集群完成后续的服务管理.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>kubernetes04 网络基础</title>
      <link>https://www.iterdaily.com/post/kubernetes04/</link>
      <pubDate>Wed, 10 Jul 2019 22:01:23 +0800</pubDate>
      
      <guid>https://www.iterdaily.com/post/kubernetes04/</guid>
      
        <description>&lt;h3 id=&#34;k8s-外部基础设施&#34;&gt;K8S 外部基础设施&lt;/h3&gt;
&lt;p&gt;K8S 可以对平台之上的各种服务进行流量和负载管理, 但是生产中大多数企业并不是从 IaaS 层开始建设自己的生产系统的, 通常会有基础服务托管的提供商如阿里云, AWS等, 对于介入平台的流量管理方面, K8S 也需要以来一定的外部基础设施层面的服务进行协助, 如, LBaaS 等才能形成完整的生产 PaaS 平台.&lt;/p&gt;
&lt;p&gt;K8S 服务系统的组成上, 首先, 使用 Pod 服务容器进行封装, 每个服务都需要各自的 service 组件以接入用户请求, 由于 Pod 也有其自身的生命周期, 因此各个服务都还会有各自的 Controller 针对 Pod 实例进行管理.&lt;/p&gt;
&lt;p&gt;平台上的各个服务相互级联交错, 例如:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34; data-lang=&#34;mermaid&#34;&gt;graph LR
usr((请求)) --- sa
subgraph 服务A
sa{{service}} --- a1(pod A xxx)
sa{{service}} --- a2(pod A xxx)
end
a1 --- sb
a2 --- sb
subgraph 服务B
sb{{service}} --- b1(pod B xxx)
sb{{service}} --- b2(pod B xxx)
sb{{service}} --- b3(pod B xxx)
end
b1 --- sc
b2 --- sc
b3 --- sc
subgraph 服务C
sc{{service}} --- c1(pod C xxx)
sc --- c2(pod C xxx)
end
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;k8s-平台网络&#34;&gt;K8S 平台网络&lt;/h3&gt;
&lt;p&gt;K8S 的网络关联上有 3 种网络, 分别是,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pod 网络, 使同一组的 Pod 会运行在同一个网络中;&lt;/li&gt;
&lt;li&gt;集群网络, 让 service 运行的不同于 Pod 命名空间的网络;&lt;/li&gt;
&lt;li&gt;节点网络, 各个 K8S 节点相互联通的网络;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;外部请求首先到达节点网络, 然后经由节点代理至集群网络, 经由集群网络最后到达 Pod 网络.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;同 Pod 容器通信&lt;/p&gt;
&lt;p&gt;在使用 docker 容器时, 通常同一组容器经由内部 lo 网络即可通信.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pod 间通信&lt;/p&gt;
&lt;p&gt;通常在 docker 主机上的容器, 可能会在不同的主机上拥有相同的 IP 地址, 一个容器的网络数据离开节点本机之前之前会先经过 SNAT,  对端容器收到的流量也会经过 DNAT 转换, 这样跨主机的容器之间并不能直接通信而是相互只能通往各自所在节点的地址.&lt;/p&gt;
&lt;p&gt;但是如果节点上的 Pod 之间采用这种模式通讯就会带来非常严重的问题, 首先, 多次 NAT 转换有很大的性能消耗, 其次, Pod 之间不能直接建立网络上的集群关系, 最致命的是, Pod 之间从网络地址上是 &lt;em&gt;不能相互识别&lt;/em&gt; 的.&lt;/p&gt;
&lt;p&gt;针对 Pod 集群 K8S需要各个 Pod 之间可以直接使用对方的地址相互通信, 并处于同一网段, 不论 Pod 运行在哪个节点, 各个 Pod 的网络地址也不能相互冲突. 关于打通各个节点的容器网络的实现方法, 如果直接采用模拟物理网桥的连接方式, 容器之间通过物理网桥相互连接到同一个二层网络, 一个扁平的二层网络中, 当节点的规模较大时, 节点之间的 ARP 广播将会带来沉重的网络负担, 因此网桥不是一个适合大规模生产环境的方案.&lt;/p&gt;
&lt;p&gt;将不同节点的设别连接到同一个二层网络更好的实现方法是采用 Overlay Network 叠加网络的方式实现, 通过隧道转发网络两端的二层报文使之虽然工作在不同的物理网络但是却能以处于相同二层网络的方式相互通信, 并且叠加网络也是可以转发三层报文的, 另外通过让容器的主机之间的处于不同的网段 (例如 主机1 docker0 使用172.17.0.0/24, 主机2 docker0 使用 172.18.0.0/24), 就可以实现容器之间的 IP 地址相互不会冲突.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pod 与 Service 之间的通信&lt;/p&gt;
&lt;p&gt;Service 是需要反映在整个集群中的网络配置, 因此每个 node 上都有相关的网络转发规则, docker 容器可以将信息发送到自己所在主机的 docker0 网桥, 而数据到达 docker0 网桥之后就可以通过主机上的 网络转发规则到达 service 所在的网络.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt; +-----------Service-Network--------------+----------------------------+---------------
                                          |                            |
 +--------+--Pod-Network----+------+---------------------+------+----------------------
          |                 |      |      |              |      |      |
          |            +-------------------------+  +--------------------------+
    +-----+-------+    |    |      |      |      |  |    |      |      |       |
    |             |    | +--+-+ +--+-+ +--+--+   |  | +--+-+ +--+-+ +--+-+     |
    |             |    | |    | |    | |kube |   |  | |    | |    | |kube|     |
    |             |    | |Pod | |Pod | |proxy|   |  | |Pod | |Pod | |proxy     |
    |             |    | +--+-+ +--+-+ +--+--+   |  | +--+-+ +--+-+ +--+-+     |
    |   Master    |    |    |      |      |      |  |    |      |      |       |
    |             |    | +--+------+------+---+  |  |  +-+------+------+---+   |
    |             |    |   Node1                 |  |  Node2                   |
    +-----+-------+    +-----------+-------------+  +------------+-------------+
          |                        |                             |
+---------+---Node-Network---------+-----------------------------+--------------------
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;因为 Service 的变动这样的调整需要在整个集群都进行操作, 那么如何将一个动作应用到集群的每个node上呢?&lt;/p&gt;
&lt;p&gt;答案是 kube-proxy, kube-proxy 负责像 api-server 进行通信, 因为没一个节点的变动都需要汇报到 api-server, api-server 在发现节点的容器发生变动之后, 会生成一个通知事件该事件可以被任何关联的组件所接受, 对应发生变动的主机的 kube-porxy 收到之后会将本地 Pod 的变动反映到本地对应的网络转发规则中去, &lt;strong&gt;因此 Service 的管理是依靠 kube-proxy 在每个节点上的规则变更动作来实现的&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&#34;网络插件&#34;&gt;网络插件&lt;/h3&gt;
&lt;p&gt;以上 Pod网络, 集群网络 和 节点网络, 这 3 种网络都不是由 K8S 所提供的, 他们还需要通过外部的插件才能完成配置. K8S 通过 CNI 插件体系来完成对外部服务网络的解决方案对接. 如果需要将网络插件自身也托管在 K8S 之上(以附件的形式运行)为其他 Pod 提供网络服务, 则其所在的容器需要共享主机所在的节点的网络命名空间, 也就是使用宿主机网络模式, 这样就可以通过容器完成宿主机的系统管理.&lt;/p&gt;
&lt;p&gt;K8S 的网络插件需要符合一定的要求:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先, 需要在功能上提供连通集群和Pod的网络连通;&lt;/li&gt;
&lt;li&gt;其次, 在策略上还需要能支持对平台的网络进行各种管控治理, 例如打通同一种类型 Pod 的网络命名空间与针对 Pod 进行网络的隔离等.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;符合K8S的网络接口规范的插件非常多, 其中主要有 calico(隧道网络,支持BGP), flannel(叠加网络), canel(结合以上两者) 等.&lt;/p&gt;
&lt;h3 id=&#34;数据与通信安全性&#34;&gt;数据与通信安全性&lt;/h3&gt;
&lt;p&gt;集群的变动信息都会上报到 api-server 中去, 但是考虑到分区可用性和一致性的问题, 这些数据却不能是存放在运行 api-server 的 master 节点上的, 他们会被统一存放到主机点可共同访问的 etcd 中, etcd 支持通过 raft 协议保证分布式一致性, 并且通常部署时会采用多节点保证高可用性.&lt;/p&gt;
&lt;p&gt;etcd 也支持 restfull 接口但是处于安全性考虑需要使用 https 协议保证信息安全, 同时还需要进行双向认证, etcd 会使用不同的网络端口和证书完成进行对内和对外通信, 内部通讯采用点对点的双向认证通信证书, 向外(也就是api-server)提供服务则使用另外一套证书, 隔离两套网络流量, 他们就不能使用同一认证单位所签署的证书进行通信, 所以两套证书将使用不同的 CA 认证机构认证.&lt;/p&gt;
&lt;p&gt;同样的, api-server 也遵循两套证书分别处理对内(api-server之间一套)和对外(kubelet与kube-proxy两套)流量, 这样 etcd 和 api-server 就需要五套 ca 颁发的证书, 这里也是部署前需要了解清楚的.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>kubernetes03 Pod 相关控制</title>
      <link>https://www.iterdaily.com/post/kubernetes03/</link>
      <pubDate>Tue, 09 Jul 2019 16:01:23 +0800</pubDate>
      
      <guid>https://www.iterdaily.com/post/kubernetes03/</guid>
      
        <description>&lt;h3 id=&#34;pod-管理的简单分类&#34;&gt;Pod 管理的简单分类&lt;/h3&gt;
&lt;p&gt;Pod 可以由用户自行管理配置, 这样就形成了独立的自主式 Pod , 而通过平台的控制器管理器进行托管的Pod 才真正意义上是生产可用的, 也就是控制器托管的 Pod才是我们的资源最主要的被控制形态.&lt;/p&gt;
&lt;h3 id=&#34;pod-管理工具&#34;&gt;Pod 管理工具&lt;/h3&gt;
&lt;p&gt;Pod 是一个有自己生命周期的对象, 在一个自动化的系统中作为一个资源的原子操作单元, 会有调度器将其调度到集群中符合策略的节点上, 而管理 Pod 就需要为Pod 添加相应的一系列管理机制和工具.&lt;/p&gt;
&lt;h3 id=&#34;资源标签&#34;&gt;资源标签&lt;/h3&gt;
&lt;p&gt;label : key = value&lt;/p&gt;
&lt;p&gt;给资源添加标签元数据是一种很常见的资源管理方式, 通过给资源添加上键值标签就可以利用对标签的筛选来进行资源的划分和批量管理, 按照标签筛选就可以忽略资源的环境信息限制, 实现更加灵活的配置效果.&lt;/p&gt;
&lt;h3 id=&#34;pod-控制器&#34;&gt;Pod 控制器&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Replication controller(RC) 副本数控制器, 根据标签控制副数规模&lt;/li&gt;
&lt;li&gt;ReplicaSet 副本集控制器(新一代的RC), 支持新的基于集合的选择器需求&lt;/li&gt;
&lt;li&gt;Deployment 提供(无状态) Pod 和 ReplicaSet 管理, 提供声明式更新, 有部署,副本数设定,滚动升级回滚等功能&lt;/li&gt;
&lt;li&gt;StatefulSet 有状态控制器&lt;/li&gt;
&lt;li&gt;DaemonSet 确保全部或某些节点上运行一个 Pod 的副本, 调节 Pod 的分布控制&lt;/li&gt;
&lt;li&gt;Job 执行批处理任务, 仅执行一次任务, 保证任务的一个或多个Pod成功结束&lt;/li&gt;
&lt;li&gt;Ctonjob 创建基于时间调度的 Jobs, 用 Cron 格式进行编写, 并周期性地在给定的调度时间执行 Job&lt;/li&gt;
&lt;li&gt;Horizontal Pod Autoscaler(HPA) 根据资源利用率自动调整 service 中 Pod 数量, 实现 Pod 的水平自动伸缩&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;控制器使用示例 , 如, RC 控制器&lt;/p&gt;
&lt;p&gt;&lt;code&gt;rc.yml&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;apiVersion&lt;/span&gt;: apps/v1
&lt;span style=&#34;color:#66d9ef&#34;&gt;kind&lt;/span&gt;: ReplicaSet
&lt;span style=&#34;color:#66d9ef&#34;&gt;metadata&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;name&lt;/span&gt;: replicaset-example
&lt;span style=&#34;color:#66d9ef&#34;&gt;spec&lt;/span&gt;:
  &lt;span style=&#34;color:#66d9ef&#34;&gt;replicas&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;#启动pod的副本数&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;selector&lt;/span&gt;:                &lt;span style=&#34;color:#75715e&#34;&gt;#定义选择器为标签选择器。&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;matchLabels&lt;/span&gt;:
      &lt;span style=&#34;color:#66d9ef&#34;&gt;app&lt;/span&gt;: nginx
  &lt;span style=&#34;color:#66d9ef&#34;&gt;template&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;metadata&lt;/span&gt;:
      &lt;span style=&#34;color:#66d9ef&#34;&gt;labels&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;app&lt;/span&gt;: nginx                &lt;span style=&#34;color:#75715e&#34;&gt;#定义容器的标签&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;spec&lt;/span&gt;:                        &lt;span style=&#34;color:#75715e&#34;&gt;#定义容器&lt;/span&gt;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;containers&lt;/span&gt;:
      - &lt;span style=&#34;color:#66d9ef&#34;&gt;name&lt;/span&gt;: nginx
        &lt;span style=&#34;color:#66d9ef&#34;&gt;image&lt;/span&gt;: nginx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;启用: &lt;code&gt;kubectl apply -f rs.yaml &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;查看: &lt;code&gt;kubectl get pod --show-labels&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;停用: &lt;code&gt;kubectl delete -f rs.yaml&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;service-中间层&#34;&gt;service 中间层&lt;/h3&gt;
&lt;p&gt;因为 K8S 提供了对 Pod 副本数控制的相关控制器, 而多副本是动态变动的, 考虑到服务可用性, 请求到后端的设计上就不能采用固定的映射关系模型, 所以 K8S 为某一种服务对应的 Pod 和客户端之间统一提供了一个中间层的通讯总线, 由中间层来代理对应类型的服务, 并且循环监视和更新后端的 Pod 服务变动状态, 以此来维护客户端始终能够通过该中间层访问某种 Pod 内的服务, 而这个中间层代理的名称就直接叫做 &amp;ldquo;service&amp;rdquo;. 它可以提供给集群内部的其他服务访问, 也可以提供给集群外部访问.&lt;/p&gt;
&lt;p&gt;service 的名称和地址都是固定的, 它不但提供一个稳定的访问入口并且它还是一个调度器, 因为 Pod 由于自身的状态变化可能会发生调度, 其主机名和地址都是动态变动的, 所以 service 是通过标签选择器来进行 Pod 的资源定位的.&lt;/p&gt;
&lt;p&gt;service 形态上本身其实并不算一个服务组件实体, 也不是一个应用程序, 在早期的版本, service 是由一组 iptables 规则组成的服务 与 Pod 的 DNAT 映射关系组成的, 它只是一个抽象的中间层规则, service 的地址仅仅出现在 iptables 映射规则中, 但是因为性能方面的考虑, 在1.11之后的版本中 iptables 规则已经被 LVS 规则所取代, 并且可以由用户指定所采用的调度算法. 因为 service 的名称和地址的关系是可以被解析的, 所以 service 也存在与 DNS 的记录中. (K8S 的 DNS 组件也经过了多次迭代, 从 skyDNS 到 kubeDNS 到 coreDNS.)&lt;/p&gt;
&lt;h3 id=&#34;addons-附加组件&#34;&gt;AddOns 附加组件&lt;/h3&gt;
&lt;p&gt;一个完备的 K8S 集群在安装完成的第一件事就是要在集群中部署 K8S 的 DNS Pod 来保证其他 Pod 所对应的服务名称可以被解析, 这种 K8S 提供服务时自身所依赖的基础架构级别的 Pod 也被叫做 AddOns 附加组件. 诸如 coreDNS 和 kube-proxy.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>kubernetes02 初步认识</title>
      <link>https://www.iterdaily.com/post/kubernetes02/</link>
      <pubDate>Mon, 08 Jul 2019 19:01:23 +0800</pubDate>
      
      <guid>https://www.iterdaily.com/post/kubernetes02/</guid>
      
        <description>&lt;h3 id=&#34;从-borg-到-kubernetes&#34;&gt;从 Borg 到 kubernetes&lt;/h3&gt;
&lt;p&gt;在容器技术迅速普及的关键时刻, 诸多厂家开始押注容器技术, 并希望能够成为新市场的引领者, 编排领域的技术竞争也立即拉开, 谷歌在容器领域拥有非常深厚的技术积累, 面对这场势技术潮流谷歌也不想失去对技术市场的掌舵能力, 遂以自家的 Borg 系统为蓝本, 借鉴其设计思想, 采用 go 语言进行了一定的重构调整, 发布并开源了 kubernetes(舵手) 容器编排系统,  站在巨人肩上的 kubernetes 也不负众望迅速完成了对同期的其他竞争对手的超越, 获得了众多企业的技术认可, 同时 kubernetes 也吸引了众多的社区开发者加入到了项目的开发当中来, 紧跟其后的企业实践也广泛落地, 而为了让其推广的更加顺利, 谷歌又将 kubernetes 捐赠给了以社区为主导的 CNCF 基金会, 这也让技术企业可以更加放心的拥抱 kubernetes 技术, 最终有了kubernetes 当今的繁荣.&lt;/p&gt;
&lt;p&gt;kubernetes 首位字母之间有8个字母, 也简称 K8S .&lt;/p&gt;
&lt;p&gt;关键编排特性&lt;/p&gt;
&lt;p&gt;针对(尤其是无状态)应用, 它拥有众多的关键编排特性:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;自动装箱能力, 基于容器及其资源依赖自动的完成容器的部署, 而不影响其可用性.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自我修复能力, 利用容器的快速启动能力, 可以针对故障的容器进行快速的重建恢复.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;水平扩展能力, 根据服务的负载自动的进行水平方向服务规模拓展.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;服务发现, 为容器的依赖的关联服务提供自动的搜寻发现.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;负载均衡, 针对多个容器实现自动负载均衡.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自动发布和回滚.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;秘钥和配置管理, 针对集群化容器外部配置的加载提供自动集约化的管理.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;存储编排, 提供存储卷的动态供给, 按需动态提供容器的存储.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;批量处理执行等.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;如何理解-kubernetes-基本架构&#34;&gt;如何理解 kubernetes 基本架构&lt;/h3&gt;
&lt;p&gt;kubernetes 首先是一个集群, 将多个主机的资源抽象后统一调度, 从而逻辑上当做一个大的整体来使用.&lt;/p&gt;
&lt;p&gt;K8S 是一个有中心节点架构的集群系统, 集群的节点是有 master / nodes的角色区别的,  集群中有一组 master 节点作为主节点, 多台冗余的主节点用来保障服务的可用性(如3点高可用), nodes作为服务实际运行的节点各自均为集群贡献一定的资源与能力, 与 master 节点存在如同工蜂和蜂后的关系.&lt;/p&gt;
&lt;p&gt;服务托管的工作流程上, 服务的请求首先会到达 master 节点, master调度器会对请求和现有的资源可用状态进行分析, 并将请求调度到与请求最合适的节点, nodes节点会在请求到达之后从镜像仓库获取需要被托管的容器并运行.&lt;/p&gt;
&lt;p&gt;K8S本身不提供容器仓库, 但是容器仓库自身可以被托管在K8S平台, K8S本身也可以完成自托管.&lt;/p&gt;
&lt;p&gt;核心架构基本概念&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;针对请求分析, master 首先拥有 &amp;ldquo;API server&amp;rdquo; 组件用于相应 API请求;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;针对请求调度, master节点拥有 scheduler 组件, 可以针对资源进行多维度和精细粒度的调度, 可设置资源上下限阈值,  调度器会采用两级调度机制针对可用资源进行筛选, 预选出符合需求的节点后, 优选出最佳适配的节点执行请求.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;针对容器状态维护, 在托管容器的节点会有 &amp;ldquo;控制器&amp;rdquo; 通过 control loop 控制循环不断探测和监视容器的内部应用状态 (不是容器运行状态), 并通过发起新的请求和驱动 &amp;ldquo;kuberlet(节点上接受集群调度的代理)&amp;rdquo; 工作等各种途径来保证应用运行状态始终向最接近用户期待的状态进行迁移.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;node 上的运行kubelet 接收调度任务, 通过容器引擎(通常是docker)完成容器的最终建立.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;kubernetes 支持众多的容器控制器, 控制容器自身健康状态的只是其中之一.&lt;/p&gt;
&lt;p&gt;针对维护容器健康状态的 控制器的健康状态, K8S 通过分布在master之上冗余的 控制器管理器 维护控制器的状态.&lt;/p&gt;
&lt;p&gt;Pod 概念&lt;/p&gt;
&lt;p&gt;K8S容器平台上容器的调度并不是以单体容器自身为单位, 容器调度的最小单位是 Pod (Pod原意为豆荚),  Pod 包含了针对多个容器的特定维护配置设定和资源限制的规则.&lt;/p&gt;
&lt;p&gt;Pod本身可以允许多个容器, 它们共享底层的网络,UTC, IPC , 而 USER MNT 和PID 相互隔离, 同一个Pod中仅有一个容器是主容器, 其他的容器均为辅助容器. 虚拟机擅长将整组资源彻底隔离, 而容器则更加擅长对应用进行隔离, Pod 允许多个多个容器共存一定程度可以模拟耦合在传统虚拟机中由多个进程所组成的服务关系, 但是除非关系特别紧密或者有特殊需求 (如sidecar) 否则并不需要将多个容器塞到一个容器中, 随意的将多个容器塞到一个Pod中通常会破坏容器对应用隔离所带来的便利性.&lt;/p&gt;
&lt;p&gt;Pod可以通过标签进行识别, 但是Pod标签与容器标签是不同的, Pod选择可以通过 &amp;ldquo;标签选择器&amp;rdquo; label selector 完成, 并且 K8S 的各种资源对象都可以通过标签选这起来进行筛选处理.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>kubernetes01 背景趋势</title>
      <link>https://www.iterdaily.com/post/kubernetes01/</link>
      <pubDate>Sat, 06 Jul 2019 23:01:23 +0800</pubDate>
      
      <guid>https://www.iterdaily.com/post/kubernetes01/</guid>
      
        <description>&lt;h3 id=&#34;从手工运维到自动运维&#34;&gt;从手工运维到自动运维&lt;/h3&gt;
&lt;p&gt;IT 技术发展至今, 手工运维的时代已经一去不返, 为了摆脱手动的运维工作, 大家常见的应用与服务安装, 部署工具有: ansible, puppet, chef, saltstack 等等&lt;/p&gt;
&lt;p&gt;以 ansible 为例, 其实它可以看做是应用的编排管理工具, 包含了安装, 配置, 服务启动, 以及完成按照 playbook 的有依赖关系等情况下的多应用编排, 而编排正是自动化发展的一个重要主题.&lt;/p&gt;
&lt;h3 id=&#34;应用服务的容器化&#34;&gt;应用服务的容器化&lt;/h3&gt;
&lt;p&gt;在 docker 开始流行开始, 应用程序的环境配置与打包封装都被大大简化, 极大的简化了应用分发的难度, 而使用诸如 ansible/puppet 之类的编排工具进行服务管理时, 其编排对象已经发生了变化, 从传统的系统服务开始逐渐过渡为运行在容器内的服务进程, 在容器化越来越广泛的场景里, ansible/puppet 等传统编排工具逐渐不再适用, 容器化应用的服务控制接口已经与传统的应用程序相比在访问, 控制, 和管理上是有所不同的, docker 时代需要一个面向容器化的应用管理编排工具.&lt;/p&gt;
&lt;h3 id=&#34;集群化的应用编排&#34;&gt;集群化的应用编排&lt;/h3&gt;
&lt;p&gt;docker compose, docker swarm, docker machine&lt;/p&gt;
&lt;p&gt;针对 docker 进行编排的工具, 常用的也 有 docker compose 这样面向单个主机上的多个容器编排的应用工具, 但是因为 docker 的轻量化, 简化了分发并且通用性强, 所以 docker 也非常适应大规模应用的场景, 也自然需要面向集群的编排管理, 而 docker 也为此准备了docker swarm 作为集群管理工具将多个主机提供的 docker 资源进行整合为资源池进行管理, 之上的应用编排管理 docker-compose 只需要针对 docker swarm 所抽象出来的资源进行管理而不用关心底层的主机差异. docker swarm 让一台服务器成为提供 docker 服务的主机需要使用 docker machine 来进行初始化, 从而成为 docker swarm 的一部分.&lt;/p&gt;
&lt;p&gt;mesos&lt;/p&gt;
&lt;p&gt;mesos 本身是作为 DCOS (数据中心操作系统) 而存在的, 其设计是为了将整个数据中心硬件所提供的资源进行统一的调度和分配, 更加强调资源调度分配, 但其资源管理接口本身并不是面向容器的, 需要 marathon 组件辅助来完成容器资源的对接.&lt;/p&gt;
&lt;p&gt;kubernetes&lt;/p&gt;
&lt;p&gt;kubernetes 在谷歌技术积累的基础上开源的编排工具, 也是当前的容器编排领域的事实标准, 其份额在 2018 年就已经高达 80%, 远远超出自然垄断的 35%市场比例, 已经成为了容器编排领域的最终标准.&lt;/p&gt;
&lt;h3 id=&#34;与之结合的技术趋势&#34;&gt;与之结合的技术趋势&lt;/h3&gt;
&lt;p&gt;DevOps, MicroService, Blockchain&lt;/p&gt;
&lt;p&gt;开发模式上, 从早起的瀑布式开发模式到敏捷开发, 到精益开发, 到把开发与运维进行整合形成的 DevOps 的开发模式, 技术领域的生产流程在不断演进.&lt;/p&gt;
&lt;p&gt;应用模式上, 从早起的单体模式, 到分层架构, 到微服务, 将大的单体应用拆解成独立微型服务彼此协作, 应用的调用关系也逐渐变得复杂. 而微服务的封装, 分发, 状态管理等方面在实现方案要求上都与容器的应用场景非常贴合, 如果再加上一个面向容器的编排管理平台, 那么容器就可以与微服务的架构方案形成非常良好的适配.&lt;/p&gt;
&lt;p&gt;容器在 DevOps 领域上, 屏蔽了外部环境差异性, 弥合了系统异构的缝隙, 消除了交付环节诸多的技术障碍, 使得原本的应用交付与部署被简化, 其自动化实现的技术成本大幅降低, 服务的容器化使得产品封装流程迅速缩短, 开发中的 CI 持续集成, CD 持续交付(delivery), CD 持续部署(deployment) 也得以随之得以落地, DevOps 的开发文化在中小企业中也能得以实践.&lt;/p&gt;
&lt;p&gt;DevOps 是通过自动化从开发人员到运维人员之间产品信息传递上的中间环节, 削减团队之间的非生产环节的精力开支和消耗, 加快从代码到产品环境的生产流程. DevOps 让产品的开发与维护中间的阻力降到最低, 也推动了敏捷开发的实践, 缩短设计实现与用户端的沟通距离, 将单次大幅迭代转化为多次小步迭代, 最大幅度降低细节上的试错成本, 通过快速试错来避免错误放大, 将产品的生产流程放在在一个更加高效的闭环之中从而最终达到将产品快速迭代和完善的目的.&lt;/p&gt;
&lt;p&gt;DevOps 作为一种技术领域的文化运动, 非常需要完善和稳定的 CICD 的工具链, 该工具链的稳定性越好越容易形成围绕流程自动化的开发文化, 其落地实践队生产流程的赋能和推动作用也就越明显 , DevOps 的探索步伐就可以在产品的生产过程中进行的更加深入, 效率提升也会被逐渐细化到开发的每一个环节中去. 一个产品在计划, 开发, 构建, 测试, 与发布的流程中, 在从代码到达版本管理仓库的环节开始, 后续的构建, 测试与发布, 都可以通过统一环境因素来达到完全自动化的要求, 对生产环境的细节控制, 诸如蓝绿发布, 灰度(金丝雀)发布等等也都能得以形成实践.&lt;/p&gt;
&lt;p&gt;伴随容器技术逐渐成为开发者必不可少的技能, 众多的流行技术的也逐渐与容器产生结合.&lt;/p&gt;
&lt;p&gt;容器编排本身不能直接提供 微服务与 DevOps, 但是依托于容器的编排, 这两者才能得以落地和流行, 而其流行又进一步推动了容器编排的进一步技术需求.&lt;/p&gt;
&lt;h3 id=&#34;价值与挑战&#34;&gt;价值与挑战&lt;/h3&gt;
&lt;p&gt;容器技术不论是对 DevOps 还是 MicroService 的推动, 都使得容器编排的需求越来越旺盛, 而伴随着 DevOps 和 MicroService 的规模化应用场景出现的越来越多, 集群化的编排挑战也越来越大, 集群规模的扩大不可避免的要应对更大的复杂性问题, 服务的弹性调节, 故障自愈, 质量控制, 多服务调用链维护, 以及分布式技术广泛采用的大趋势下, 对复杂的CAP问题(通常很难满足三者因此需要底层)增加外部支撑等等, 统统都成了容器编排维度上的巨大挑战. 应对这些挑战没有一个高效自动化的平台来摆脱人力管理的话, 那这一切几乎是不可能实现的, 解决这些问题必然要抛弃手工维护, 最大程度的减少中间环节的人工参与, 将自动化与性能做到高度的完备.&lt;/p&gt;
&lt;p&gt;完善的自动化容器编排可以与众多的新技术产生良性的关联互动, 促进诸多新技术快速形成产品, 也才能推动以及适应新的技术潮流.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Django &#43; Vue 快速配置开发环境(vs code)</title>
      <link>https://www.iterdaily.com/post/web_django-vue-scaffold2/</link>
      <pubDate>Thu, 07 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.iterdaily.com/post/web_django-vue-scaffold2/</guid>
      
        <description>&lt;h2 id=&#34;基本环境&#34;&gt;基本环境&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Python 环境配置&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;安装 Python3 与 pip3 包管理工具&lt;/li&gt;
&lt;li&gt;配置 pip 软件源&lt;/li&gt;
&lt;li&gt;安装 virtualenv 工具&lt;/li&gt;
&lt;li&gt;若使用 sqlite 数据库, 请升级系统的 sqlite3 版本到最新稳定版&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;NodeJS 环境配置 (根据自己的OS选择)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;npm 配置换源, 建议使用淘宝源&lt;/p&gt;
&lt;p&gt;&lt;code&gt;npm config set registry https://registry.npm.taobao.org&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;npm config get registry&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Vue 环境配置 vue [读作 view]&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;npm install -g vue-cli&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;安装完成 &lt;code&gt;vue -v&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;vs-code-插件推荐&#34;&gt;VS Code 插件推荐&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vuejs/vetur&#34;&gt;Vetur&lt;/a&gt; : 语法高亮, 智能提示, 自动补全, 格式化, 官方推荐, 必备&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/OYsun/vscode-VueHelper&#34;&gt;vscode-VueHelper&lt;/a&gt; :  代码片段&lt;/li&gt;
&lt;li&gt;GitLens: 显示项目每一行代码的作者以及提交时间&lt;/li&gt;
&lt;li&gt;Live Server : 实时项目预览&lt;/li&gt;
&lt;li&gt;HTML boilerplate: HTML 模板插件(从空文件中补全 HTML文档结构)&lt;/li&gt;
&lt;li&gt;Auto Rename Tag: 自动完成另一侧标签的同步修改&lt;/li&gt;
&lt;li&gt;Auto Close Tag: 自动闭合 HTML/XML 标签&lt;/li&gt;
&lt;li&gt;CSS peek: 样式定义跳转工具&lt;/li&gt;
&lt;li&gt;Debugger for Chrome: 影射 vscode 上的断点到 Chrome 上方便调试&lt;/li&gt;
&lt;li&gt;Prettier - Code formatter: 代码格式化工具&lt;/li&gt;
&lt;li&gt;Chinese (Simplified) Language Pack : 简体中文汉化插件(安装后重启编辑器)&lt;/li&gt;
&lt;li&gt;MarkDown Preview Enhanced: 实时预览 MarkDown&lt;/li&gt;
&lt;li&gt;Project Manager: 多项目切换管理工具&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;插件不是越多越好, 有选择的安装适合的即可&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;初始化-django-项目&#34;&gt;初始化 Django 项目&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;创建项目的 venv 环境&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;启用 venv, 安装 Django 框架&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;pip3 install django -i https://pypi.mirrors.ustc.edu.cn/simple/&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;python3 -m django --version&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用 &lt;code&gt;django-admin&lt;/code&gt; 工具创建 新的框架站点&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;mkdir project_test
   
&lt;span style=&#34;color:#75715e&#34;&gt;# 创建站点&lt;/span&gt;
cd project_test
django-admin startproject site_test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建模板目录&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;cd site_test
mkdir templates
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;编辑页面模板, 这里填充一个基本的页面 &lt;code&gt;templates/index.html&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;html&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lang&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;en&amp;#34;&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;head&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;meta&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;charset&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;UTF-8&amp;#34;&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;meta&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;viewport&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;content&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;width=device-width, initial-scale=1.0&amp;#34;&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;title&lt;/span&gt;&amp;gt;app_test&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;title&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;head&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;body&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;h1&lt;/span&gt;&amp;gt;Vue Django&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;h1&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;body&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;html&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;添加模板目录到 &lt;code&gt;site_test/settings.py&lt;/code&gt; 中&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt; ROOT_URLCONF &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;svtest.urls&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;
 &lt;span style=&#34;color:#ae81ff&#34;&gt;53&lt;/span&gt; 
 &lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt; TEMPLATES &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
 &lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt;     {
 &lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;         &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;BACKEND&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;django.template.backends.django.DjangoTemplates&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;,
&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt;         &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;DIRS&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;: [],
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt;         &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;DIRS&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;: [
          &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;templates&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
        ],  
 &lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt;         &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;APP_DIRS&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;: True,                                                                                                                                                                           
 &lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt;         &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;OPTIONS&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;: {
 &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;             &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;context_processors&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;: [
 &lt;span style=&#34;color:#ae81ff&#34;&gt;61&lt;/span&gt;                 &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;django.template.context_processors.debug&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;,
 &lt;span style=&#34;color:#ae81ff&#34;&gt;62&lt;/span&gt;                 &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;django.template.context_processors.request&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;,
 &lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;                 &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;django.contrib.auth.context_processors.auth&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;,
 &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;                 &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;django.contrib.messages.context_processors.messages&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;,
 &lt;span style=&#34;color:#ae81ff&#34;&gt;65&lt;/span&gt;             ],
 &lt;span style=&#34;color:#ae81ff&#34;&gt;66&lt;/span&gt;         },
 &lt;span style=&#34;color:#ae81ff&#34;&gt;67&lt;/span&gt;     },
 &lt;span style=&#34;color:#ae81ff&#34;&gt;68&lt;/span&gt; ]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;继续配置 django 站点的其他基本设置&lt;/p&gt;
&lt;p&gt;编辑 &lt;code&gt;&amp;lt;站点名称&amp;gt;/settings.py&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;开放访问限制: &lt;code&gt;ALLOWED_HOSTS = [&#39;*&#39;]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;修改语言: &lt;code&gt;LANGUAGE_CODE = zh-hans&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;修改时区: &lt;code&gt;TIME_ZONE = Asia/Shanghai&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;测试服务启动&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 启动 django 自带的 web 服务器&lt;/span&gt;
cd site_test
python3 manage.py runserver
   
&lt;span style=&#34;color:#75715e&#34;&gt;# 默认测试的服务运行在 回环地址的 8000 端口, 若指定 IP 和端口使用:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# python3 manage.py runserver &amp;lt;IP:port&amp;gt;&lt;/span&gt;
   
&lt;span style=&#34;color:#75715e&#34;&gt;# 运行的输出:&lt;/span&gt;
Performing system checks...
   
System check identified no issues &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; silenced&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;.
   
You have &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt; unapplied migration&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;s&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;. Your project may not work properly &lt;span style=&#34;color:#66d9ef&#34;&gt;until&lt;/span&gt; you apply the migrations &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; app&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;s&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;: admin, auth, contenttypes, sessions.
Run &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;python manage.py migrate&amp;#39;&lt;/span&gt; to apply them.
   
March 7, &lt;span style=&#34;color:#ae81ff&#34;&gt;2019&lt;/span&gt; - 21:06:30
Django version 2.2.12, using settings &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;site_test.settings&amp;#39;&lt;/span&gt;
Starting development server at http://127.0.0.1:8000/
Quit the server with CONTROL-C.
   
&lt;span style=&#34;color:#75715e&#34;&gt;# 浏览器打开http://127.0.0.1:8000/来查看该站点&lt;/span&gt;
   
&lt;span style=&#34;color:#75715e&#34;&gt;# 可以正常访问欢迎页即可,  Ctrl + C 退出服务, 准备进行下一步&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;创建-django-站点的应用&#34;&gt;创建 Django 站点的应用&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;站点目录下创建应用&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;cd site_test
python manage.py startapp app_test

tree app_test/
app_test/
├── admin.py
├── apps.py
├── __init__.py
├── migrations
│   └── __init__.py
├── models.py
├── tests.py
└── views.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;编辑应用的视图函数 &lt;code&gt;&amp;lt;应用目录&amp;gt;/views.py&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; django.shortcuts &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; render

&lt;span style=&#34;color:#75715e&#34;&gt;# Create your views here.&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# 新定义一个 home 视图返回模板目录中的 index.html&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;home&lt;/span&gt;(request):
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; render(request, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;index.html&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;
&lt;p&gt;为应用的页面规划 URL 路由地址&lt;/p&gt;
&lt;p&gt;创建应用的路由配置文件 &lt;code&gt;&amp;lt;应用目录&amp;gt;/urls.py&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;touch app_test/urls.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;添加页面路由规则到应用的 &lt;code&gt;&amp;lt;应用目录&amp;gt;/urls.py&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 从 django url 模块导入 path 方法来配置路径&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; django.urls &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; path
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; app_test &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; views 
   
&lt;span style=&#34;color:#75715e&#34;&gt;# 定义应用中相应的 url 与视图之间 进行模式匹配的 规则集合&lt;/span&gt;
urlpatterns &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
  &lt;span style=&#34;color:#75715e&#34;&gt;# 路径, 视图, 规则名称&lt;/span&gt;
  path(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, view&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;views&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;home, name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;home&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;),
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;把 应用的页面路由 引入到 站点的路由规则中&lt;/p&gt;
&lt;p&gt;先将应用 添加到站点的应用定义中, 编辑 &lt;code&gt;&amp;lt;站点目录&amp;gt;/settings.py&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt; INSTALLED_APPS &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
 &lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;     &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;django.contrib.admin&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;,
 &lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;     &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;django.contrib.auth&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;,
 &lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;     &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;django.contrib.contenttypes&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;,
 &lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;     &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;django.contrib.sessions&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;,
 &lt;span style=&#34;color:#ae81ff&#34;&gt;38&lt;/span&gt;     &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;django.contrib.messages&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;,
 &lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt;     &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;django.contrib.staticfiles&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;,
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;       &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;app_test&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;,
 &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt; ]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;再将应用的路由配置 引入 站点的路由配置中, 编辑 &lt;code&gt;&amp;lt;站点目录&amp;gt;urls.py&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; django.contrib &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; admin
&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; django.urls &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; path
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; django.urls &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; path, include
 &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt; 
 &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt; urlpatterns &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
 &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;     path(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;admin/&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, admin&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;site&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;urls),
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;       path(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;app_test/&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, include(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;app_test.urls&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)),
 &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt; ]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;测试访问站点的 应用 url&lt;/p&gt;
&lt;p&gt;浏览器打开: 站点地址+应用路径, 如&lt;/p&gt;
&lt;p&gt;这里例子中的就是  http://127.0.0.1:8000/app_test/&lt;/p&gt;
&lt;p&gt;如果正常, 那么这个应用的基本配置就准备好了, 可以准备下一步了.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;测试应用接口返回序列化的-json-数据&#34;&gt;测试应用接口返回序列化的 json 数据&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;为返回 json 数据的接口在 &lt;code&gt;&amp;lt;应用目录&amp;gt;/views.py&lt;/code&gt; 定义一个新的视图函数, 使用 &lt;code&gt;JsonResponse&lt;/code&gt; 进行数据序列化.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; django.shortcuts &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; render
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; django.http.response &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; JsonResponse 
   
  &lt;span style=&#34;color:#75715e&#34;&gt;# Create your views here.&lt;/span&gt;
   
  &lt;span style=&#34;color:#75715e&#34;&gt;# 新定义一个 home 视图返回模板目录中的 index.html&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;home&lt;/span&gt;(request):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; render(request, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;index.html&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;api_test&lt;/span&gt;(request):
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# 应用数据, 根据自己的应用逻辑获取, 这里可以是固定的假数据&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;      api_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;        {&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;python&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;price&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2999&lt;/span&gt;},
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;        {&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;java&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;price&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;5999&lt;/span&gt;},
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;        {&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;golang&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;price&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;9999&lt;/span&gt;},
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;      ]
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;# 因为字典表到 json 的序列化有一些不安全的因素, 如,日期时间方面, 这里要加上 safe=False&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; JsonResponse(api_data, safe&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;False)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;为新接口的视图函数 也添加路由规则&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 从 django url 模块导入 path 方法来配置路径&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; django.urls &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; path
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; app_test &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; views 
   
&lt;span style=&#34;color:#75715e&#34;&gt;# 定义应用中相应的 url 与视图之间 进行模式匹配的 规则集合&lt;/span&gt;
urlpatterns &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
    &lt;span style=&#34;color:#75715e&#34;&gt;# 路径, 视图, 规则名称&lt;/span&gt;
    path(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, view&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;views&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;home, name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;home&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;),
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;   path(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;api/api_test&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, view&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;views&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;api_test, name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;api_test&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;),
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;测试访问新的接口地址&lt;/p&gt;
&lt;p&gt;浏览器打开: 站点地址+应用路径+接口路径, 如&lt;/p&gt;
&lt;p&gt;这里例子中的就是  http://127.0.0.1:8000/app_test/api/api_test/&lt;/p&gt;
&lt;p&gt;如果页面看到的内容跟我们的假数据一直, 那么接口就已经正常工作了.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;在相应页面中引入-vue-与-axios&#34;&gt;在相应页面中引入 Vue 与 axios&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在页面头部使用 CND 的方式引入 &lt;code&gt;Vue.js&lt;/code&gt; , 生产环境最好指定版本.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;同样的, 再引入 &lt;code&gt;axios.js&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://cdn.bootcdn.net/ajax/libs/axios/0.20.0-0/axios.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;定义 vue  的绑定元素与前台显示逻辑, 比如渲染一个表格&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!--&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; 定义 vue 绑定的元素 &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;--&amp;gt;&lt;/span&gt;
        &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;app&amp;#34;&lt;/span&gt;&amp;gt;
            &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;table&lt;/span&gt;&amp;gt;
                &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!--&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; 标题行 &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;--&amp;gt;&lt;/span&gt;
                &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;tr&lt;/span&gt;&amp;gt;
                    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;td&lt;/span&gt;&amp;gt;#&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;td&lt;/span&gt;&amp;gt;
                    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;td&lt;/span&gt;&amp;gt;标题&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;td&lt;/span&gt;&amp;gt;
                    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;td&lt;/span&gt;&amp;gt;价格&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;td&lt;/span&gt;&amp;gt;
                &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;tr&lt;/span&gt;&amp;gt;
                &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!--&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; 内容行 &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;--&amp;gt;&lt;/span&gt;
                &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;tr&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;v-for&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;course in courses&amp;#34;&lt;/span&gt;&amp;gt;
                    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;td&lt;/span&gt;&amp;gt;[[course.id]]&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;td&lt;/span&gt;&amp;gt;
                    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;td&lt;/span&gt;&amp;gt;[[course.name]]&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;td&lt;/span&gt;&amp;gt;
                    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;td&lt;/span&gt;&amp;gt;[[course.price]]&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;td&lt;/span&gt;&amp;gt;
                &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;tr&lt;/span&gt;&amp;gt;
            &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;table&lt;/span&gt;&amp;gt;
        &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;分隔符是自定义的双中括号, 下一步会进行定义.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Ctrl + Shift + L 可以快速替换 VS code 中高亮选中的内容&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在页面底部加入自定义的 script 脚本块, 定义要挂载的元素 ID, 需要的键值数据对, 自定义分隔符等 .&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;&amp;gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Vue&lt;/span&gt;({
            &lt;span style=&#34;color:#a6e22e&#34;&gt;el&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#app&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#75715e&#34;&gt;// 修改 vue 的分隔符
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;delimiters&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[[&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;]]&amp;#34;&lt;/span&gt;],
            &lt;span style=&#34;color:#75715e&#34;&gt;// 数据键值对
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
                &lt;span style=&#34;color:#a6e22e&#34;&gt;courses&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; []
            },
            &lt;span style=&#34;color:#75715e&#34;&gt;// 绑定元素时执行函数
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;mounted&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(){
                &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;fetchData&lt;/span&gt;()
            },
            &lt;span style=&#34;color:#75715e&#34;&gt;// 请求 api 中的json数据
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;methods&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
                &lt;span style=&#34;color:#a6e22e&#34;&gt;fetchData&lt;/span&gt;(){
                    &lt;span style=&#34;color:#75715e&#34;&gt;// 使用 axios 异步请求站内的数据替换定义的数据值
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                    &lt;span style=&#34;color:#a6e22e&#34;&gt;axios&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/app_test/api/api_test&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;then&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;response&lt;/span&gt;=&amp;gt;{
                        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;courses&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;response&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;;
                    }), &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; =&amp;gt;{
                        &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;);
                    }
                }
            }
        })
    &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了避免和 django 冲突, 这里需要修改 vue 使用的模板数据分隔符, 比如使用双中括号.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用浏览器查看模板页面的最终显示结果&lt;/p&gt;
&lt;p&gt;这里我们的访问地址是 http://127.0.0.1:8000/app_test/&lt;/p&gt;
&lt;p&gt;如果一切正常, 那么前台页面就配置成功了.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;此时, 我们已经完成了通过 HTML 页面模板中的 axios 脚本异步请求服务器端的 json 数据, 然后使用请求到的数据替换本地定义的数据, 再通过 vue.js 的语法将数据绑定到页面元素, 最终渲染成页面的一系列,  Vue.js+django 整合应用快速示例就完成了.&lt;/p&gt;
&lt;h3 id=&#34;模板页面全文示例&#34;&gt;模板页面全文示例&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;html&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lang&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;en&amp;#34;&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;head&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;meta&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;charset&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;UTF-8&amp;#34;&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;meta&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;viewport&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;content&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;width=device-width, initial-scale=1.0&amp;#34;&lt;/span&gt;&amp;gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!--&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; 引入 vue &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;--&amp;gt;&lt;/span&gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;&amp;gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!--&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; 引入 axios &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;--&amp;gt;&lt;/span&gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://cdn.bootcdn.net/ajax/libs/axios/0.20.0-0/axios.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;title&lt;/span&gt;&amp;gt;app_test&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;title&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;head&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;body&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;h1&lt;/span&gt;&amp;gt;Vue Django&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;h1&lt;/span&gt;&amp;gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!--&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; 定义 vue 绑定的元素 &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;--&amp;gt;&lt;/span&gt;
        &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;app&amp;#34;&lt;/span&gt;&amp;gt;
            &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;table&lt;/span&gt;&amp;gt;
                &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!--&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; 标题行 &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;--&amp;gt;&lt;/span&gt;
                &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;tr&lt;/span&gt;&amp;gt;
                    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;td&lt;/span&gt;&amp;gt;#&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;td&lt;/span&gt;&amp;gt;
                    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;td&lt;/span&gt;&amp;gt;标题&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;td&lt;/span&gt;&amp;gt;
                    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;td&lt;/span&gt;&amp;gt;价格&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;td&lt;/span&gt;&amp;gt;
                &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;tr&lt;/span&gt;&amp;gt;
                &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!--&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; 内容行 &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;--&amp;gt;&lt;/span&gt;
                &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;tr&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;v-for&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;course in courses&amp;#34;&lt;/span&gt;&amp;gt;
                    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;td&lt;/span&gt;&amp;gt;[[course.id]]&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;td&lt;/span&gt;&amp;gt;
                    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;td&lt;/span&gt;&amp;gt;[[course.name]]&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;td&lt;/span&gt;&amp;gt;
                    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;td&lt;/span&gt;&amp;gt;[[course.price]]&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;td&lt;/span&gt;&amp;gt;
                &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;tr&lt;/span&gt;&amp;gt;
            &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;table&lt;/span&gt;&amp;gt;
        &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;&amp;gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Vue&lt;/span&gt;({
            &lt;span style=&#34;color:#a6e22e&#34;&gt;el&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#app&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#75715e&#34;&gt;// 修改 vue 的分隔符
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;delimiters&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[[&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;]]&amp;#34;&lt;/span&gt;],
            &lt;span style=&#34;color:#75715e&#34;&gt;// 数据键值对
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
                &lt;span style=&#34;color:#a6e22e&#34;&gt;courses&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; []
            },
            &lt;span style=&#34;color:#75715e&#34;&gt;// 绑定元素时执行函数
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;mounted&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(){
                &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;fetchData&lt;/span&gt;()
            },
            &lt;span style=&#34;color:#75715e&#34;&gt;// 请求 api 中的json数据
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;methods&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
                &lt;span style=&#34;color:#a6e22e&#34;&gt;fetchData&lt;/span&gt;(){
                    &lt;span style=&#34;color:#75715e&#34;&gt;// 使用 axios 异步请求的数据替换定义的数据值
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                    &lt;span style=&#34;color:#a6e22e&#34;&gt;axios&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/app_test/api/api_test&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;then&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;response&lt;/span&gt;=&amp;gt;{
                        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;courses&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;response&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;;
                    }), &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; =&amp;gt;{
                        &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;);
                    }
                }
            }
        })
    &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;body&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;html&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>Vue &#43; Django 快速配置开发环境</title>
      <link>https://www.iterdaily.com/post/web_django-vue-scaffold/</link>
      <pubDate>Wed, 06 Mar 2019 16:01:23 +0800</pubDate>
      
      <guid>https://www.iterdaily.com/post/web_django-vue-scaffold/</guid>
      
        <description>&lt;h2 id=&#34;工具安装与vue项目创建&#34;&gt;工具安装与vue项目创建&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;chrome 浏览器 (页面测试)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;打开你的音乐播放器 (可选)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装 NodeJS (根据自己的OS选择)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;命令行测试 &lt;code&gt;node&lt;/code&gt; 运行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;npm 配置换源, 建议使用淘宝源&lt;/p&gt;
&lt;p&gt;&lt;code&gt;npm config set registry https://registry.npm.taobao.org&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;npm config get registry&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装 vue [读作 view]&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;npm install -g vue-cli&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;安装完成 &lt;code&gt;vue -v&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装 vue IDE&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;jetbrains : WebStom&lt;/li&gt;
&lt;li&gt;ms: &lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;VSCode&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;插件 &lt;a href=&#34;https://github.com/vuejs/vetur&#34;&gt;Vetur&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;插件 &lt;a href=&#34;https://github.com/OYsun/vscode-VueHelper&#34;&gt;vscode-VueHelper&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;atom
&lt;ol&gt;
&lt;li&gt;插件 : language-vue&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;DCloud: HBuilder&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;创建-vue-脚手架&#34;&gt;创建 vue 脚手架&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;cd &amp;lt;你的工作目录&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vue init webpack &amp;lt;项目名称&amp;gt;&lt;/code&gt; (项目名称请使用英文小写)&lt;/li&gt;
&lt;li&gt;在交互式命令行中输入项目的配置
&lt;ol&gt;
&lt;li&gt;项目名称&lt;/li&gt;
&lt;li&gt;描述&lt;/li&gt;
&lt;li&gt;作者&lt;/li&gt;
&lt;li&gt;是否安装 vue-router [y]&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;li&gt;是否使用 npm [y]&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;IDE 编辑器打开 vue 项目目录&lt;/li&gt;
&lt;li&gt;终端进入项目工作目录 &lt;code&gt;npm run dev&lt;/code&gt; 启动项目&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;配置你的页面&#34;&gt;配置你的页面&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;编辑 &lt;code&gt;src/components/xxx.vue&lt;/code&gt; 也就是页面模板&lt;/li&gt;
&lt;li&gt;文档参考 &lt;a href=&#34;https://cn.vuejs.org/v2/guide/&#34;&gt;vue 介绍&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;路由配置&#34;&gt;路由配置&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;添加页面 xxx.vue 到 src/components/&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编辑 &lt;code&gt;src/router/index.js&lt;/code&gt; 配置 url&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 在开头引入模块
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;页面模块&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@/components/&amp;lt;你的vue组建&amp;gt;&amp;#34;&lt;/span&gt;
   
&lt;span style=&#34;color:#75715e&#34;&gt;// 在 routers 段落增加
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;   
{
&lt;span style=&#34;color:#a6e22e&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;/url路径&amp;gt;&amp;#34;&lt;/span&gt;,
&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;路由名称&amp;gt;&amp;#34;&lt;/span&gt;,
&lt;span style=&#34;color:#a6e22e&#34;&gt;components&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;模块&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;增加 router 链接到页面
这里 &lt;code&gt;src/App.vue&lt;/code&gt; 增加 root 和 自定义的 url&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-vue&#34; data-lang=&#34;vue&#34;&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;app&amp;#34;&lt;/span&gt;&amp;gt;
...
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;router&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-link&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;to&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Root&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;router&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-link&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;router&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-link&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;to&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/url路径&amp;#34;&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;路由名称&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;router&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-link&lt;/span&gt;&amp;gt;
...
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你的 vue 应用配置应该在页面已经更新了.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;搭建一个可访问的后端&#34;&gt;搭建一个可访问的后端&lt;/h2&gt;
&lt;p&gt;这里的步骤仅作快速导览, 具体操作疑问请参考官方文档或结合搜索引擎解决&lt;/p&gt;
&lt;h3 id=&#34;安装-python-开发环境&#34;&gt;安装 python 开发环境&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;推荐 python 3.7+&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装 pycharm (可选)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置 pip 使用国内源 (例如清华/阿里)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装 django&lt;/p&gt;
&lt;p&gt;直接安装使用 &lt;code&gt;pip install django -i https://pypi.mirrors.ustc.edu.cn/simple/&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;创建一个-django-项目&#34;&gt;创建一个 django 项目&lt;/h3&gt;
&lt;p&gt;使用 IDE 创建或者手动均可&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;项目工作目录&lt;/li&gt;
&lt;li&gt;虚拟环境&lt;/li&gt;
&lt;li&gt;项目模板语言 Django&lt;/li&gt;
&lt;li&gt;应用名称 &amp;lt;自定义即可&amp;gt;&lt;/li&gt;
&lt;li&gt;&amp;hellip; 其他配置步骤&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;启动-django-项目&#34;&gt;启动 django 项目&lt;/h3&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;
&lt;p&gt;执行迁移数据&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python manage.py migrate&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;配置 &lt;code&gt;settings.py&lt;/code&gt; 允许访问的主机&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ALLOWED_HOSTS = [&#39;*&#39;]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果 django 版本不是新版本, 记得在 &lt;code&gt;settings.py&lt;/code&gt; 手动注释  &lt;code&gt;MIDDLEWARE&lt;/code&gt; 中的&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&#39;django.middleware.csrf.CsrfResponseMiddleware&#39;,&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;语言: &lt;code&gt;zh-hans&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;时区: &lt;code&gt;Asia/Shanghai&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;运行 django 服务器&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python manage.py runserver&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;添加-url&#34;&gt;添加 url&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;项目 url 添加应用 url 的引用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置应用的 url&lt;/p&gt;
&lt;p&gt;编辑 &lt;code&gt;&amp;lt;项目目录&amp;gt;/&amp;lt;你的应用&amp;gt;/urls.py&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 以应用名为 mysite 为例&lt;/span&gt;

path(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;mysite/&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, include(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;mysite.urls&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;写一个测试-api&#34;&gt;写一个测试 api&lt;/h3&gt;
&lt;p&gt;配置 url 下的 &lt;code&gt;views&lt;/code&gt; 视图配置&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在 &lt;code&gt;&amp;lt;项目目录&amp;gt;/&amp;lt;应用&amp;gt;/views.py&lt;/code&gt; 中定义后续用到的 api&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 这里写一个叫 test_api 的视图&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; django.http &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; JsonResponse
   
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_api&lt;/span&gt;(request):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; JsonResponse({&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;status&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;message&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Hello, this is a response msg form django test api.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;})
    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;检查 web 服务 url 的页面返回内容&lt;/p&gt;
&lt;p&gt;格式是 &lt;code&gt;&amp;lt;服务地址&amp;gt;/url/&lt;/code&gt; 这里测试环境对应 &lt;code&gt; http://127.0.0.1:8000/mysite/&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;跨域请求配置&#34;&gt;跨域请求配置&lt;/h2&gt;
&lt;p&gt;在发起请求的处理上我们需要用到 &lt;code&gt;axios&lt;/code&gt; 库, 在 vue.js 2.0 也推荐使用 &lt;code&gt;axios&lt;/code&gt; 来完成 &lt;code&gt;ajax&lt;/code&gt; 请求&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;npm install axios --save
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;配置 &lt;code&gt;src/router/main.js&lt;/code&gt; 引入模块&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;axios&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;axios&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#a6e22e&#34;&gt;Vue&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;prototype&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;$axios&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;axios&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样就可以使用 &lt;code&gt;axios&lt;/code&gt; 来向 django 发起请求了, 把获取请求的动作放在 created 作用域, 我们的 vue 配置看起来是这样的&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;created&lt;/span&gt;() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;$axios&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://127.0.0.1:8000/mysite/&amp;#34;&lt;/span&gt;)
    	.&lt;span style=&#34;color:#a6e22e&#34;&gt;then&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;response&lt;/span&gt; =&amp;gt;{
    	&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;response&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;)
    });
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但这样并不会生效, 反而是在控制台我们会看到访问会被阻止的报错, 因为这样的访问是跨域的.&lt;/p&gt;
&lt;p&gt;所以我们还需要处理一下访问跨域的问题, 跨域访问的解决方法会有很多, 我们这里采用的是通过 webpack 配置 vue 的 proxyTable 来解, 在 &lt;code&gt;&amp;lt;项目目录&amp;gt;/config/index.js&lt;/code&gt; 中 ProxyTable 中的具体配置如下&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;module&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;exports&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
  &lt;span style=&#34;color:#a6e22e&#34;&gt;dev&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {

    &lt;span style=&#34;color:#75715e&#34;&gt;// Paths
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;assetsSubDirectory&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;static&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#a6e22e&#34;&gt;assetsPublicPath&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#a6e22e&#34;&gt;proxyTable&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/site&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
        &lt;span style=&#34;color:#75715e&#34;&gt;// 测试环境
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;target&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://127.0.0.1:8000/mysite/&amp;#39;&lt;/span&gt;,  &lt;span style=&#34;color:#75715e&#34;&gt;// 接口域名
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;changeOrigin&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;,  &lt;span style=&#34;color:#75715e&#34;&gt;//是否跨域
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;pathRewrite&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
          &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;^/site&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;//需要rewrite重写的,
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        }
      }
    },
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;配置完跨域配置, 我们也要调整一下 vue 的配置信息, 假设我们要绑定到 &lt;code&gt;django_message&lt;/code&gt; 这个变量名上, 例如&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-vue&#34; data-lang=&#34;vue&#34;&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;template&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;User&amp;#34;&lt;/span&gt;&amp;gt;
    {{ &lt;span style=&#34;color:#a6e22e&#34;&gt;django_message&lt;/span&gt; }}
  &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;template&lt;/span&gt;&amp;gt;

&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;&amp;gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt; {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;User&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;() {
          &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; {&lt;span style=&#34;color:#a6e22e&#34;&gt;django_message&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
          }
        },
        &lt;span style=&#34;color:#a6e22e&#34;&gt;created&lt;/span&gt;() {
          &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;$axios&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/site/&amp;#34;&lt;/span&gt;)
            .&lt;span style=&#34;color:#a6e22e&#34;&gt;then&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;response&lt;/span&gt; =&amp;gt;{
              &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;django_message&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;response&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt;
            })
        }
    }
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;&amp;gt;

&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;style&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;scoped&lt;/span&gt;&amp;gt;

&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;style&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此时如果一切配置无误, 那么我们请求数据就被拿到并且显示到页面上了, 我们也就有了一个可以上手开发环境了.&lt;/p&gt;
&lt;p&gt;后续 django 就可以:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建超级管理员&lt;/li&gt;
&lt;li&gt;模型与数据库交互&lt;/li&gt;
&lt;li&gt;为vue序列化json数据&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然后就可以进行应用的开发了.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>MarkDown 快速上手</title>
      <link>https://www.iterdaily.com/post/markdown-preview/</link>
      <pubDate>Tue, 01 Jan 2019 16:01:23 +0800</pubDate>
      
      <guid>https://www.iterdaily.com/post/markdown-preview/</guid>
      
        <description>&lt;p&gt;&lt;strong&gt;Markdown&lt;/strong&gt; 是由 &lt;a href=&#34;http://daringfireball.net/&#34;&gt;Daring Fireball&lt;/a&gt; 发明的, 原版的语法指导在 &lt;a href=&#34;http://daringfireball.net/projects/markdown/syntax&#34;&gt;这里&lt;/a&gt;. 不过其语法在不同的编辑器和实现中其实是有很多差异的.&lt;/p&gt;
&lt;p&gt;要了解一下 markdown 代码中的 HTML 标识可以被识别但是不被解析或再次渲染. 还有, markdown 代码在保存后会有一部分被重新格式化.&lt;/p&gt;
&lt;h2 id=&#34;段落与换行&#34;&gt;段落与换行&lt;/h2&gt;
&lt;p&gt;A paragraph is simply one or more consecutive lines of text. In markdown source code, paragraphs are separated by more than one blank lines. In Typora, you only need to press &lt;code&gt;Return&lt;/code&gt; to create a new paragraph.&lt;/p&gt;
&lt;p&gt;Press &lt;code&gt;Shift&lt;/code&gt; + &lt;code&gt;Return&lt;/code&gt; to create a single line break. However, most markdown parser will ignore single line break, to make other markdown parsers recognize your line break, you can leave two whitespace at the end of the line, or insert &lt;code&gt;&amp;lt;br/&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;标题&#34;&gt;标题&lt;/h2&gt;
&lt;p&gt;标题从 1-6 级有行首的识别符号, corresponding to header levels 1-6. For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;# 这是一级标题

&lt;span style=&#34;color:#75715e&#34;&gt;## 这是二级标题
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;###### 这是6级标题
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In typora, input ‘#’s followed by title content, and press &lt;code&gt;Return&lt;/code&gt; key will create a header.&lt;/p&gt;
&lt;h2 id=&#34;引用&#34;&gt;引用&lt;/h2&gt;
&lt;p&gt;Markdown uses email-style &amp;gt; characters for block quoting. They are presented as:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is a blockquote with two paragraphs. This is first paragraph.&lt;/p&gt;
&lt;p&gt;This is second pragraph.Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.&lt;/p&gt;
&lt;p&gt;This is another blockquote with one paragraph. There is three empty line to seperate two blockquote.&lt;/p&gt;
&lt;p&gt;这是一段中文测试。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In typora, just input ‘&amp;gt;’ followed by quote contents a block quote is  generated. Typora will insert proper ‘&amp;gt;’ or line break for you. Block quote inside anther block quote is allowed by adding additional levels of ‘&amp;gt;’.&lt;/p&gt;
&lt;h2 id=&#34;列表&#34;&gt;列表&lt;/h2&gt;
&lt;p&gt;Input &lt;code&gt;* list item 1&lt;/code&gt; will create an un-ordered list, the &lt;code&gt;*&lt;/code&gt; symbol can be replace with &lt;code&gt;+&lt;/code&gt; or &lt;code&gt;-&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Input &lt;code&gt;1. list item 1&lt;/code&gt; will create an ordered list, their markdown source code is like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Red&lt;/li&gt;
&lt;li&gt;Green&lt;/li&gt;
&lt;li&gt;Blue&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;Red&lt;/li&gt;
&lt;li&gt;Green&lt;/li&gt;
&lt;li&gt;Blue&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;任务清单&#34;&gt;任务清单&lt;/h2&gt;
&lt;p&gt;Task lists are lists with items marked as either &lt;code&gt;[ ]&lt;/code&gt; or &lt;code&gt;[x]&lt;/code&gt; (incomplete or complete). For example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt;a task list item&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt;list syntax required&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt;normal &lt;strong&gt;formatting&lt;/strong&gt;, @mentions, #1234 refs&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt;incomplete&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt;completed&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can change the complete/incomplete state by click the checkbox before the item.&lt;/p&gt;
&lt;h2 id=&#34;语法高亮&#34;&gt;语法高亮&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;helloWorld&lt;/span&gt; () {
  &lt;span style=&#34;color:#a6e22e&#34;&gt;alert&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello, World!&amp;#34;&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;HelloWorld&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello, World!&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;数学代码块&#34;&gt;数学代码块&lt;/h2&gt;
&lt;p&gt;You can render &lt;em&gt;LaTeX&lt;/em&gt; mathematical expressions using &lt;strong&gt;MathJax&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Input &lt;code&gt;$$&lt;/code&gt;, then press &amp;lsquo;Return&amp;rsquo; key will trigger an input field which accept &lt;em&gt;Tex/LaTex&lt;/em&gt; source. Following is an example:
$$
\mathbf{V}_1 \times \mathbf{V}_2 =  \begin{vmatrix}
\mathbf{i} &amp;amp; \mathbf{j} &amp;amp; \mathbf{k} \&lt;br&gt;
\frac{\partial X}{\partial u} &amp;amp;  \frac{\partial Y}{\partial u} &amp;amp; 0 \&lt;br&gt;
\frac{\partial X}{\partial v} &amp;amp;  \frac{\partial Y}{\partial v} &amp;amp; 0 \&lt;br&gt;
\end{vmatrix}
$$&lt;/p&gt;
&lt;p&gt;In markdown source file, math block is &lt;em&gt;LaTeX&lt;/em&gt; expression wrapped by ‘$$’ mark:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;$$
\mathbf{V}_1 \times \mathbf{V}_2 =  \begin{vmatrix}
\mathbf{i} &amp;amp; \mathbf{j} &amp;amp; \mathbf{k} \\
\frac{\partial X}{\partial u} &amp;amp;  \frac{\partial Y}{\partial u} &amp;amp; 0 \\
\frac{\partial X}{\partial v} &amp;amp;  \frac{\partial Y}{\partial v} &amp;amp; 0 \\
\end{vmatrix}
$$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;表格&#34;&gt;表格&lt;/h2&gt;
&lt;p&gt;Input &lt;code&gt;| First Header  | Second Header |&lt;/code&gt; and press &lt;code&gt;return&lt;/code&gt; key will create a table with two column.&lt;/p&gt;
&lt;p&gt;After table is created, focus on that table will pop up a toolbar for table, where you can resize, align, or delete table. You can also use context menu to copy and add/delete column/row.&lt;/p&gt;
&lt;p&gt;Following descriptions can be skipped, as markdown source code for tables are generated by typora automatically.&lt;/p&gt;
&lt;p&gt;In markdown source code, they look like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;| Name              | Markdown            | HTML tag             |
| ----------------- | ------------------- | -------------------- |
| &lt;span style=&#34;font-style:italic&#34;&gt;*Emphasis*&lt;/span&gt;        | &lt;span style=&#34;color:#e6db74&#34;&gt;`*Emphasis*`&lt;/span&gt;        | &lt;span style=&#34;color:#e6db74&#34;&gt;`&amp;lt;em&amp;gt;&amp;lt;/em&amp;gt;`&lt;/span&gt;          |
| &lt;span style=&#34;font-weight:bold&#34;&gt;**Strong&lt;/span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;**&lt;/span&gt;        | &lt;span style=&#34;color:#e6db74&#34;&gt;`**Strong**`&lt;/span&gt;        | &lt;span style=&#34;color:#e6db74&#34;&gt;`&amp;lt;strong&amp;gt;&amp;lt;/strong&amp;gt;`&lt;/span&gt; |
| &lt;span style=&#34;color:#e6db74&#34;&gt;`code`&lt;/span&gt;            | ``code``            | &lt;span style=&#34;color:#e6db74&#34;&gt;`&amp;lt;code&amp;gt;&amp;lt;/code&amp;gt;`&lt;/span&gt;      |
| &lt;span style=&#34;color:#f92672&#34;&gt;~~Strikethrough~~&lt;/span&gt; | &lt;span style=&#34;color:#e6db74&#34;&gt;`~~Strikethrough~~`&lt;/span&gt; | &lt;span style=&#34;color:#e6db74&#34;&gt;`&amp;lt;del&amp;gt;&amp;lt;/del`&lt;/span&gt;         |
| &amp;lt;u&amp;gt;Underline&amp;lt;/u&amp;gt;  | &lt;span style=&#34;color:#e6db74&#34;&gt;`&amp;lt;u&amp;gt;underline&amp;lt;/u&amp;gt;`&lt;/span&gt;  | &lt;span style=&#34;color:#e6db74&#34;&gt;`&amp;lt;u&amp;gt;&amp;lt;/u&amp;gt;`&lt;/span&gt;            |
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Markdown&lt;/th&gt;
&lt;th&gt;HTML tag&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;Emphasis&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;*Emphasis*&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;em&amp;gt;&amp;lt;/em&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Strong&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;**Strong**&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt; &amp;lt;strong&amp;gt;&amp;lt;/strong&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;code&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;`code`&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;/code&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;del&gt;Strikethrough&lt;/del&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;~~Strikethrough~~&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;del&amp;gt;&amp;lt;/del&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;!-- raw HTML omitted --&gt;Underline&lt;!-- raw HTML omitted --&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;u&amp;gt;underline&amp;lt;/u&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;u&amp;gt;&amp;lt;/u&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;脚注&#34;&gt;脚注&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;You can create footnotes like this[^footnote].

[^footnote]: Here is the &lt;span style=&#34;font-style:italic&#34;&gt;*text*&lt;/span&gt; of the &lt;span style=&#34;font-weight:bold&#34;&gt;**footnote&lt;/span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;**&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;will produce:&lt;/p&gt;
&lt;p&gt;You can create footnotes like this&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Mouse on the ‘footnote’ superscript to see content of the footnote.&lt;/p&gt;
&lt;h2 id=&#34;水平分割线&#34;&gt;水平分割线&lt;/h2&gt;
&lt;p&gt;Input &lt;code&gt;***&lt;/code&gt; or &lt;code&gt;---&lt;/code&gt; on a blank line and press &lt;code&gt;return&lt;/code&gt; will draw a horizontal line.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;链接&#34;&gt;链接&lt;/h2&gt;
&lt;p&gt;Markdown supports two style of links: inline and reference.&lt;/p&gt;
&lt;p&gt;In both styles, the link text is delimited by [square brackets].&lt;/p&gt;
&lt;p&gt;To create an inline link, use a set of regular parentheses immediately after the link text’s closing square bracket. Inside the parentheses, put the URL where you want the link to point, along with an optional title for the link, surrounded in quotes. For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;This is [&lt;span style=&#34;color:#f92672&#34;&gt;an example&lt;/span&gt;](&lt;span style=&#34;color:#a6e22e&#34;&gt;http://example.com/ &amp;#34;Title&amp;#34;&lt;/span&gt;) inline link.

[&lt;span style=&#34;color:#f92672&#34;&gt;This link&lt;/span&gt;](&lt;span style=&#34;color:#a6e22e&#34;&gt;http://example.net/&lt;/span&gt;) has no title attribute.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;will produce:&lt;/p&gt;
&lt;p&gt;This is &lt;a href=&#34;http://example.com/%22Title%22&#34;&gt;an example&lt;/a&gt; inline link. (&lt;code&gt;&amp;lt;p&amp;gt;This is &amp;lt;a href=&amp;quot;http://example.com/&amp;quot; title=&amp;quot;Title&amp;quot;&amp;gt;&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://example.net/&#34;&gt;This link&lt;/a&gt; has no title attribute. (&lt;code&gt;&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://example.net/&amp;quot;&amp;gt;This link&amp;lt;/a&amp;gt; has no&lt;/code&gt;)&lt;/p&gt;
&lt;h3 id=&#34;内部链接&#34;&gt;内部链接&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;You can set the href to headers&lt;/strong&gt;, which will create a bookmark that allow you to jump to that section after clicking. For example:&lt;/p&gt;
&lt;p&gt;Command(on Windows: Ctrl) + Click &lt;a href=&#34;#block-elements&#34;&gt;This link&lt;/a&gt; will jump to header &lt;code&gt;Block Elements&lt;/code&gt;. To see how to write that, please move cursor or click that link with &lt;code&gt;⌘&lt;/code&gt; key pressed to expand the element into markdown source.&lt;/p&gt;
&lt;h3 id=&#34;引用链接&#34;&gt;引用链接&lt;/h3&gt;
&lt;p&gt;Reference-style links use a second set of square brackets, inside which you place a label of your choosing to identify the link:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;This is [an example][id] reference-style link.

Then, anywhere in the document, you define your link label like this, on a line by itself:

[id]: http://example.com/  &amp;#34;Optional Title Here&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In typora, they will be rendered like:&lt;/p&gt;
&lt;p&gt;This is &lt;a href=&#34;http://example.com/&#34; title=&#34;Optional Title Here&#34;&gt;an example&lt;/a&gt; reference-style link.&lt;/p&gt;
&lt;p&gt;The implicit link name shortcut allows you to omit the name of the link, in which case the link text itself is used as the name. Just use an empty set of square brackets — e.g., to link the word “Google” to the google.com web site, you could simply write:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;[Google][]
And then define the link:

[Google]: http://google.com/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In typora click link will expand it for editing, command+click will open the hyperlink in web browser.&lt;/p&gt;
&lt;h2 id=&#34;urls&#34;&gt;URLs&lt;/h2&gt;
&lt;p&gt;Typora allows you to insert urls as links, wrapped by &lt;code&gt;&amp;lt;&lt;/code&gt;brackets&lt;code&gt;&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;i@typora.io&amp;gt;&lt;/code&gt; becomes &lt;a href=&#34;mailto:i@typora.io&#34;&gt;i@typora.io&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Typora will aslo auto link standard URLs. e.g: &lt;a href=&#34;http://www.google.com&#34;&gt;www.google.com&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;图片&#34;&gt;图片&lt;/h2&gt;
&lt;p&gt;Image looks similar with links, but it requires an additional &lt;code&gt;!&lt;/code&gt; char before the start of link. Image syntax looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;![&lt;span style=&#34;color:#f92672&#34;&gt;Alt text&lt;/span&gt;](&lt;span style=&#34;color:#a6e22e&#34;&gt;/path/to/img.jpg&lt;/span&gt;)

![&lt;span style=&#34;color:#f92672&#34;&gt;Alt text&lt;/span&gt;](&lt;span style=&#34;color:#a6e22e&#34;&gt;/path/to/img.jpg &amp;#34;Optional title&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You are able to use drag &amp;amp; drop to insert image from image file or we browser. And modify the markdown source code by clicking on the image. Relative path will be used if image is in same directory or sub-directory with current editing document when drag &amp;amp; drop.&lt;/p&gt;
&lt;p&gt;For more tips on images, please read &lt;a href=&#34;http://support.typora.io//Images/&#34;&gt;http://support.typora.io//Images/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;斜体&#34;&gt;斜体&lt;/h2&gt;
&lt;p&gt;Markdown treats asterisks (&lt;code&gt;*&lt;/code&gt;) and underscores (&lt;code&gt;_&lt;/code&gt;) as indicators of emphasis. Text wrapped with one &lt;code&gt;*&lt;/code&gt; or &lt;code&gt;_&lt;/code&gt; will be wrapped with an HTML &lt;code&gt;&amp;lt;em&amp;gt;&lt;/code&gt; tag. E.g:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;*single asterisks*

&lt;span style=&#34;font-style:italic&#34;&gt;_single underscores_&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;output:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;single asterisks&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;single underscores&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;GFM will ignores underscores in words, which is commonly used in code and names, like this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;wow_great_stuff&lt;/p&gt;
&lt;p&gt;do_this_and_do_that_and_another_thing.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To produce a literal asterisk or underscore at a position where it would otherwise be used as an emphasis delimiter, you can backslash escape it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;\*this text is surrounded by literal asterisks\*
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Typora recommends to use &lt;code&gt;*&lt;/code&gt; symbol.&lt;/p&gt;
&lt;h2 id=&#34;加粗&#34;&gt;加粗&lt;/h2&gt;
&lt;p&gt;double *’s or _’s will be wrapped with an HTML &lt;code&gt;&amp;lt;strong&amp;gt;&lt;/code&gt; tag, e.g:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;**double asterisks**

&lt;span style=&#34;font-weight:bold&#34;&gt;__double underscores&lt;/span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;__&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;output:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;double asterisks&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;double underscores&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Typora recommends to use &lt;code&gt;**&lt;/code&gt; symbol.&lt;/p&gt;
&lt;h2 id=&#34;行内代码&#34;&gt;行内代码&lt;/h2&gt;
&lt;p&gt;To indicate a span of code, wrap it with backtick quotes (`). Unlike a pre-formatted code block, a code span indicates code within a normal paragraph. For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;Use the &lt;span style=&#34;color:#e6db74&#34;&gt;`printf()`&lt;/span&gt; function.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;will produce:&lt;/p&gt;
&lt;p&gt;Use the &lt;code&gt;printf()&lt;/code&gt; function.&lt;/p&gt;
&lt;h2 id=&#34;删除线&#34;&gt;删除线&lt;/h2&gt;
&lt;p&gt;GFM adds syntax to create strikethrough text, which is missing from standard Markdown.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;~~Mistaken text.~~&lt;/code&gt; becomes &lt;del&gt;Mistaken text.&lt;/del&gt;&lt;/p&gt;
&lt;h2 id=&#34;下划线&#34;&gt;下划线&lt;/h2&gt;
&lt;p&gt;Underline is powered by raw HTML.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;u&amp;gt;Underline&amp;lt;/u&amp;gt;&lt;/code&gt; becomes &lt;!-- raw HTML omitted --&gt;Underline&lt;!-- raw HTML omitted --&gt;.&lt;/p&gt;
&lt;h2 id=&#34;emoji表情-happy&#34;&gt;Emoji表情 :happy:&lt;/h2&gt;
&lt;p&gt;Input emoji with syntax &lt;code&gt;😄&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;User can trigger auto-complete suggestions for emoji by pressing &lt;code&gt;ESC&lt;/code&gt; key, or trigger it automatically after enable it on preference panel. Also, input UTF8 emoji char directly from &lt;code&gt;Edit&lt;/code&gt; -&amp;gt; &lt;code&gt;Emoji &amp;amp; Symbols&lt;/code&gt; from menu bar is also supported.&lt;/p&gt;
&lt;h2 id=&#34;行内数学公式&#34;&gt;行内数学公式&lt;/h2&gt;
&lt;p&gt;To use this feature, first, please enable it in &lt;code&gt;Preference&lt;/code&gt; Panel -&amp;gt; &lt;code&gt;Markdown&lt;/code&gt; Tab. Then use &lt;code&gt;$&lt;/code&gt; to wrap TeX command, for example: &lt;code&gt;$\lim_{x \to \infty} \exp(-x) = 0$&lt;/code&gt; will be rendered as LaTeX command.&lt;/p&gt;
&lt;p&gt;To trigger inline preview for inline math: input “$”, then press &lt;code&gt;ESC&lt;/code&gt; key, then input TeX command, a preview tooltip will be visible like below:&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Hugo-theme-jane optimized for footnote. When you mouse hover the footnote&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; , footnote content will be displayed.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;footnote-1&#34;&gt;Footnote-1&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;You can create footnotes like this[^footnote].

[^footnote]: Here is the &lt;span style=&#34;font-style:italic&#34;&gt;*text*&lt;/span&gt; of the &lt;span style=&#34;font-weight:bold&#34;&gt;**footnote&lt;/span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;**&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;will produce:&lt;/p&gt;
&lt;p&gt;You can create footnotes like this&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Mouse on the ‘footnote’ superscript to see content of the footnote.&lt;/p&gt;
&lt;h2 id=&#34;footnote-2&#34;&gt;Footnote-2&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;You can create footnotes like this[^footnote2].

[^footnote2]: Here is the &lt;span style=&#34;font-style:italic&#34;&gt;*text*&lt;/span&gt; of the &lt;span style=&#34;font-weight:bold&#34;&gt;**footnote&lt;/span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;**&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;will produce:&lt;/p&gt;
&lt;p&gt;You can create footnotes like this&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Mouse on the ‘footnote’ superscript to see content of the footnote.&lt;/p&gt;
&lt;h2 id=&#34;footnote-3&#34;&gt;Footnote-3&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;You can create footnotes like this[^footnote].

[^footnote]: Here is the &lt;span style=&#34;font-style:italic&#34;&gt;*text*&lt;/span&gt; of the &lt;span style=&#34;font-weight:bold&#34;&gt;**footnote&lt;/span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;**&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;will produce:&lt;/p&gt;
&lt;p&gt;You can create footnotes like this&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Mouse on the ‘footnote’ superscript to see content of the footnote.&lt;/p&gt;
&lt;h2 id=&#34;footnote-4&#34;&gt;Footnote-4&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;You can create footnotes like this[^footnote].

[^footnote]: Here is the &lt;span style=&#34;font-style:italic&#34;&gt;*text*&lt;/span&gt; of the &lt;span style=&#34;font-weight:bold&#34;&gt;**footnote&lt;/span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;**&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;will produce:&lt;/p&gt;
&lt;p&gt;You can create footnotes like this&lt;sup id=&#34;fnref:5&#34;&gt;&lt;a href=&#34;#fn:5&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Mouse on the ‘footnote’ superscript to see content of the footnote.&lt;/p&gt;
&lt;h2 id=&#34;footnote-5&#34;&gt;Footnote-5&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;You can create footnotes like this[^footnote].

[^footnote]: Here is the &lt;span style=&#34;font-style:italic&#34;&gt;*text*&lt;/span&gt; of the &lt;span style=&#34;font-weight:bold&#34;&gt;**footnote&lt;/span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;**&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;will produce dddddddddddddddddddddddddddddddddddddddddddddd:&lt;/p&gt;
&lt;p&gt;You can create footnotes like this&lt;sup id=&#34;fnref:6&#34;&gt;&lt;a href=&#34;#fn:6&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;6&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Mouse on the ‘footnote’ superscript to see content of the footnote.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Here is the &lt;em&gt;text&lt;/em&gt; of the &lt;strong&gt;footnote&lt;/strong&gt;. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;example footnote show. &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Here is the &lt;em&gt;text&lt;/em&gt; of the &lt;strong&gt;footnote-1&lt;/strong&gt;. &lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Here is the &lt;em&gt;text&lt;/em&gt; of the &lt;strong&gt;footnote-3&lt;/strong&gt;. &lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:5&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Here is the &lt;em&gt;text&lt;/em&gt; of the &lt;strong&gt;footnote-4&lt;/strong&gt;. &lt;a href=&#34;#fnref:5&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:6&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Here is the &lt;em&gt;text&lt;/em&gt; of the &lt;strong&gt;footnote-5&lt;/strong&gt;. &lt;a href=&#34;#fnref:6&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;</description>
      
    </item>
    
    <item>
      <title>作者</title>
      <link>https://www.iterdaily.com/about/</link>
      <pubDate>Sun, 20 Aug 2017 21:38:52 +0800</pubDate>
      
      <guid>https://www.iterdaily.com/about/</guid>
      
        <description>&lt;p&gt;William Mei 梅炜&lt;/p&gt;
&lt;p&gt;首先是一个 IT 工程师, 还是一个开源爱好者, 因为出于爱好才开始了解 IT 行业知识, 然后慢慢也就走上了现在的职业道路, 我喜欢开源, 在信息技术领域知识共享, 保持一定的开放协作才会形成更加和谐的氛围.&lt;/p&gt;
&lt;p&gt;为什么要写博客呢, 主要作用就是做笔记和总结吧, 身处 IT 行业知识更新是很快的, 技术总是在不停的迭代新技术一直在不断涌现, 某些技术昨天还是潮流新宠, 过了一两年迅速就变成了昨日黄花甚至很快就被淘汰了. IT 行业对新技术有着无限的需求, 新技术来了要保持跟进, 就要学习新技术, 了解新趋势, 去更新自己的知识体系, 整个行业也都人每时每刻都在学习, 而写博客可以通过内容输出倒逼自己将知识梳理清楚帮助自己学习, 所以也要开始写博客了. 怎么说呢, 写写东西不一定非要长篇大论才能算是产出, 主要还是要有梳理和思考, 要保持专注不能过于零散, 适当按方向和系列有计划的坚持学习下去, 数量只是长时间积累的最终结果, 这里的关键还是不能放弃思考.&lt;/p&gt;
&lt;p&gt;其实不仅仅是工作中的技术, 生活也是需要多积累一点反思的. 生活总是平淡的, 不曾观察和发现细节就会让生活的体验变得模糊, 结果就是经历过的事情都会开始淡忘和无感, 个人经历只有重复而没有形成积累推动对后续增长和发展, 现在信息获取很容易, 但是真正的知识是需要总结的, 很多时候自己以为自己明白了的不去产生输出去检验自己总是会有不够确定不够踏实的感觉, 嗯, 所以为了消灭这部分不确定性还是开始写写吧.&lt;/p&gt;
&lt;p&gt;下面是我给自己准备的一些有用的站点列表&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.iterdaily.com&#34;&gt;我的个人博客&lt;/a&gt; *主要是技术学习和个人总结的内容&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://git.iterdaily.com&#34;&gt;我的 gitlab 站点&lt;/a&gt; 自用的版本管理仓库&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jenkins.iterdaily.com&#34;&gt;一个 Jenkins 服务器&lt;/a&gt; 一些文档的自动化流水线在上面&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kanban.iterdaily.com&#34;&gt;我的看板站点&lt;/a&gt; &lt;em&gt;个人看板, 用的 wekan (trello因网络原因体验略差)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.iterdaily.com&#34;&gt;文档托管站点&lt;/a&gt; &lt;em&gt;存放整理好的技术手册, 方便以后查阅&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;文档托管暂时还没更新索引页面, 暂时放了一份 &lt;a href=&#34;https://docs.iterdaily.com/npyscreen_doc_zh/index.html&#34;&gt;npyscreen中文文档&lt;/a&gt; 后续会慢慢更新索引和用到的其他手册.&lt;/p&gt;
&lt;p&gt;还有个 &lt;a href=&#34;https://www.musicgeek.club&#34;&gt;博客&lt;/a&gt; &lt;em&gt;画风不太搭&lt;/em&gt; , 所以就另外搞了一个域名, 哈哈.&lt;/p&gt;
&lt;p&gt;当然建设这些站点也不是必须的, 博客的话 GitHub Pages / CSDN / cnblog 也都可以, 而 Git 的话国内也有挺多网站有挺不错的托管服务, 自己搭建这些站点一方面是现在的网站建设的确已经太容易了, 另一方面原因是之前就已经出于尝试的心态买了一台云主机和域名, 不想浪费已有的材料所以就用上了.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Jenkins 流水线书写规范建议</title>
      <link>https://www.iterdaily.com/post/jenkins-pipline-script-flavor/</link>
      <pubDate>Fri, 14 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.iterdaily.com/post/jenkins-pipline-script-flavor/</guid>
      
        <description>&lt;h1 id=&#34;jenkins-流水线书写规范&#34;&gt;Jenkins 流水线书写规范&lt;/h1&gt;
&lt;p&gt;Jenkins 流水线本身编码可以在 Jenkins 框架本身定义的 DSL内进行, 但不管是 &lt;code&gt;声明式&lt;/code&gt; 还是 &lt;code&gt;脚本式&lt;/code&gt; 流水线仅仅依靠 jenkins 提供的语法只能搭建起一个基本的运行框架, 能力十分有限, 具体的每个流水线步骤大多还是使用脚本进行的, 虽然 Jenkins 也可用 groovy 完成复杂逻辑处理, 但是我们建议原则上仅仅使用 jenkins 进行 &lt;code&gt;流程控制&lt;/code&gt; 和 &lt;code&gt;数据传递&lt;/code&gt; , 把它当做一个将数据与代码逻辑分离的粘合框架, 避免将流水线代码写的过于冗长繁复, 通过调用 python 以及 shell 等脚本可以解决的, 尽量使用独立的模块或者外部的公共服务来进行, 语法上针对 Jenkins 流水线脚本的书写, 在遵循 groovy 语法的标准的基础上, 我们给出以下建议:&lt;/p&gt;
&lt;h2 id=&#34;命名&#34;&gt;命名&lt;/h2&gt;
&lt;h4 id=&#34;文件名&#34;&gt;文件名&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;请避免将无意义或者不带 &lt;code&gt;Jenkinsfile&lt;/code&gt; 标识的名称作为流水线文件名.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对于独立的 Jenkins 流水线脚本命名, 无特殊情况下应尽量使用 &lt;code&gt;Jenkinsfile&lt;/code&gt; 为文件名.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果需要多个流水线并存的情况推荐使用 &lt;code&gt;Jenkinsfile_&amp;lt;流水线名称&amp;gt;&lt;/code&gt; 为文件名.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;文件名中, 名称统一使用小写英文单词加下划线方式命名, 除流水线文件外尽量不要省略后缀.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;流水线模块请尽量使用 &lt;code&gt;模块用途&lt;/code&gt; + &lt;code&gt;模块语言标准后缀&lt;/code&gt; 的方式命名, 如&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;groovy 模块扩展: common.groovy&lt;/li&gt;
&lt;li&gt;shell 模块扩展: pip_build.sh&lt;/li&gt;
&lt;li&gt;python 模块扩展: merge_yml.py&lt;/li&gt;
&lt;li&gt;以此类推&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;变量命名&#34;&gt;变量命名&lt;/h4&gt;
&lt;p&gt;准确简洁的变量名是可读性的重要保障, 针对脚本的变量名应当至少遵循以下规范:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;变量名必须有实际含义, 避免英文数字下划线以外的特殊字符.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;避免变量名过短(数据或对象内容复杂而变量名无法推断其含义)与过长(变量名接近甚至超过半行造成视觉阅读困难).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;变量名尽量避开 groovy 语言自身关键字, 避开环境变量.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;统一使用一种命名规则, 如小驼峰命名法.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自定义环境变量命名尽量采用大写与下划线单词命名&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;无特殊需求, 请避免修改流水线默认生成的环境变量.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在固定的拼接处理中, 应尽量减少定义语句使用的嵌套层数&lt;/p&gt;
&lt;p&gt;例如&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 套娃式定义
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; pathA &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;path1&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; paraZ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;${pathA}/path2&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; paraB &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;${pathZ}/path3&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; paraY &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;${pathB}/path4&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; paraX &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;${pathY}/path5&amp;#34;&lt;/span&gt;
    
&lt;span style=&#34;color:#75715e&#34;&gt;// 展开嵌套, 具有更好的可读性
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; paraX &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;path1/path2/path3/path4/path5&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;stage与标签命名&#34;&gt;stage与标签命名&lt;/h4&gt;
&lt;p&gt;流水线的任务和标签, 遵循使用注释性的语言进行命名, 可以使用中文语句作为名称, 建议在 stage 和步骤标签中, 根据动作的对象和流程差异使用合适的变量生成更细致的显示名称.&lt;/p&gt;
&lt;h2 id=&#34;注释格式&#34;&gt;注释格式&lt;/h2&gt;
&lt;p&gt;流水线注释是不限制中英文使用和长度的, 但应当尽量保持逻辑条理清晰简洁, 注释主要目的在于提高代码的可读性, 因此注释要让其他团队成员可以理解你的代码意图, 另外,清晰条理的代码本身可以省去很多不必要的注解.&lt;/p&gt;
&lt;h4 id=&#34;单行注释&#34;&gt;单行注释&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// this is a single line comment
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;do_something  &lt;span style=&#34;color:#75715e&#34;&gt;// 单行注释示例
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当注释长度小于半行长度, 可以用单行注释插入到代码的行尾或者单独一行.&lt;/p&gt;
&lt;p&gt;当注释长度大于3行请考虑使用多行注释.&lt;/p&gt;
&lt;h4 id=&#34;多行注释&#34;&gt;多行注释&lt;/h4&gt;
&lt;p&gt;针对一整段函数逻辑, 或者一个复杂脚本的调用接口, 我们通常需要完整的一段文本进行关键信息的标注和解释, 这时应采用多行注释.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* a standalone multiline comment
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;comment
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;comment
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;comment
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;end of comment or statment */&lt;/span&gt;
do_something
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;文档注释&#34;&gt;文档注释&lt;/h4&gt;
&lt;p&gt;使用 groovy 编写自定义流水线模块时, groovy 同其他语言一样也支持代码的文档注释, 为了保持其可读性, 模块文档应当至少包含对自身基本逻辑, 数据处理流程, 关键函数结构, 关键变量等内容的注解, 并且尽量遵照 groovy 语法规范.&lt;/p&gt;
&lt;p&gt;文档注释也是一种多行注释, 并且允许使用与java文档同样的标签.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * A Class description
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Person&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;/** the name of the person */&lt;/span&gt;
  String name 

  &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   * Creates a greeting method for a certain person.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   * @param otherPerson the person to greet
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   * @return a greeting message
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   */&lt;/span&gt;
  String &lt;span style=&#34;color:#a6e22e&#34;&gt;greet&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String otherPerson&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello ${otherPerson}&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用中应当根据代码内容复杂度添加合适注解内容, 如,注释特殊或者变量时应当尽量给出内容示例, 注释函数时应标注函数的用途, 输入参数, 参数类型, 输出类型等.&lt;/p&gt;
&lt;h2 id=&#34;credentials与密码配置&#34;&gt;credentials与密码配置&lt;/h2&gt;
&lt;p&gt;在流水线中应当尽量减少明文明文密码的使用, 关键登录信息建议使用 &lt;code&gt;Credentials Plugin&lt;/code&gt; 插件,&lt;/p&gt;
&lt;p&gt;可以登录 &lt;code&gt;http://&amp;lt;服务器地址&amp;gt;/credentials/store/system/domain/_/newCredentials&lt;/code&gt; , 或者&lt;/p&gt;
&lt;p&gt;从菜单进入, Jenkins -&amp;gt; Credentials -&amp;gt; Stores scoped to Jenkins 在下拉菜单中选择添加, 填充以下信息&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Kind: Username with password
Scope: Global
Username: root
Password: !QAZ2wsx
ID: default_user_for_test
Description: default password for test
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;凭据在 pipline 的引用示例&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;    steps&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        withCredentials&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;usernamePassword&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;credentialsId: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;default_user_for_test&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; passwordVariable: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;password&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; usernameVariable: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;username&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        sh &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sshpass -p $password ssh $username@192.168.1.1 &amp;#34;lsblk&amp;#34;&amp;#39;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样可以更好的保护关键登录信息的安全性, 也保证了代码的规范性.&lt;/p&gt;
&lt;h2 id=&#34;执行环境依赖&#34;&gt;执行环境依赖&lt;/h2&gt;
&lt;p&gt;流水线任务中通常都会带有任务自身的环境依赖条件, 这些依赖也应当作为流水线的一部分被记录和维护, 从而保证流水线的正常运行.&lt;/p&gt;
&lt;h4 id=&#34;容器依赖&#34;&gt;容器依赖&lt;/h4&gt;
&lt;p&gt;如果流水线执行所依赖的容器环境为公用软件源上拉取的镜像需要指明所依赖的镜像和具体的版本号, 如 &lt;code&gt;centos:centos7&lt;/code&gt; , 最好不要忽略镜像所使用的标签, 因为不标注标签的情况下等同于使用 &lt;code&gt;latest&lt;/code&gt; , 而 &lt;code&gt;latest&lt;/code&gt; 标签所指向的镜像可能会发生更新和变动.  若依赖的进行为私有镜像, 建议将私有镜像的原始构建文件包含在流水线项目中.&lt;/p&gt;
&lt;h4 id=&#34;节点软件包依赖&#34;&gt;节点软件包依赖&lt;/h4&gt;
&lt;p&gt;针对构建节点的软件包依赖, 需要根据依赖的类型, 来源和对应的安装方式在流水线项目中给出可复刻的环境配置脚本或者说明文档, 并且软件包的来源如果存在可能失效的情况则必须针对依赖的软件包进行离线源备份并记录使用文档.&lt;/p&gt;
&lt;h2 id=&#34;输出配置&#34;&gt;输出配置&lt;/h2&gt;
&lt;p&gt;一份流水线的输出包含了执行过程的日志信息输出和最终的制品输出等, 是一个流水线的执行状态和结果检查的依据, Jenkins 自身对于输出内容的管理能力相对有限, 因此不可避免的需要流水线编写的过程中对输出内容编写单独的处理逻辑.&lt;/p&gt;
&lt;h4 id=&#34;制品输出&#34;&gt;制品输出&lt;/h4&gt;
&lt;p&gt;独立的制品管理服务通常会有更好的仓库维护(如,docker仓库), 文件分类, 角色权限控制, 更好的备份恢复, 更好的访问界面与接口, 如支持REST API等.&lt;/p&gt;
&lt;p&gt;如果流水线的制品输出较少, 对存储空间要求较低的情况下, 可以将制品输出统一交给 Jenkins 服务器进行处理, 例如, 在流水线中使用 &lt;code&gt;archiveArtifacts &lt;/code&gt; 关键字声明制品文件, 然后直接从流水线页面获取制品链接即可.&lt;/p&gt;
&lt;p&gt;如果制品较多的情况, 则通常都需要为流水线对接专门的制品管理服务, 不论使用哪一种制品管理软件或者服务, 都应当在流水线项目中给出详细的制品管理规范和使用文档, 如存放的位置, 制品命名规范, 推送更新方式, 获取方式, 用户权限要求等等, 以保证在后续的维护和流水线制品管理中保持制品处理方式的始终统一.&lt;/p&gt;
&lt;h4 id=&#34;日志输出&#34;&gt;日志输出&lt;/h4&gt;
&lt;p&gt;对于日志和关键信息输出, 请尽量带有可识别的日志级别标示, 非关键内容则允许过滤处理或者重定向到其他临时输出.&lt;/p&gt;
&lt;p&gt;日志级别参考:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;DEBUG  指出细粒度信息事件对调试应用程序是非常有帮助的, 主要用于开发过程中打印一些运行信息.&lt;/li&gt;
&lt;li&gt;INFO  消息在粗粒度级别上突出强调应用程序的运行过程. 打印一些你感兴趣的或者重要的信息, 这个可以用于生产环境中输出程序运行的一些重要信息, 但是不能滥用, 避免打印过多的日志.&lt;/li&gt;
&lt;li&gt;WARN  表明会出现潜在错误的情形, 有些信息不是错误信息, 但是也要给程序员的一些提示.&lt;/li&gt;
&lt;li&gt;ERROR  指出虽然发生错误事件, 但仍然不影响系统的继续运行. 打印错误和异常信息, 如果不想输出太多的日志, 可以使用这个级别.&lt;/li&gt;
&lt;li&gt;FATAL  指出每个严重的错误事件将会导致应用程序的退出. 这个级别比较高了. 重大错误, 这种级别你可以直接停止程序了.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;groovy代码块&#34;&gt;groovy代码块&lt;/h2&gt;
&lt;p&gt;groovy 可以省略行尾的分号, 省略它们可以让代码更加简洁.&lt;/p&gt;
&lt;p&gt;代码缩进没有硬性要求但是建议使用 4个空格, 避免使用 &lt;code&gt;tab&lt;/code&gt; 以免在部分编辑器和终端中存在缩进显示混乱的状况.&lt;/p&gt;
&lt;p&gt;当流水线中的某一函数行数超过 50 行请考虑将该函数拆分成独立模块的一部分, 以保持流水线的简洁性.&lt;/p&gt;
&lt;h4 id=&#34;值和对象的比较&#34;&gt;值和对象的比较&lt;/h4&gt;
&lt;p&gt;groovy 中如果需要进行值的比较, 可以使用双等于 &lt;code&gt;==&lt;/code&gt; 判别符号, 它等同于 equals() 方法.&lt;/p&gt;
&lt;p&gt;如果需要比较对象引用, 请使用 &lt;code&gt;is()&lt;/code&gt; 方法, 而不是 &lt;code&gt;==&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;模块-shebang&#34;&gt;模块 shebang&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env groovy&lt;/span&gt;
println &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello shebang&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;类Unix环境下使用时, 建议为 groovy 模块应添加自身的 shebang 信息, 以调试运行和后续维护.&lt;/p&gt;
&lt;h4 id=&#34;模块拆分&#34;&gt;模块拆分&lt;/h4&gt;
&lt;p&gt;当流水线中存在多处(3次以上甚至更多)的重复性组合动作出现的情况(例如,批量的刷新数据与配置文件解析等), 编码人员就应当考虑为代码添加可共用函数来解决代码冗余的问题, 多个关联的函数代码块可以存放在一个公共的模块中, 以方便调用和代码管理.&lt;/p&gt;
&lt;h4 id=&#34;模块函数&#34;&gt;模块函数&lt;/h4&gt;
&lt;p&gt;在进行模块函数编写时应当尽量采用纯函数进行编写, 保证函数尽量在任务无关的独立逻辑中运行, 可以存在其他依赖但是不应当出现与具体某一任务绑定的情况. groovy 函数也推荐采用小驼峰命名法, 如, getTaskNum()&lt;/p&gt;
&lt;p&gt;模块函数应当尽量使用 &lt;code&gt;return&lt;/code&gt; 显示定义自身的返回值, 或者在最后一个表达式前增加换行以提高可读性.&lt;/p&gt;
&lt;h4 id=&#34;脚本拆分&#34;&gt;脚本拆分&lt;/h4&gt;
&lt;p&gt;当流水线中需要较长(比如20行以上)的其他脚本代码块(比如shell/python)才能完成动作时, 建议采用独立的脚本执行任务动作, 而在流水线中保留关键的调用参数的方式来处理.&lt;/p&gt;
&lt;p&gt;注意, 拆分出来的脚本尽量使用显示的参数传递方式, 而不要采用不可见的自定义环境变量传递数据.&lt;/p&gt;
&lt;h4 id=&#34;命令字符串拼接与转译&#34;&gt;命令字符串拼接与转译&lt;/h4&gt;
&lt;p&gt;除了通用的单引号好双引号写法, 以下几种字符串的写法也 groovy 允许的:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 单行
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; foo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;$/.*foo.*/$&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; foo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/.*foo.*/&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;// 特殊转译
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; escapeSlash &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/The character \/&lt;/span&gt; is a forward slash&lt;span style=&#34;color:#e6db74&#34;&gt;/
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;def escapeDollar = $/&lt;/span&gt;The character &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;$ is a escaped dollar sign&lt;span style=&#34;color:#e6db74&#34;&gt;/$
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/ 多行字符
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;def multilineSlashy = /&lt;/span&gt;one
    two
    three
&lt;span style=&#34;color:#e6db74&#34;&gt;/
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;def multilineSingleQuote = $/&lt;/span&gt;
    foo
    bar
&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;不过一般情况下我们并不建议过多使用美元符加斜线 &lt;code&gt;$/.../$&lt;/code&gt; 格式和 斜线 &lt;code&gt;/.../&lt;/code&gt; 格式, 相较而言, 使用引号的情况转义字符会更加符合常规的阅读习惯.&lt;/p&gt;
&lt;h4 id=&#34;shell-字符串&#34;&gt;shell 字符串&lt;/h4&gt;
&lt;p&gt;当流水线中存在有较多对诸如 bash 等长命令的字符串进行拼接处理任务时, 应当尽量使用单独的模块进行字符串拼接.&lt;/p&gt;
&lt;p&gt;一般地, 在流水线中引入额外的 shell 中间变量和管道时会让出错的 debug 变得困难, 因为需要来回在流水线和 shell 的上下文环境来回进行推演才能定位问题, 我们建议尽量先将字符串拼接任务在流水线内使用 groovy 代码处理完再交给shell处理, 如果是相对复杂的情况也可以考虑将这部分长命令内容拆分成独立的脚本或者模块, 这样可以相对提高流水线代码的简洁程度和可读性.&lt;/p&gt;
&lt;p&gt;因为转译符号越多看起来也就越杂乱不容易维护. 当流水线中的命令文本存在较多的字符需要转译的情况也应当遵循, 先拼接再执行的原则进行处理, 或者最好直接拆分到独立的脚本里.&lt;/p&gt;
&lt;h4 id=&#34;参数传递&#34;&gt;参数传递&lt;/h4&gt;
&lt;p&gt;独立拆分的脚本应当尽量保持独立的参数解析和运行输出能力, 以方便模块测试, 流水线向脚本传递参数时应当采用显示参数传递, 尽量避免没有声明和注释说明的环境变量传递.&lt;/p&gt;
&lt;h4 id=&#34;def-和具体类型&#34;&gt;Def 和具体类型&lt;/h4&gt;
&lt;p&gt;避免把 &lt;code&gt;def&lt;/code&gt; 和具体类型一起使用. 要么使用 &lt;code&gt;def&lt;/code&gt;,要么使用一个具体类型.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 不要这样写：
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; String name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;someText&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;// 较好的是这样：
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;String name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;someText&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在Groovy中，def 表明的实际类型是 Object (这样你就可以给 def 定义的变量分配任何对象, 和在用 def 定义的方法里返回任何类型的对象).&lt;/p&gt;
&lt;h4 id=&#34;引用格式&#34;&gt;引用格式&lt;/h4&gt;
&lt;p&gt;普通变量的引用, groovy 支持多种引用标识符, 例如, 一个 map 类型的引用格式:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;map&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;keyName&lt;/span&gt;
map&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;keyName&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;// 其他引用标识符
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;map&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;single quote&amp;#39;&lt;/span&gt;
map&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;double quote&amp;#34;&lt;/span&gt;
map&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;triple single quote&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
map&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;triple double quote&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
map&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/slashy string/&lt;/span&gt;
map&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$/dollar slashy string/$&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;过多的引用格式混用将会很大程度增加代码的阅读负担, 建议统一使用一种引用形式写法, 例如采用 &lt;code&gt;env.&amp;lt;变量名&amp;gt;&lt;/code&gt; 或 &lt;code&gt;env[&#39;变量名&#39;]&lt;/code&gt; 的方式, 但同一份流水线尽量避免使用多种引用格式.&lt;/p&gt;
&lt;p&gt;groovy 支持字符串中使用 &lt;code&gt;${}&lt;/code&gt; 占位符来与 &lt;code&gt;$&lt;/code&gt; 前缀来引用变量和使用表达式, 如, &lt;code&gt;$person.name&lt;/code&gt; , 我们相对建议脚本中统一使用一种即可.&lt;/p&gt;
&lt;h4 id=&#34;圆括号省略&#34;&gt;圆括号省略&lt;/h4&gt;
&lt;p&gt;Groovy 允许你省略顶级层次表达式的圆括号，如用 &lt;code&gt;println&lt;/code&gt; 的命令&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 省略圆括号
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;println &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt; 
method a&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; b

&lt;span style=&#34;color:#75715e&#34;&gt;// VS：
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;println&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; 
method&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; b&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里, 我们不做硬性限制, 但是相对建议代码块保留圆括号.&lt;/p&gt;
&lt;p&gt;同样, 在进行闭包调用的过程中也可有允许省略圆括号的写法, 例如, 闭包作为一个方法调用的最后一个参数时&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 完整
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;each&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; println it &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; 
&lt;span style=&#34;color:#75715e&#34;&gt;// 将闭包写在外面
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;each&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; println it &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; 
&lt;span style=&#34;color:#75715e&#34;&gt;// 省略前面方法的圆括号
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;each&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; println it &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里我们三种写法都允许, 但是相对建议第一和最后一种, 并且要注意持整体写法的统一.&lt;/p&gt;
&lt;h4 id=&#34;直接访问字段属性&#34;&gt;直接访问字段属性&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;resourcePrototype&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;something&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;// 等价于
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;resourcePrototype&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setName&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;something&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在 Groovy 中, 一个 getter 和 setter 方法形成了我们所谓的&amp;quot;属性&amp;rdquo;, 并提供了一个捷径来访问和设置这些属性, 你可以使用一个类似字段访问的方式.&lt;/p&gt;
&lt;h4 id=&#34;使用-with-简化bean操作&#34;&gt;使用 with 简化bean操作&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;server&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; application&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; 
server&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;status&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; status 
server&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sessionCount&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; 
server&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; 
server&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;stop&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;// VS：
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
server&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; 
    name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; application&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;
    status &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; status 
    sessionCount &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; 
    start&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; 
    stop&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; 
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;两种写法中, 我们推荐使用 with 语句简化重复的前缀.&lt;/p&gt;
&lt;h4 id=&#34;安全导航操作符&#34;&gt;安全导航操作符&lt;/h4&gt;
&lt;p&gt;在 groovy 中如果需要逐层引用安全检查的情况, 建议使用 &lt;code&gt;?.&lt;/code&gt; 安全引用操作符进行代码简化, 如&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 手动检查
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;order &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;order&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getCustomer&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;order&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getCustomer&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getAddress&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; 
            System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;order&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getCustomer&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getAddress&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; 
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;// 安全引用操作符
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;println order&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;customer&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;address&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;安全引用操作符的调用链中会自动进行空值检查, 任何元素为 &lt;code&gt;null&lt;/code&gt; 都不会抛出 &lt;code&gt;NullPointerException&lt;/code&gt; 异常, 如果有一个为&lt;code&gt; null&lt;/code&gt; 则返回值也是 &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&#34;内插字符串&#34;&gt;内插字符串&lt;/h4&gt;
&lt;p&gt;在进行字符串处理的过程中, 通常有下面的写法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;result_str &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Unable to convert resource: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; resource

&lt;span style=&#34;color:#75715e&#34;&gt;// GString:
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;result_str &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Unable to convert resource: ${resource}&amp;#34;&lt;/span&gt;
result_str &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Unable to convert resource: $resource&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;// 闭包表达式
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;result_str &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Unable to convert resource: ${-&amp;gt; resource}&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里的几种写法都是可以的, 但是相对推荐使用内插字符串进行字符串和变量的串联处理, 相对可以降低书写负担.&lt;/p&gt;
&lt;p&gt;注意, groovy 里不同的引号的使用作用效果是很不一样的, 处理单行字符, groovy 中单引号总是创建 java 字符串, 没有内插变量, 双引号则既可以创建字符串, 也可以有内插变量 (有点类似于 shell).&lt;/p&gt;
&lt;p&gt;不过对于多行字符串处理, 你还可以使用三个引号, 不同引号效果依然不同, 单纯的字符串使用三个单引号, GString 使用三个双引号.&lt;/p&gt;
&lt;h4 id=&#34;集合工具&#34;&gt;集合工具&lt;/h4&gt;
&lt;p&gt;在 groovy 语言中,, 常见的 java 循环写法也是可以正常运行的, 但是我们应当尽量使用, groovy 本身提供的遍历工具来进行编写, 如&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 经典for循环
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;// 使用 each
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;each&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    println it
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;集合处理 groovy 风格代码 (这里也省略圆括号的闭包写法).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 使用 each
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;each&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;it&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
    result &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; it
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
println result
&lt;span style=&#34;color:#75715e&#34;&gt;// 使用 groovy 集合方法
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;grep&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; it &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;// 使用 each
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;each&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    result &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; it&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;// 集合方法
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;collect&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; it&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;类似的还有  &lt;code&gt;find(Closure closure)&lt;/code&gt;, &lt;code&gt;findALL(Closure closure)&lt;/code&gt; 等.&lt;/p&gt;
&lt;p&gt;元素判断操作&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; isMoreThanZero &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; list&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        isMoreThanZero &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
println isMoreThanZero

&lt;span style=&#34;color:#75715e&#34;&gt;// every 方法
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; isMoreThanZero &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;every&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; it&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;类似的还有 &lt;code&gt;any(Closure closure)&lt;/code&gt;, &lt;code&gt;any()&lt;/code&gt;, &lt;code&gt;every()&lt;/code&gt;, &lt;code&gt;count()&lt;/code&gt;, &lt;code&gt;join()&lt;/code&gt; 等.&lt;/p&gt;
&lt;h4 id=&#34;类型建议&#34;&gt;类型建议&lt;/h4&gt;
&lt;p&gt;groovy 中是否使用显示的强类型是由用户自己决定的, 这里我们给出一个简单建议, 如果你的代码是不需要作为外部调用的API使用的情况下, 可以自由决定, 但是当代码用作公共API的情况下, 应当尽量使用强类型, 这样有利于增强规约, 避免错误的类型传递, 便于维护, 对于 IDE 也更加友好.&lt;/p&gt;
&lt;p&gt;附, groovy 语言关键字&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;-&lt;/th&gt;
&lt;th&gt;-&lt;/th&gt;
&lt;th&gt;-&lt;/th&gt;
&lt;th&gt;-&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;as&lt;/td&gt;
&lt;td&gt;assert&lt;/td&gt;
&lt;td&gt;break&lt;/td&gt;
&lt;td&gt;case&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;catch&lt;/td&gt;
&lt;td&gt;class&lt;/td&gt;
&lt;td&gt;const&lt;/td&gt;
&lt;td&gt;continue&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;def&lt;/td&gt;
&lt;td&gt;default&lt;/td&gt;
&lt;td&gt;do&lt;/td&gt;
&lt;td&gt;else&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;enum&lt;/td&gt;
&lt;td&gt;extends&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;finally&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;for&lt;/td&gt;
&lt;td&gt;goto&lt;/td&gt;
&lt;td&gt;if&lt;/td&gt;
&lt;td&gt;implements&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;import&lt;/td&gt;
&lt;td&gt;in&lt;/td&gt;
&lt;td&gt;instanceof&lt;/td&gt;
&lt;td&gt;interface&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;new&lt;/td&gt;
&lt;td&gt;null&lt;/td&gt;
&lt;td&gt;package&lt;/td&gt;
&lt;td&gt;return&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;super&lt;/td&gt;
&lt;td&gt;switch&lt;/td&gt;
&lt;td&gt;this&lt;/td&gt;
&lt;td&gt;throw&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;throws&lt;/td&gt;
&lt;td&gt;trait&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;try&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;while&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;特殊字符转义：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Escape sequence&lt;/th&gt;
&lt;th&gt;Character&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;\t&lt;/td&gt;
&lt;td&gt;tabulation（制表符）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\b&lt;/td&gt;
&lt;td&gt;backspace（回退符）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\n&lt;/td&gt;
&lt;td&gt;newline（换行符）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\r&lt;/td&gt;
&lt;td&gt;carriage return（回车符）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\f&lt;/td&gt;
&lt;td&gt;formfeed（换页符）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\&lt;/td&gt;
&lt;td&gt;backslash（反斜杠）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&#39;&lt;/td&gt;
&lt;td&gt;single quote within a single-quoted string (and optional for triple-single-quoted and double-quoted strings)（单引号）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;quot;&lt;/td&gt;
&lt;td&gt;double quote within a double-quoted string (and optional for triple-double-quoted and single-quoted strings)（双引号）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;字符串汇总表&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;String name&lt;/th&gt;
&lt;th&gt;String syntax&lt;/th&gt;
&lt;th&gt;Interpolated&lt;/th&gt;
&lt;th&gt;Multiline&lt;/th&gt;
&lt;th&gt;Escape character&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Single-quoted&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&#39;…&#39;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;\&lt;/code&gt;              |&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Triple-single-quoted&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&#39;&#39;&#39;…&#39;&#39;&#39;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;√&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;\&lt;/code&gt;              |&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Double-quoted&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;quot;…&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;√&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;\&lt;/code&gt;              |&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Triple-double-quoted&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;quot;&amp;quot;&amp;quot;…&amp;quot;&amp;quot;&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;√&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;√&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;\&lt;/code&gt;              |&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Slashy&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/…/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;√&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;√&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;\&lt;/code&gt;              |&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Dollar slashy&lt;/td&gt;
&lt;td&gt;&lt;code&gt;$/…/$&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;√&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;√&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;$&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;官方 &lt;a href=&#34;http://www.groovy-lang.org/syntax.html&#34;&gt;groovy 语法文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;官方 &lt;a href=&#34;http://www.groovy-lang.org/style-guide.html&#34;&gt;代码风格指南&lt;/a&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>如何正确升级 sqlite3 (CentOS)</title>
      <link>https://www.iterdaily.com/post/web_django_upgrade_sqlite3/</link>
      <pubDate>Thu, 06 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.iterdaily.com/post/web_django_upgrade_sqlite3/</guid>
      
        <description>&lt;h2 id=&#34;为-django-升级-sqlite3&#34;&gt;为 Django 升级 sqlite3&lt;/h2&gt;
&lt;p&gt;在配置 Django 开发环境时, 如果采用默认的 sqlite3 作为数据库, 通常都会碰到 sqlite3 版本过低的运行报错, 像这样&lt;/p&gt;
&lt;p&gt;在使用 Django 框架进行服务搭建的时候, 如果没有升级系统自带的 sqlite3 版本, name多数都会碰到类似下面这样的报错.&lt;/p&gt;
&lt;h4 id=&#34;djangocoreexceptionsimproperlyconfigured-sqlite-383-or-later-is-required-found-3717&#34;&gt;django.core.exceptions.ImproperlyConfigured: SQLite 3.8.3 or later is required (found 3.7.17).&lt;/h4&gt;
&lt;p&gt;根据这个报错可以在搜索引擎中找到一大堆关联的解决, 但是主要有两种方式&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;升级 sqlite3&lt;/li&gt;
&lt;li&gt;降级django (如, 2.1.8)&lt;/li&gt;
&lt;li&gt;更换后端数据库 (如, MySQL)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我觉得第三种方式, 更换数据库到 MySQL 也是个可以考虑的选择, 但是很多用 sqlite3 的项目非常的轻量, 大多是用不上 mysql 的, 至于降级 Django 就不推荐了, 那我们就看一下升级 sqlite3 的处理步骤吧:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;官网获取 sqlite3 安装包&lt;/li&gt;
&lt;li&gt;解压并编译安装 sqlite3&lt;/li&gt;
&lt;li&gt;备份系统原有的 sqlite3, 替换新的 sqlite3 启动链接(/usr/bin/sqlite3).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;流程基本是这样的&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 创建一个工作目录(可选)&lt;/span&gt;
mkdir sqlite3_upgrade
cd sqlite3_upgrade

&lt;span style=&#34;color:#75715e&#34;&gt;# 下载源码包(大多发行版升级 sqlite3 都使用源码安装)&lt;/span&gt;
wget https://www.sqlite.org/2020/sqlite-autoconf-3320300.tar.gz
&lt;span style=&#34;color:#75715e&#34;&gt;# 或者 wget https://docs.iterdaily.com/sqlite-autoconf-3320300.tar.gz&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# 解压&lt;/span&gt;
tar -xf sqlite-autoconf-3320300.tar.gz

&lt;span style=&#34;color:#75715e&#34;&gt;# 进入解压目录,编译安装&lt;/span&gt;
cd sqlite-autoconf-3320300
./configure --prefix&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/usr/local
make &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; make install

&lt;span style=&#34;color:#75715e&#34;&gt;# 替换系统低版本 sqlite3 启动文件&lt;/span&gt;
mv /usr/bin/sqlite3  /usr/bin/sqlite3_old
ln -s /usr/local/bin/sqlite3   /usr/bin/sqlite3
&lt;span style=&#34;color:#75715e&#34;&gt;# 添加新版 sqlite3 动态链接库配置文件, 刷新动态链接库缓存&lt;/span&gt;
echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/usr/local/lib&amp;#34;&lt;/span&gt; &amp;gt; /etc/ld.so.conf.d/sqlite3.conf
ldconfig

&lt;span style=&#34;color:#75715e&#34;&gt;# 如果添加的 library 不在 /lib 或 /usr/lib 下, 但是却没有权限操作写 /etc/ld.so.conf 文件的话,&lt;/span&gt; 
&lt;span style=&#34;color:#75715e&#34;&gt;# 这时就需要往 export 里写一个全局变量 LD_LIBRARY_PATH, 就可以了,&lt;/span&gt; 
&lt;span style=&#34;color:#75715e&#34;&gt;# 最后将这个 export 命令写到 bashrc 等配置文件中.&lt;/span&gt;
export LD_LIBRARY_PATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/usr/local/lib&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# 查看新的 sqlite3 版本是否生效&lt;/span&gt;
sqlite3 -version
3.32.3
python -c &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;import sqlite3;print(sqlite3.sqlite_version)&amp;#34;&lt;/span&gt;
3.32.3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;至此, 新版本的 sqlite3 就应该已经能在 Django中正常使用了(而旧版本的依然保留下来了).&lt;/p&gt;
&lt;h2 id=&#34;为-uwsgi-升级原有的-sqlite3-动态链接库&#34;&gt;为 uwsgi 升级原有的 sqlite3 动态链接库&lt;/h2&gt;
&lt;p&gt;升级之后虚拟环境中 Django 配置使用也没有问题, 但是当开始 uwsgi 测试部署的时候, 这个 sqlite3 版本问题就又诡异的出现了.&lt;/p&gt;
&lt;h4 id=&#34;uwsgi提示sqlite-383-or-later-is-required-found-3717&#34;&gt;uwsgi提示：SQLite 3.8.3 or later is required (found 3.7.17)&lt;/h4&gt;
&lt;p&gt;显然, 已经升级了的 sqlite3 这次并没有被 Django 虚拟环境所加载, 而是加载了升级之前系统默认的旧版本.&lt;/p&gt;
&lt;p&gt;排查虚拟环境中的环境变量应该也是一个解决思路, 但是这样每个虚拟环境都要配置一遍, 所以就不采用这种方法了.&lt;/p&gt;
&lt;p&gt;现在我们的解决思路是, 找到旧版本的动态链接库位置, 然后备份之后替换掉成新的就可以了 .&lt;/p&gt;
&lt;p&gt;步骤大概是这样的&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# ldconfig -v&lt;/span&gt; 
&lt;span style=&#34;color:#75715e&#34;&gt;# 输出太长就不贴了&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# 或者简单过滤一下看看有几条记录&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# ldconfig -v |grep sqlite&lt;/span&gt;
ldconfig: Can&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t stat /libx32: No such file or directory
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;ldconfig: Path `/usr/lib&amp;#39;&lt;/span&gt; given more than once
ldconfig: Path &lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;/usr/lib64&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; given more than once
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;ldconfig: Can&amp;#39;&lt;/span&gt;t stat /usr/libx32: No such file or directory
        libsqlite3.so.0 -&amp;gt; libsqlite3.so.0.8.6
        libsqlite3.so.0 -&amp;gt; libsqlite3.so.0.8.6

&lt;span style=&#34;color:#75715e&#34;&gt;# 上面的报错可以忽略, 但是有两个 sqlite3 的动态链接库配置,&lt;/span&gt; 
&lt;span style=&#34;color:#75715e&#34;&gt;# 一个在 /usr/lib64/ 这个是默认的, 另一个在 /usr/local/lib/ 这个是我们新编译安装的,&lt;/span&gt; 
&lt;span style=&#34;color:#75715e&#34;&gt;# 现在将旧版本备份一下, 更新一下链接文件就可以了.&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# rpm -ql sqlite&lt;/span&gt;
/usr/bin/sqlite3
/usr/lib64/libsqlite3.so.0
/usr/lib64/libsqlite3.so.0.8.6
/usr/share/doc/sqlite-3.7.17
/usr/share/doc/sqlite-3.7.17/README
/usr/share/man/man1/sqlite3.1.gz

&lt;span style=&#34;color:#75715e&#34;&gt;# ll /usr/lib64/libsqlite3.so.0&lt;/span&gt;
lrwxrwxrwx &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root root     &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt; Jul &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt; 06:27 /usr/lib64/libsqlite3.so.0 -&amp;gt; libsqlite3.so.0.8.6

&lt;span style=&#34;color:#75715e&#34;&gt;# 备份原有文件, 要注意文件名不要再使用 .so.0.0.8.6 后缀&lt;/span&gt;
mv /usr/lib64/libsqlite3.so.0.8.6 /usr/lib64/libsqlite3_so_0_8_6_old

&lt;span style=&#34;color:#75715e&#34;&gt;# ls /usr/local/lib/ -l&lt;/span&gt;
total &lt;span style=&#34;color:#ae81ff&#34;&gt;18312&lt;/span&gt;
-rw-r--r-- &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root root &lt;span style=&#34;color:#ae81ff&#34;&gt;13245026&lt;/span&gt; Aug  &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; 16:05 libsqlite3.a
-rwxr-xr-x &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root root      &lt;span style=&#34;color:#ae81ff&#34;&gt;975&lt;/span&gt; Aug  &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; 16:05 libsqlite3.la
lrwxrwxrwx &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root root       &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt; Aug  &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; 16:05 libsqlite3.so -&amp;gt; libsqlite3.so.0.8.6
lrwxrwxrwx &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root root       &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt; Aug  &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; 16:05 libsqlite3.so.0 -&amp;gt; libsqlite3.so.0.8.6
-rwxr-xr-x &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; root root  &lt;span style=&#34;color:#ae81ff&#34;&gt;5498352&lt;/span&gt; Aug  &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; 16:05 libsqlite3.so.0.8.6
drwxr-xr-x &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; root root       &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt; Aug  &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; 16:05 pkgconfig
drwxr-xr-x &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; root root       &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt; Aug  &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; 16:29 python3.6

&lt;span style=&#34;color:#75715e&#34;&gt;# 替换旧文件&lt;/span&gt;
cp /usr/local/lib/libsqlite3.so.0.8.6 /usr/lib64/libsqlite3.so.0.8.6

&lt;span style=&#34;color:#75715e&#34;&gt;# ldconfig #刷新一下库缓存&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# ll /usr/lib64/libsqlite3*&lt;/span&gt;
lrwxrwxrwx  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root root      &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt; Aug  &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; 15:48 /usr/lib64/libsqlite3.so.0 -&amp;gt; libsqlite3.so.0.8.6
-rwxr-xr-x  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root root &lt;span style=&#34;color:#ae81ff&#34;&gt;5498352&lt;/span&gt; Aug  &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; 15:36 /usr/lib64/libsqlite3.so.0.8.6
-rwxr-xr-x. &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root root  &lt;span style=&#34;color:#ae81ff&#34;&gt;753232&lt;/span&gt; Nov &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;2015&lt;/span&gt; /usr/lib64/libsqlite3_so_0_8_6_old
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在问题就解决了.&lt;/p&gt;
&lt;p&gt;这个问题网上很多答案都没有给出解决, 其实是, 系统自带的 sqlite3 生成的动态链接库在 &lt;code&gt;/usr/lib64/&lt;/code&gt; 下面, 这也是系统默认的动态链接库存放的位置, uwsgi 直接到了这个默认位置去加载 sqlite3 也就直接使用了旧版本的, 所以我们把默认的链接库也更新一下就可以正常使用了.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>shell书写规范建议</title>
      <link>https://www.iterdaily.com/post/shell-script-flavor/</link>
      <pubDate>Tue, 28 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.iterdaily.com/post/shell-script-flavor/</guid>
      
        <description>&lt;h1 id=&#34;shell书写规范&#34;&gt;Shell书写规范&lt;/h1&gt;
&lt;p&gt;很多时候在 shell 脚本的编写过程中大家对于语法和编码都是比较随意的, 对于临时性的脚本并不太需要很关注风格规范, 但是如果长期维护的脚本, 没有统一规范会带来很多后期维护上的不便, 这里可以给出一些编写建议以供参考.&lt;/p&gt;
&lt;h2 id=&#34;脚本文件命名&#34;&gt;脚本文件命名&lt;/h2&gt;
&lt;h4 id=&#34;要求&#34;&gt;要求:&lt;/h4&gt;
&lt;p&gt;对于 Linux shell 脚本的命名统一使用 &lt;code&gt;.sh&lt;/code&gt; 后缀结尾.  (windows 环境下批处理程序统一使用 &lt;code&gt;.bat&lt;/code&gt; 作为脚本后缀名.)&lt;/p&gt;
&lt;p&gt;请使用易于识别的文件名与后缀名, 以方便识别和执行权限检查, 优先使用脚本用途为脚本命名, 请避免使用无意义的字母与没有关联性的单词对脚本文件名命.&lt;/p&gt;
&lt;h2 id=&#34;脚本解释器-shebang-信息&#34;&gt;脚本解释器 shebang 信息&lt;/h2&gt;
&lt;p&gt;bash 脚本通常都可以采用 &lt;code&gt;bash script-path/script-name.sh&lt;/code&gt; 的方式手动运行. 不同的发行版中 shell 默认的解释器有时是会变化的, 正确的解释器是脚本正常执行的基本, 因此给出明确的解释器信息是十分必要的, 这也是一份规范的可执行脚本必须满足的基本要求.&lt;/p&gt;
&lt;h4 id=&#34;说明&#34;&gt;说明:&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;#!&lt;/code&gt; 是 &lt;code&gt;sharp&lt;/code&gt; 加 &lt;code&gt;bang&lt;/code&gt; , 也就是 &lt;code&gt;shebang&lt;/code&gt; .
Shebang 这个符号通常在 Unix 系统的脚本中第一行开头中写到,它指明了执行这个脚本文件的解释程序.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果脚本文件中没有 &lt;code&gt;#!&lt;/code&gt;  这一行,那么在执行时会默认使用当前shell去解释这个脚本（即$shell环境变量）.&lt;/li&gt;
&lt;li&gt;如果 &lt;code&gt;#!&lt;/code&gt; 之后的解释程序是一个可执行文件,那么执行这个脚本时, shell 就会把文件名及其参数作为参数传给标示的解释程序去执行.&lt;/li&gt;
&lt;li&gt;如果 &lt;code&gt;#!&lt;/code&gt;指定的解释程序没有可执行权限,则会报错 &amp;lsquo;bad interpreter：Permission denied&amp;rsquo; (拒绝访问,也就是没有权限).&lt;/li&gt;
&lt;li&gt;如果 &lt;code&gt;#!&lt;/code&gt; 指定的解释程序不是一个可执行文件,那么指定的解释程序会被忽略,转而给当前的shell去执行这个脚本.&lt;/li&gt;
&lt;li&gt;如果 &lt;code&gt;#!&lt;/code&gt; 指定的解释程序不存在,那么会报错 &amp;lsquo;bad interpret ： No such file ordirectory&amp;rsquo;, 注意: &lt;code&gt;#!&lt;/code&gt; 之后的解释程序,需要写其绝对路径（例如：/bin/bash）,他是不会自动到 &lt;code&gt;$PATH&lt;/code&gt; 中寻找解释器的.&lt;/li&gt;
&lt;li&gt;如果明确指定使用的 &amp;lsquo;bash script_name.sh&amp;rsquo; 这样的命令来执行脚本, 那么 &lt;code&gt;#!&lt;/code&gt; 这一行将被忽略,解释器将使用命令行中显示式指定的 bash解释器.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;要求-1&#34;&gt;要求:&lt;/h4&gt;
&lt;p&gt;对于需要多次重复使用的脚本中须尽量在脚本的第一行指定解释器信息.&lt;/p&gt;
&lt;p&gt;查看本地支持的解释器可以使用 &lt;code&gt;cat /etc/shells&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;示例:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/sh
#!/bin/bash
#!/usr/bin/awk
#!/bin/sed
#!/usr/bin/tcl
#!/usr/bin/expect
#!/usr/bin/perl
#!/usr/bin/env python
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;对于 &lt;code&gt;bash&lt;/code&gt;  与  &lt;code&gt;sh&lt;/code&gt; 的使用上推荐使用 bash. 使用 bash 执行可以保证 shell 中的扩展语法正常工作, 如增量赋值, 特殊变量展开语法等在部分系统的 sh 解释器中是不支持的, 这将导致脚本不可预知的执行异常.&lt;/p&gt;
&lt;p&gt;部分系统的 sh 为 bash 的软链接, 对于已经验证正常的脚本也允许使用 sh 解释器.&lt;/p&gt;
&lt;p&gt;脚本中不推荐下面的写法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/share/env bash
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;建议使用 &lt;code&gt;/bin/&lt;/code&gt; 下的启动文件而非程序的安装路径, 不同版本 Linux 系统, 默认的 env 命令可能安装在不同的系统路径中, 此处的写法具有较弱的通用性.&lt;/p&gt;
&lt;h2 id=&#34;脚本注释&#34;&gt;脚本注释&lt;/h2&gt;
&lt;h4 id=&#34;头部注释&#34;&gt;头部注释&lt;/h4&gt;
&lt;p&gt;脚本的头部注释通常需要将脚本的后续维护追溯信息进行备注, 建议包含以下信息&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;作者(与联系方式)&lt;/li&gt;
&lt;li&gt;写作与修改日期&lt;/li&gt;
&lt;li&gt;脚本的用途&lt;/li&gt;
&lt;li&gt;脚本注意事项&lt;/li&gt;
&lt;li&gt;脚本版本&lt;/li&gt;
&lt;li&gt;开发/执行平台版本&lt;/li&gt;
&lt;li&gt;关联开源软件协议/版权&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;###########################################################
# Author  : william mei
# Date    : 20181010
# version : cfiojobs0.12.53
# Test platform:
#               kernel     : 3.10.0-514.26.2.el7.x86_64
#               OS release : CentOS 7.3.1611
#               Shell type : GNU Bash-4.2
# description  :
#               send files/command to multy host 
#               parallel fio test on clusters 
# last edit :   20181225
###########################################################
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;提示：开发环境下可通过配置 &lt;code&gt;~/.vimrc&lt;/code&gt; 配置文件将脚本自动加上以上信息.&lt;/p&gt;
&lt;h4 id=&#34;注释通用要求&#34;&gt;注释通用要求&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;对于关键执行逻辑请务必说明上下文关联.&lt;/li&gt;
&lt;li&gt;独立函数需要注明是否有全局变量依赖, 参数格式, 输出结果, 返回值.&lt;/li&gt;
&lt;li&gt;非交互式环境中外部环境变量依赖须在脚本头部注释后给出依赖的变量内容与格式说明.&lt;/li&gt;
&lt;li&gt;脚本中的参数传递与接收处理部分务必标注 位置 内容与类型, 并带有参数使用示例.&lt;/li&gt;
&lt;li&gt;对变量命名用词不能完全保证其清晰准确并可读的情况, 复杂变量拼接应尽量使用结果示例作为注释进行标注&lt;/li&gt;
&lt;li&gt;尽量使用英文注释, 防止切换系统环境后出现中文乱码问题.&lt;/li&gt;
&lt;li&gt;尽量将注释信息独占一行, 保持与前后代码的同级缩进&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;变量命名规则&#34;&gt;变量命名规则&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;变量名必须是以字母或下划线 &amp;lsquo;_&amp;rsquo; 开头, 后面跟字母 数字或下划线.&lt;/li&gt;
&lt;li&gt;变量名中间不能有空格, 可以使用下划线连接.&lt;/li&gt;
&lt;li&gt;普通变量一般统一使用小写字母加下划线, 请避免驼峰命名法与下划线混用.&lt;/li&gt;
&lt;li&gt;变量名不要使用问号 &amp;lsquo;?&amp;rsquo; 星号 &amp;lsquo;*&amp;rsquo; 或其他特殊字符.&lt;/li&gt;
&lt;li&gt;变量名不能使用标点符号, 更不能使用 bash 里的关键字, 例如：if, for, while, do等关键字.&lt;/li&gt;
&lt;li&gt;变量名的命名尽量要有实际意义, 具有明确的内容指示性, 复用性较高的变量避免使用单字母命名.&lt;/li&gt;
&lt;li&gt;变量名中的单词尽量保证拼写正确, 必要的情况下请进行检查后再使用, 不要拼错&lt;/li&gt;
&lt;li&gt;自定义变量尽量不要和系统环境变量冲突.&lt;/li&gt;
&lt;li&gt;函数内局部变量最好使用 local 进行定义, 以避免命名污染.&lt;/li&gt;
&lt;li&gt;联合数组与指数数组都尽量使用大写单词或词组命名.&lt;/li&gt;
&lt;li&gt;外部引入的环境变量或关键全局变量须定义在脚本开头, 以大写字母命名并配置变量检查和使用注释.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;参数处理&#34;&gt;参数处理&lt;/h2&gt;
&lt;p&gt;脚本或脚本中的函数进行参数接收时应遵循以下规范&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;格式检查, 当脚本或函数需要接收参数时, 应尽量对参数进行格式规范判断(参数个数, 内容正则匹配检查等), 允许的情况下给出日志输出或者控制台回显.&lt;/li&gt;
&lt;li&gt;位置参数重新赋值, 当脚本或函数对参数较多与处理步骤较多或者调用位置代码跨度较大的情况, 应尽量将接收到的参数赋值为具有实际可读性的变量名, 避免沿用原有数字序号.&lt;/li&gt;
&lt;li&gt;函数中的参数如需赋值到临时变量须优先使用局部变量(如 local declare等), 若使用全局变量请给出注释以说明&lt;/li&gt;
&lt;li&gt;脚本模块化拆分时, 拆分到独立文件公共函数应尽量以纯函数的方式编写, 尽量全部采用局部变量进行处理参数&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;字符编码&#34;&gt;字符编码&lt;/h2&gt;
&lt;p&gt;脚本编写时尽量使用 UTF-8 编码, 脚本的代码与标点符号必须为英文, 注释内容允许使用少量中文但整体应尽量保持以英文为主, 日志与控制台输出须尽量采用英文输出, 以避免不必要的编码问题.&lt;/p&gt;
&lt;p&gt;跨平台编写脚本时, 若未开启 git 等代码版本管理软件的自动换行符转换(默认开启), 应避免直接使用 windows 系统换行符.&lt;/p&gt;
&lt;h2 id=&#34;日志与控制台回显&#34;&gt;日志与控制台回显&lt;/h2&gt;
&lt;p&gt;在非临时性脚本的编写中, 须保证脚本的日志输出或控制台回显二者当中至少有一种包含了执行的关键纠错信息, 也可以两者都输出, 如 &lt;code&gt;main |tee -a $logfile&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;对于日志和关键输出, 请尽量带有可识别的日志级别标示, 非关键内容则允许过滤处理或者重定向到其他临时输出.&lt;/p&gt;
&lt;p&gt;日志级别参考:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;DEBUG  指出细粒度信息事件对调试应用程序是非常有帮助的, 主要用于开发过程中打印一些运行信息.&lt;/li&gt;
&lt;li&gt;INFO  消息在粗粒度级别上突出强调应用程序的运行过程. 打印一些你感兴趣的或者重要的信息, 这个可以用于生产环境中输出程序运行的一些重要信息, 但是不能滥用, 避免打印过多的日志.&lt;/li&gt;
&lt;li&gt;WARN  表明会出现潜在错误的情形, 有些信息不是错误信息, 但是也要给程序员的一些提示.&lt;/li&gt;
&lt;li&gt;ERROR  指出虽然发生错误事件, 但仍然不影响系统的继续运行. 打印错误和异常信息, 如果不想输出太多的日志, 可以使用这个级别.&lt;/li&gt;
&lt;li&gt;FATAL  指出每个严重的错误事件将会导致应用程序的退出. 这个级别比较高了. 重大错误, 这种级别你可以直接停止程序了.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;为了更加清晰的指示执行状态或结果, 脚本允许增加其他自定义日志级别与其他自定义内容输出标示, 但应与非关键输出做出显示上的区分处理, 如颜色, 闪烁等.&lt;/p&gt;
&lt;h2 id=&#34;代码范式&#34;&gt;代码范式&lt;/h2&gt;
&lt;p&gt;针对脚本中的代码范式规范如下:&lt;/p&gt;
&lt;h4 id=&#34;代码换行&#34;&gt;代码换行&lt;/h4&gt;
&lt;p&gt;单行代码建议在80个字符以内, 当单行代码过长的情况下, 如在调用程序或函数需要处理较长的参数时, 为了控制单行代码长度, 可以使用反斜杠进行分行处理, 如:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;./configure &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;–prefix&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/usr &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;–sbin-path&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/usr/sbin/nginx &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;–conf-path&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/etc/nginx/nginx.conf &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意, 反斜杠前须保留一位空格.&lt;/p&gt;
&lt;p&gt;当函数的行数超过100行, 请考虑对函数进行拆分.&lt;/p&gt;
&lt;h4 id=&#34;代码缩进&#34;&gt;代码缩进&lt;/h4&gt;
&lt;p&gt;对于脚本代码缩进, 我们允许使用以下 3 种缩进单位&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;双空格 缩进&lt;/li&gt;
&lt;li&gt;四空格 缩进    (推荐)&lt;/li&gt;
&lt;li&gt;tab 制表符 缩进&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;推荐使用 &lt;code&gt;四个空格&lt;/code&gt; 作为标准缩进单位, 同一份脚本中不允许混用多种缩进单位, 同项目中的脚本不允许混用多种缩进单位.&lt;/p&gt;
&lt;p&gt;制表符仅针对于遗留脚本进行修改的情形, 若其原有缩进使用制表符则遵循其原有的缩进规则, 新编写的脚本请避免使用制表符.&lt;/p&gt;
&lt;p&gt;绝大多数编辑器都支持进行代码的 &lt;code&gt;soft tab&lt;/code&gt; 配置, 也就是使用 n 个(通常为2或4个) 空格替代 制表符进行缩进.&lt;/p&gt;
&lt;h4 id=&#34;变量引用&#34;&gt;变量引用&lt;/h4&gt;
&lt;p&gt;脚本中的变量引用允许使用一下几种形式:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;$parameter&lt;/code&gt; 方式&lt;/li&gt;
&lt;li&gt;&lt;code&gt;${parameter}&lt;/code&gt; 方式&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;$parameter&amp;quot;&lt;/code&gt; 方式    (推荐)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;${parameter}&amp;quot;&lt;/code&gt; 方式     (推荐)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$&amp;quot;parameter&amp;quot;&lt;/code&gt; 方式    (特殊情况允许, 不推荐)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;推荐对所有引用的变量添加引号, 以避免赋值动作以外的其他解释错误和不可预知的执行后果, 比如变量中包含分隔符和正则匹配字符的情形.&lt;/p&gt;
&lt;p&gt;一般情况下允许前 4 中方式混用, 在非特殊用途的变量展开表达式以外应尽量避免 &lt;code&gt;$&amp;quot;parameter&amp;quot;&lt;/code&gt; 的引用写法, 它在不同的发行版中(由解释器关联的系统 POSIX 接口所决定)可能会有不同的展开结果.&lt;/p&gt;
&lt;p&gt;推荐在进行变量拼接的过程中使用 &lt;code&gt;${parameter}&lt;/code&gt; 与 &lt;code&gt;&amp;quot;${parameter}&amp;quot;&lt;/code&gt; .&lt;/p&gt;
&lt;h4 id=&#34;数据传递与变量作用域控制&#34;&gt;数据传递与变量作用域控制&lt;/h4&gt;
&lt;h5 id=&#34;说明-1&#34;&gt;说明:&lt;/h5&gt;
&lt;p&gt;shell 的变量默认是以全局变量的方式被定义的, 但支持以局部变量的方式在函数中限制变量的作用域.&lt;/p&gt;
&lt;p&gt;shell 脚本通常是过程式的, 无法以对象的方式抽象数据和方法, 代码的复用通常是以编写函数的方式进行的, 而函数的数据传递方式对代码的整体可读性和健壮性有较大影响, 在 shell 中常见的数据传递方式有:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;全局变量方式传递&lt;/li&gt;
&lt;li&gt;环境变量方式传递    (不推荐)&lt;/li&gt;
&lt;li&gt;参数方式传递&lt;/li&gt;
&lt;li&gt;管道方式传递&lt;/li&gt;
&lt;li&gt;文件描述符&lt;/li&gt;
&lt;li&gt;信号捕获&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;要求-2&#34;&gt;要求:&lt;/h5&gt;
&lt;p&gt;这里, 对于以上几种方式在都允许使用, 但多种方式都能达到同样效果的情况下, 我们建议采用如下选取原则.&lt;/p&gt;
&lt;p&gt;调用子脚本时, 允许使用环境变量向子 shell 传递数据, 但更推荐为子脚本添加参数接收支持的处理方式.&lt;/p&gt;
&lt;p&gt;首先, 不推荐采用环境变量方式向函数子进程传递数据, 因为这让整个数据传递的过程变得不够清晰, 可读性也相对较差, 若命名也不够清晰规范将大幅度增加排障难度.&lt;/p&gt;
&lt;p&gt;其次, 函数中若使用局部变量没有增加较大编码负担的情况下, 应避免使用全局变量, 减少与外部的关联可以很大程度上提高函数代码的稳定性, 推荐使用纯函数进行相关复用代码的编写, 这可以在一定程度上提高代码的健壮性和可读性.&lt;/p&gt;
&lt;p&gt;函数中的变量处理优先使用局部变量, 采用如, local declare 等方式进行声明.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;环境变量&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在脚本中多处使用的环境变量应在头部注释后进行声明(大写字母加下划线命名, 并注释其内容类型加示例).&lt;/p&gt;
&lt;p&gt;除了调用程序的特殊流程处理需要(如配置部分编译器的编译环境), 应尽量避免制造过多临时性的环境变量.&lt;/p&gt;
&lt;p&gt;如果脚本中没有调用对环境变量有特殊要求的应用程序应尽量避免使用环境变量传递数据.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只读变量&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;特殊变量如版本号字符串等可以采用 readonly 方式限制为只读, 以避免被修改.&lt;/p&gt;
&lt;h4 id=&#34;变量展开与字符处理程序调用&#34;&gt;变量展开与字符处理程序调用&lt;/h4&gt;
&lt;p&gt;在 shell 中针对变量的字符串截取等操作可以有多种实现方式, 最典型的两种是&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;内置变量展开表达式, 如 &lt;code&gt;${parameter:offset:length}&lt;/code&gt; &lt;code&gt;${parameter/pattern/string}&lt;/code&gt; 等&lt;/li&gt;
&lt;li&gt;调用外部字符处理工具, 如, &lt;code&gt;grep&lt;/code&gt; &lt;code&gt;sed&lt;/code&gt; &lt;code&gt;awk&lt;/code&gt; &lt;code&gt;cut&lt;/code&gt; 等&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;对于相对简单的当字符串的处理, 若两种方式均可实现的情况下, 优先采用内置变量展开, 如&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# example of Parameter Expansion&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# 1. 变量字符替换&lt;/span&gt;
para1&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello_john&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Parameter Expansion&lt;/span&gt;
result1&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;para1//john/jack&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# use sed&lt;/span&gt;
result2&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;echo $para1|sed &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s/john/jack/g&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# 2. 剔除路径,获取文件名&lt;/span&gt;
full_path&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;file/path/file_name&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Parameter Expansion&lt;/span&gt;
result3&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;full_path##*/&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# use awk&lt;/span&gt;
result4&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;echo $full_path| awk &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{print$NF}&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对于字符处理频度较低的脚本, 两种方式均可.&lt;/p&gt;
&lt;p&gt;但在需要频繁字符处理的情况下, 请优先使用内置变量展开方式进行处理, 内置的展开表达执行非常快速, 其耗时几乎可以忽略不计, 并且还可以避免字符处理程序调用带来的大量外部进程, 显著提高脚本的运行速度.&lt;/p&gt;
&lt;h4 id=&#34;命令输出置换&#34;&gt;命令输出置换&lt;/h4&gt;
&lt;p&gt;在 shell 脚本中, 命令置换语法通常有两种形式:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;` command`  双反引号     (尽量避免)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$(command)&lt;/code&gt; 美元符加圆括号    (推荐)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这里如果没有特殊需求, 请尽量使用美元符加圆括号的写法.&lt;/p&gt;
&lt;p&gt;旧式的双反引号语法有转译符号的特殊处理, 尤其是反斜杠自身的转译, 因此对于引用和字符转译处理并不友好, 如果脚本中的命令存在多层转译会导致可读性变差, 并且将增加 debug 以及维护难度.&lt;/p&gt;
&lt;h4 id=&#34;流程控制语句&#34;&gt;流程控制语句&lt;/h4&gt;
&lt;p&gt;下面两种写法的流程控制语句都是允许的:&lt;/p&gt;
&lt;p&gt;如, 将条件判断语句与后面的关键词写在一行的情形&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; condition &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#statements&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或, 将条件判断语句独立一行, 下一个关键词另起一行的写法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; condition &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#statements&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;两种都是允许的, 但是同一种风格的语句尽量不要来回变换, 在同一份脚本中, 请务必保持使用一种风格的写法.&lt;/p&gt;
&lt;p&gt;建议, 若脚本中的条件判断语句长度大多都不超过一行的情况下, 尽量使用第一种写法.&lt;/p&gt;
&lt;p&gt;示例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# for 关键词遍历&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; name in word ... ; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    list
&lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# C 式for循环&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0; i &amp;lt; 10; i++ &lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#statements&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# case 关键词遍历&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; word in
    pattern &lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
        ;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;esac&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# select 关键词遍历&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;select&lt;/span&gt; name &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; in word &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; ; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    list
&lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# while 条件循环&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; condition &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#statements&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# until 循环&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;until&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; condition &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#statements&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;文件路径&#34;&gt;文件路径&lt;/h4&gt;
&lt;p&gt;在脚本的文件路径处理中, 须遵循绝对路径优先原则.&lt;/p&gt;
&lt;p&gt;除了 git  等需要相对路径工作的程序外, 脚本中的位置处理应尽量使用绝对路径.&lt;/p&gt;
&lt;p&gt;示例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;script_dir&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;cd &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;dirname $0&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; pwd&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
script_dir&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;dirname &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;readlink -f $0 &lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;脚本优先使用脚本执行路径作为路径依据, 即 &lt;code&gt;$0&lt;/code&gt; 所在的位置.&lt;/p&gt;
&lt;p&gt;避免直接使用当前 shell 的执行路径, 即 &lt;code&gt;pwd&lt;/code&gt; 获取的路径.&lt;/p&gt;
&lt;h4 id=&#34;条件判别表达式&#34;&gt;条件判别表达式&lt;/h4&gt;
&lt;p&gt;条件判别表达式通常有以下 3 种常见写法:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;[[ condition ]]&lt;/code&gt; 双中括号    (推荐)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[ condition ]&lt;/code&gt;  单中括号&lt;/li&gt;
&lt;li&gt;&lt;code&gt;test condition&lt;/code&gt; 使用 test 判别表达式&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以上 3 种写法中, 进行变量值的判别时, 我们应优先使用 &lt;code&gt;[[ condition ]]&lt;/code&gt; 的写法, 因为双中括号可以有效避免条件表达式的过度展开, 这可以避免空变量导致的脚本异常.&lt;/p&gt;
&lt;p&gt;示例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 字符串为空&lt;/span&gt;
s&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; $s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;not match&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 结果异常&lt;/span&gt;
bash: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;: unary operator expected
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;双中括号&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 字符串为空&lt;/span&gt;
s&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; $b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;not match&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 结果正常&lt;/span&gt;
not match
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在含命令置换的条件判别表达式中, 如 &lt;code&gt;[[ $(func_name args) == &#39;str&#39; ]]&lt;/code&gt; , 此时, 双中括号将不会调用嵌套的多层函数, 如果表达式有多层函数嵌套(虽然也不建议这种写法), 需要使用单中括号才能将嵌套函数正常执行.&lt;/p&gt;
&lt;p&gt;注意, 部分 shell 并不支持 双中括号 语法, 因此请务必确保 &lt;code&gt;shebang&lt;/code&gt; 信息正确, 并使用正确的解释器执行(参考开头的说明).&lt;/p&gt;
&lt;h4 id=&#34;命令逻辑运算符&#34;&gt;命令逻辑运算符&lt;/h4&gt;
&lt;p&gt;shell 脚本中在单行命令长度较短, 判别逻辑简单的情况下 (不含使用 &lt;code&gt;elif&lt;/code&gt; 的情形), 使用命令的逻辑运算符可以简化判别逻辑, 使代码更加简洁, 推荐使用逻辑运算符代替 &lt;code&gt;if ... else ...&lt;/code&gt; 的写法.&lt;/p&gt;
&lt;p&gt;示例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 简单 if 判断&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; condition &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;&lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
    command1
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
    command2
&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 等价于&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; condition &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; command1 &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; command2

&lt;span style=&#34;color:#75715e&#34;&gt;# 连续 And&lt;/span&gt;
cmd1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; cmd2 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; cmd3

&lt;span style=&#34;color:#75715e&#34;&gt;# 连续 Or&lt;/span&gt;
cmd1 &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; cmd2 &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; cmd3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;命令逻辑运算符不能过度使用, 以下情形建议继续使用  &lt;code&gt;if ... else...&lt;/code&gt; 或其他流程控制写法.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;采用逻辑运算符后无法在一行内完成代码书写的情况&lt;/li&gt;
&lt;li&gt;单行代码包含不止一种逻辑运算符, 且数量超过3个的情况&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;函数定义&#34;&gt;函数定义&lt;/h4&gt;
&lt;p&gt;示例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 优先使用显示定义&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; func_name&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    local ret_value
    command
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; $ret_value
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 允许&lt;/span&gt;
func_name&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    local ret_value
    command
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; $ret_value
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 允许&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; func_name &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    local ret_value
    command
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; $ret_value
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;屏幕回显处理&#34;&gt;屏幕回显处理&lt;/h4&gt;
&lt;p&gt;在主动生成新的回显信息的时候通常有两种内置命令可供选择 &lt;code&gt;echo&lt;/code&gt; 与 &lt;code&gt;printf&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;示例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 显示带有红色加粗标识的错误提示&lt;/span&gt;
echo -e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\e[1;31m[ERROR] file not found \e[0m&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# 格式化输出&lt;/span&gt;
printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%-10s %-8s %-24s\n&amp;#34;&lt;/span&gt; id name url  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这两种方式中, 在简单的回显可以使用 &lt;code&gt;echo&lt;/code&gt; 进行处理, 但是格式化输出内容应优先使用 &lt;code&gt;printf&lt;/code&gt; , 其功能也更加丰富, 并且绝大多数 shell 的&lt;code&gt;printf&lt;/code&gt; 都与 C 程序库中 &lt;code&gt;printf()&lt;/code&gt; 相一致, 遵照统一的 &lt;code&gt;POSIX&lt;/code&gt; 规范, 脚本可以有较好的移植性.&lt;/p&gt;
&lt;p&gt;注意, 一般情况下如果可以通过 &lt;code&gt;prinf&lt;/code&gt; 格式化输出的内容, 应尽量避免手动使用空格进行回显的格式化.&lt;/p&gt;
&lt;p&gt;其他写法建议:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;处理并发任务时避免使用管道向循环结构体传值.&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;fd&lt;/code&gt; 控制并发处理时, 子进程异常处理需要保证读取的值被放回队列.&lt;/li&gt;
&lt;li&gt;当需要大量 &lt;code&gt;sed&lt;/code&gt; 与 &lt;code&gt;grep&lt;/code&gt; 组合才能完成字符处理的场景, 请考虑完全使用 &lt;code&gt;awk&lt;/code&gt; 完成任务.&lt;/li&gt;
&lt;li&gt;避免通过对 &lt;code&gt;ls&lt;/code&gt; 的输出处理来获取数据, &lt;code&gt;ls&lt;/code&gt; 的结果会带来不确定行, 并且与平台相关.&lt;/li&gt;
&lt;li&gt;尽量为编写的函数配置返回值, 以判断执行状况.&lt;/li&gt;
&lt;li&gt;外部调用与内置命令均能完成任务时, 内部命令优先.&lt;/li&gt;
&lt;li&gt;完成同样的内容请尽量减少使用的命令数, 如 &lt;code&gt;cat&lt;/code&gt; 加 管道的处理方式.&lt;/li&gt;
&lt;li&gt;如果有需要 source 子脚本才能正常执行的情况, 请考虑将它们写成函数.&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;mktemp&lt;/code&gt; 生成临时文件或者临时文件夹, 并在结束后清理.&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;/dev/null&lt;/code&gt; 过滤无用或其他不友好的输出信息.&lt;/li&gt;
&lt;li&gt;脚本中需要使用文件之前, 应先判断文件是否存在，否则应做好异常处理.&lt;/li&gt;
&lt;li&gt;会使用trap捕获信号，并在接受到终止信号时执行一些收尾工作&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;书写建议:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;成对内容的一次写出来,防止漏写.例如：{},[],&#39;&#39;,``,&amp;quot;&amp;quot;.&lt;/li&gt;
&lt;li&gt;[]中括号两端都要有空格,书写时可留出空格,然后退格书写内容.&lt;/li&gt;
&lt;li&gt;流程控制语句 (如, if [[ condition]] ;then command ; fi ) 一次书写完,在添加内容.&lt;/li&gt;
&lt;li&gt;使用专门的编辑器进行脚本编写(避免留下 windows 文本 BOM 头编码).&lt;/li&gt;
&lt;li&gt;使用静态编码检查工具.&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title>Redhat ceph-ansible 快速部署流程</title>
      <link>https://www.iterdaily.com/post/rhel-ceph-ansible-deployment/</link>
      <pubDate>Thu, 28 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.iterdaily.com/post/rhel-ceph-ansible-deployment/</guid>
      
        <description>&lt;p&gt;这份笔记主要用于介绍如何使用红帽 ceph-ansible 快速部署 ceph集群的操作参考, 这里的系统版本是  红帽 7.3(推荐的是7.5但是7.3也是可以的), ceph版本是 红帽ceph 3.1, 我们的总体流程是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;部署环境准备&lt;/li&gt;
&lt;li&gt;集群节点准备&lt;/li&gt;
&lt;li&gt;部署节点配置与检查
&lt;ol&gt;
&lt;li&gt;配置 ceph-ansible &lt;code&gt;all.yml&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;配置 ceph-ansible &lt;code&gt;osd.yml&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;配置 ansible 主机清单&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;执行部署&lt;/li&gt;
&lt;li&gt;检查部署&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;部署准备&#34;&gt;部署准备&lt;/h2&gt;
&lt;p&gt;在你部署前确认一下内容已经完备：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;选定的存储引擎
filestore / bluestore
默认：bluestore&lt;/li&gt;
&lt;li&gt;主机网络
集群网络 cluster_network
服务网络 public_network&lt;/li&gt;
&lt;li&gt;其他可能需要的网络 如,  管理网,  ipmi等&lt;/li&gt;
&lt;li&gt;数据盘与日志盘配置
&lt;ol&gt;
&lt;li&gt;使用数据盘自身分区做 journal,  无需特殊配置&lt;/li&gt;
&lt;li&gt;一SSD对多数据盘,  比例范围 1: 6~10（仅作建议）&lt;/li&gt;
&lt;li&gt;全闪存磁盘,  单盘OSD数建议数值:4,  请参考SSD规格与接口规格调整&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;权限与免密
可以配置单独的 ansible 用户,  但请配置管理员权限和有效的登录方式,
完成 user, password, sudoer, ssh等&lt;/li&gt;
&lt;li&gt;所使用 ceph 版本&lt;/li&gt;
&lt;li&gt;服务器 OS 版本&lt;/li&gt;
&lt;li&gt;时间同步服务器 (建议)&lt;/li&gt;
&lt;li&gt;机架信息与 crushmap 故障域方案 (建议)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这里有 &lt;a href=&#34;https://access.redhat.com/documentation/en-us/red_hat_ceph_storage/3/html/installation_guide_for_red_hat_enterprise_linux/deploying-red-hat-ceph-storage&#34;&gt;官方部署文档&lt;/a&gt;, 部署前可以仔细阅读以供参考.&lt;/p&gt;
&lt;h2 id=&#34;节点环境信息&#34;&gt;节点环境信息：&lt;/h2&gt;
&lt;p&gt;示例 ceph 集群节点&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;主机名&lt;/th&gt;
&lt;th&gt;管理IP&lt;/th&gt;
&lt;th&gt;存储网络IP&lt;/th&gt;
&lt;th&gt;角色&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;kvm-64&lt;/td&gt;
&lt;td&gt;192.168.17.64/22&lt;/td&gt;
&lt;td&gt;172.16.0.64/22&lt;/td&gt;
&lt;td&gt;mon, mgr, mds, radosgw, osd&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;kvm-65&lt;/td&gt;
&lt;td&gt;192.168.17.65/22&lt;/td&gt;
&lt;td&gt;172.16.0.65/22&lt;/td&gt;
&lt;td&gt;mon, mgr, mds, radosgw, osd&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;kvm-66&lt;/td&gt;
&lt;td&gt;192.168.17.66/22&lt;/td&gt;
&lt;td&gt;172.16.0.66/22&lt;/td&gt;
&lt;td&gt;mon, mgr, mds, radosgw, osd&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;环境配置与检查&#34;&gt;环境配置与检查&lt;/h2&gt;
&lt;h4 id=&#34;所有节点-环境准备&#34;&gt;所有节点-环境准备&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;网络检测, 请确保节点之间的
&lt;ol&gt;
&lt;li&gt;网络互通,  存储与服务网链路正常&lt;/li&gt;
&lt;li&gt;ssh登录状态正常&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;节点主机名配置 (请确认主机名配置正确,  部署后主机名请勿轻易改动)&lt;/li&gt;
&lt;li&gt;配置软件源
rhceph镜像本地软件源(建议)或其他软件源,  请确认ceph版本与依赖关系正常&lt;/li&gt;
&lt;li&gt;系统安全更新&lt;/li&gt;
&lt;li&gt;关闭 selinux 子系统&lt;/li&gt;
&lt;li&gt;防火墙状态检查&lt;/li&gt;
&lt;li&gt;检查磁盘健康状态, 清理磁盘.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;配置一下 &lt;code&gt;/etc/hosts&lt;/code&gt; 主机名解析, 如果不做解析也可以直接使用IP地址, 但是建议使用主机名解析, 相对而言利于维护.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
::1         localhost localhost.localdomain localhost6 localhost6.localdomain6

192.168.17.64 kvm-64
192.168.17.65 kvm-65
192.168.17.66 kvm-66

172.16.0.64 kvm-64
172.16.0.65 kvm-65
172.16.0.66 kvm-66
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;YUM 软件源配置参考&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ini&#34; data-lang=&#34;ini&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;[rhel-7-server-rpms]&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;rhel-7-server-rpms&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;baseurl&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;http://192.168.17.38/rhel-7-server-rpms&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;enabled&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;gpgcheck&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;[rhel-7-server-extras-rpms]&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;rhel-7-server-extras-rpms&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;baseurl&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;http://192.168.17.38/rhel-7-server-extras-rpms&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;enabled&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;gpgcheck&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;[rhceph-3-mon]&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;rhceph-3-mon&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;baseurl&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;http://192.168.17.38/rhceph-3.1-rhel-7-x86_64.iso/MON&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;enabled&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;gpgcheck&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;[rhceph-3-osd]&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;rhceph-3-osd&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;baseurl&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;http://192.168.17.38/rhceph-3.1-rhel-7-x86_64.iso/OSD&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;enabled&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;gpgcheck&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;[rhceph-3-tools]&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;rhceph-3-tools&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;baseurl&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;http://192.168.17.38/rhceph-3.1-rhel-7-x86_64.iso/Tools&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;enabled&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;gpgcheck&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;[rhel-7-server-iso-base]&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;rhel-7-server-iso-base&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;baseurl&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;http://192.168.17.38/rhel-server-7.5-x86_64-dvd.iso/&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;enabled&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;gpgcheck&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Firewalld 的防火墙配置参考, 测试环境选择关闭防火墙也可以.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# MON节点&lt;/span&gt;
firewall-cmd --zone&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;public --add-port&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;6789/tcp --permanent

&lt;span style=&#34;color:#75715e&#34;&gt;# OSD节点&lt;/span&gt;
firewall-cmd --zone&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;public --add-port&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;6800-7300/tcp --permanent

&lt;span style=&#34;color:#75715e&#34;&gt;# MGR节点&lt;/span&gt;
firewall-cmd --zone&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;public --add-port&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;6800-7300/tcp --permanent

&lt;span style=&#34;color:#75715e&#34;&gt;# MDS节点&lt;/span&gt;
firewall-cmd --zone&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;public --add-port&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;6800/tcp --permanent

&lt;span style=&#34;color:#75715e&#34;&gt;# RGW节点&lt;/span&gt;
firewall-cmd --zone&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;public --add-port&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;8080/tcp --permanent
firewall-cmd --zone&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;public --add-port&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;443/tcp --permanent

&lt;span style=&#34;color:#75715e&#34;&gt;# 重新加载防火墙规则&lt;/span&gt;
firewall-cmd --reload
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;数据磁盘清理的参考, 建议对使用的磁盘进行清理和检查, 这里使用脚本清理了所有的非系统盘.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
root_blk&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;lsblk -pr |grep boot$ |awk &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{print$1}&amp;#39;&lt;/span&gt; |sed &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;s/[0-9]//g&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;

blk_list&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;lsblk |grep -v $root_blk |grep ^s |awk &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{print$1}&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;

yum -y install gdisk

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i in $blk_list ;&lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;

    blk&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/dev/&lt;/span&gt;$i&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; $blk &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $root_blk &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$blk&lt;span style=&#34;color:#e6db74&#34;&gt; skiped&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;

    echo  sgdisk --zap-all $blk
    sgdisk --zap-all $blk

&lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其他诸如 ntp ssh 等等, 大家根据自己环境要求的差异配置上就好了.&lt;/p&gt;
&lt;h4 id=&#34;部署节点-配置部署选项&#34;&gt;部署节点-配置部署选项&lt;/h4&gt;
&lt;p&gt;首先需要安装部署工具, 这里的 ceph-ansible 安装包以及 iso文件等 是从内网源直接下载获取的, 但是要保持部署工具和ceph的版本相一致.&lt;/p&gt;
&lt;p&gt;注意, ceph-ansible 与 ceph 的版本通常是相互对应的, ceph3.1 需要 ceph-ansible3.1进行安装, 因为当依赖的ansible版本为2.5以下时才能保证 ceph-ansible3.1 中 playbook 语法正常解析.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#安装ceph-ansible软件包&lt;/span&gt;
yum -y install ceph-ansible

&lt;span style=&#34;color:#75715e&#34;&gt;#创建集群密钥存放目录&lt;/span&gt; 
mkdir ~/ceph-ansible-keys

&lt;span style=&#34;color:#75715e&#34;&gt;#create symbolic link&lt;/span&gt;
ln -s /usr/share/ceph-ansible/group_vars /etc/ansible/group_vars

&lt;span style=&#34;color:#75715e&#34;&gt;#navigate to ceph-ansible dir&lt;/span&gt;
cd /usr/share/ceph-ansible

&lt;span style=&#34;color:#75715e&#34;&gt;#将部署 ISO 存放到部署机 (这里从内网下载了红帽的ceph安装镜像文件)&lt;/span&gt;
mkdir /opt/ceph/
wget http://192.168.17.98/iso/rhceph-3.1-rhel-7-x86_64.iso -O /opt/ceph/rhceph-3.1-rhel-7-x86_64.iso

&lt;span style=&#34;color:#75715e&#34;&gt;#从模板创建配置文件&lt;/span&gt;
cp group_vars/all.yml.sample group_vars/all.yml
cp group_vars/osds.yml.sample group_vars/osds.yml
cp site.yml.sample site.yml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接下来要定义我们部署的 ceph 环境配置, 需要配置的文件主要有:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;group_vars/all.yml&lt;/code&gt;    全局配置&lt;/li&gt;
&lt;li&gt;&lt;code&gt;group_vars/osd.yml&lt;/code&gt;    osd 节点配置&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/etc/ansible/hosts&lt;/code&gt;    ansible 资产清单&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;至于 &lt;code&gt;site.yml&lt;/code&gt; 是控制部署流程 ansible 剧本, 通常情况下是不需要调整的, 使用默认配置即可.&lt;/p&gt;
&lt;p&gt;配置文件中的各种可选参数和写法格式等内容较多,  详细参数查阅参见 &lt;a href=&#34;https://access.redhat.com/documentation/en-us/red_hat_ceph_storage/3/html/installation_guide_for_red_hat_enterprise_linux/deploying-red-hat-ceph-storage#prerequisites_6&#34;&gt;官方配置说明文档&lt;/a&gt; , 这里我们给出一个快速部署的配置示例.&lt;/p&gt;
&lt;p&gt;配置 &lt;code&gt;group_vars/all.yml&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;---
&lt;span style=&#34;color:#66d9ef&#34;&gt;dummy&lt;/span&gt;:
&lt;span style=&#34;color:#66d9ef&#34;&gt;fetch_directory&lt;/span&gt;: ~/ceph-ansible-keys
&lt;span style=&#34;color:#66d9ef&#34;&gt;ceph_repository_type&lt;/span&gt;: iso
&lt;span style=&#34;color:#66d9ef&#34;&gt;ceph_origin&lt;/span&gt;: repository
&lt;span style=&#34;color:#66d9ef&#34;&gt;ceph_repository&lt;/span&gt;: rhcs
&lt;span style=&#34;color:#66d9ef&#34;&gt;ceph_rhcs_version&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;ceph_rhcs_iso_path&lt;/span&gt;: /opt/ceph/rhceph&lt;span style=&#34;color:#ae81ff&#34;&gt;-3.1&lt;/span&gt;-rhel&lt;span style=&#34;color:#ae81ff&#34;&gt;-7&lt;/span&gt;-x86_64.iso
&lt;span style=&#34;color:#66d9ef&#34;&gt;monitor_address_block&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;192.168&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;.17&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;.0&lt;/span&gt;/&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public_network&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;192.168&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;.17&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;.0&lt;/span&gt;/&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;cluster_network&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;172.16&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;.0&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;.0&lt;/span&gt;/&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;radosgw_address_block&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;192.168&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;.17&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;.0&lt;/span&gt;/&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里的网络信息可以根据自己的网络环境进行调整, 也可以都使用一个网络, 如&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;---
&lt;span style=&#34;color:#66d9ef&#34;&gt;dummy&lt;/span&gt;:
&lt;span style=&#34;color:#66d9ef&#34;&gt;fetch_directory&lt;/span&gt;: ~/ceph-ansible-keys
&lt;span style=&#34;color:#66d9ef&#34;&gt;ceph_repository_type&lt;/span&gt;: iso
&lt;span style=&#34;color:#66d9ef&#34;&gt;ceph_origin&lt;/span&gt;: repository
&lt;span style=&#34;color:#66d9ef&#34;&gt;ceph_repository&lt;/span&gt;: rhcs
&lt;span style=&#34;color:#66d9ef&#34;&gt;ceph_rhcs_version&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;ceph_rhcs_iso_path&lt;/span&gt;: /opt/ceph/rhceph&lt;span style=&#34;color:#ae81ff&#34;&gt;-3.1&lt;/span&gt;-rhel&lt;span style=&#34;color:#ae81ff&#34;&gt;-7&lt;/span&gt;-x86_64.iso
&lt;span style=&#34;color:#66d9ef&#34;&gt;monitor_address_block&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;192.168&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;.3&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;.0&lt;/span&gt;/&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public_network&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;192.168&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;.3&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;.0&lt;/span&gt;/&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;cluster_network&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;192.168&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;.3&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;.0&lt;/span&gt;/&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;radosgw_address_block&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;192.168&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;.3&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;.0&lt;/span&gt;/&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;除了可以使用在 &lt;code&gt;all.yml&lt;/code&gt; 指定子网的方式来配置网络,  也可以在 ansible 主机清单中指定具体的网卡对网络进行配置.&lt;/p&gt;
&lt;p&gt;配置 &lt;code&gt;group_vars/osd.yml&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;OSD 的配置是与机器的磁盘配置对应的, 这里有4 块固态硬盘作日志盘, 并且机器磁盘规格以及识别的名称都是一样的&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@kvm-64 ~&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# lsblk&lt;/span&gt;
NAME          MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT
sda             8:0    &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;   1.8T  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; disk
├─sda1          8:1    &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;   200M  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; part /boot/efi
├─sda2          8:2    &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;     1G  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; part /boot
└─sda3          8:3    &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;   1.8T  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; part
  ├─rhel-root 253:0    &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;    50G  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; lvm  /
  ├─rhel-swap 253:1    &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;     4G  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; lvm  &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;SWAP&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
  └─rhel-home 253:2    &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;   1.8T  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; lvm  /home
sdb             8:16   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;   1.8T  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; disk
sdc             8:32   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; 446.1G  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; disk &lt;span style=&#34;color:#75715e&#34;&gt;# ssd&lt;/span&gt;
sdd             8:48   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; 446.1G  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; disk &lt;span style=&#34;color:#75715e&#34;&gt;# ssd&lt;/span&gt;
sde             8:64   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; 446.1G  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; disk &lt;span style=&#34;color:#75715e&#34;&gt;# ssd&lt;/span&gt;
sdf             8:80   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; 446.1G  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; disk &lt;span style=&#34;color:#75715e&#34;&gt;# ssd&lt;/span&gt;
sdg             8:96   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;   1.8T  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; disk
sdh             8:112  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;   1.8T  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; disk
sdi             8:128  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;   1.8T  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; disk
sdj             8:144  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;   1.8T  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; disk
sdk             8:160  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;   1.8T  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; disk
sdl             8:176  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;   1.8T  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; disk
sdm             8:192  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;   1.8T  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; disk
sdn             8:208  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;   1.8T  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; disk
sdo             8:224  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;   1.8T  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; disk
sdp             8:240  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;   1.8T  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; disk
sdq            65:0    &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;   1.8T  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; disk
sdr            65:16   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;   1.8T  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; disk
sds            65:32   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;   1.8T  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; disk
sdt            65:48   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;   1.8T  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; disk
sdu            65:64   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;   1.8T  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; disk
sdv            65:80   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;   1.8T  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; disk
sdw            65:96   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;   1.8T  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; disk
sdx            65:112  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;   1.8T  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; disk
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;因为机器的磁盘配置统一, 这里就把日志盘和数据盘的配置都统一写在 &lt;code&gt;osd.yml&lt;/code&gt; 就可以了&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;---
&lt;span style=&#34;color:#66d9ef&#34;&gt;dummy&lt;/span&gt;:
&lt;span style=&#34;color:#66d9ef&#34;&gt;osd_scenario&lt;/span&gt;: non-collocated
&lt;span style=&#34;color:#66d9ef&#34;&gt;devices&lt;/span&gt;:
 - /dev/sdb
 - /dev/sdg
 - /dev/sdh
 - /dev/sdi
 - /dev/sdj
 - /dev/sdk
 - /dev/sdl
 - /dev/sdm
 - /dev/sdn
 - /dev/sdo
 - /dev/sdp
 - /dev/sdq
 - /dev/sdr
 - /dev/sds
 - /dev/sdt
 - /dev/sdu
 - /dev/sdv
 - /dev/sdw
 - /dev/sdx
&lt;span style=&#34;color:#66d9ef&#34;&gt;dedicated_devices&lt;/span&gt;:
 - /dev/sdc
 - /dev/sdd
 - /dev/sde
 - /dev/sdf

&lt;span style=&#34;color:#75715e&#34;&gt;# osd_scenario 可选值: &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# lvm    使用 bluestore lvm 的场景&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# collocated    没有ssd, osd磁盘自身的分区作journal 的场景&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# non-collocated    有独立 ssd 盘做 journal 磁盘 的场景&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;关于 &lt;code&gt;osd_scenario&lt;/code&gt; 三个选项的官方释义如下:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;collocated&lt;/code&gt; to use the same device for write-ahead logging and key/value data (BlueStore) or journal (FileStore) and OSD data&lt;/p&gt;
&lt;p&gt;&lt;code&gt;non-collocated&lt;/code&gt; to use a dedicated device, such as SSD or NVMe media to store write-ahead log and key/value data (BlueStore) or journal data (FileStore)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;lvm&lt;/code&gt; to use the Logical Volume Manager to store OSD data&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;编辑 &lt;code&gt;ansible&lt;/code&gt; 主机清单 &lt;code&gt;/etc/ansible/hosts&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ini&#34; data-lang=&#34;ini&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;[mons]&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;kvm-64&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;kvm-65&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;kvm-66&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;[osds]&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;kvm-64 osd_crush_location&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{ &amp;#39;root&amp;#39;: &amp;#39;default&amp;#39;, &amp;#39;rack&amp;#39;: &amp;#39;unknown-rack&amp;#39;, &amp;#39;host&amp;#39;: &amp;#39;kvm-64&amp;#39; }&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;kvm-65 osd_crush_location&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{ &amp;#39;root&amp;#39;: &amp;#39;default&amp;#39;, &amp;#39;rack&amp;#39;: &amp;#39;unknown-rack&amp;#39;, &amp;#39;host&amp;#39;: &amp;#39;kvm-65&amp;#39; }&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;kvm-66 osd_crush_location&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{ &amp;#39;root&amp;#39;: &amp;#39;default&amp;#39;, &amp;#39;rack&amp;#39;: &amp;#39;unknown-rack&amp;#39;, &amp;#39;host&amp;#39;: &amp;#39;kvm-66&amp;#39; }&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;[mgrs]&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;kvm-64&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;kvm-65&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;kvm-66&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;[rgws]&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;kvm-64&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;kvm-65&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;kvm-66&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;收集磁盘配置特殊环境&#34;&gt;收集磁盘配置(特殊环境)&lt;/h4&gt;
&lt;p&gt;如果碰到磁盘配置复杂的情况, 你的部署环境可能没有那么规整, 比如利用旧机器进行测试, 这时可能集群的磁盘配置并不统一, 这就需要一些额外的处理工作, 没有这种问题的同学可以跳过这个步骤. 如果磁盘配置并不统一, 那我们就不能将配置统一写在 &lt;code&gt;osd.yml&lt;/code&gt; 中了, 这时可以选择把 OSD 主机的磁盘配置写在主机清单中, 像下面这样&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ini&#34; data-lang=&#34;ini&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;...&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;[osds]&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;red-hat-ceph-55 devices&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[&amp;#39;/dev/sdb&amp;#39;, &amp;#39;/dev/sdc&amp;#39;, &amp;#39;/dev/sdd&amp;#39;, &amp;#39;/dev/sde&amp;#39;, &amp;#39;/dev/sdf&amp;#39;, &amp;#39;/dev/sdg&amp;#39;, &amp;#39;/dev/sdh&amp;#39;, &amp;#39;/dev/sdi&amp;#39;, &amp;#39;/dev/sdj&amp;#39;, &amp;#39;/dev/sdk&amp;#39;, &amp;#39;/dev/sdl&amp;#39;, &amp;#39;/dev/sdm&amp;#39;, &amp;#39;/dev/sdn&amp;#39;, &amp;#39;/dev/sdo&amp;#39;, &amp;#39;/dev/sdp&amp;#39;, &amp;#39;/dev/sdq&amp;#39;, &amp;#39;/dev/sdr&amp;#39;, &amp;#39;/dev/sds&amp;#39;, &amp;#39;/dev/sdt&amp;#39;, &amp;#39;/dev/sdu&amp;#39;]&amp;#34;  dedicated_devices=&amp;#34;[&amp;#39;/dev/sdv&amp;#39;, &amp;#39;/dev/sdw&amp;#39;, &amp;#39;/dev/sdx&amp;#39;]&amp;#34; osd_crush_location=&amp;#34;{ &amp;#39;root&amp;#39;: &amp;#39;default&amp;#39;, &amp;#39;rack&amp;#39;: &amp;#39;DD-F04-ZU-C04&amp;#39;, &amp;#39;host&amp;#39;: &amp;#39;red-hat-ceph-55&amp;#39; }&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果仅仅是某些机器多了或者少了一两个磁盘, 而主机上磁盘顺序统一还是比较好处理的, 例如使用一个 python 列表生成式来生成磁盘名的序列然后复制编辑即可,&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[&#39;/dev/sd&#39; + chr(x) for x in range(ord(&#39;b&#39;), ord(&#39;x&#39;)+1)]&lt;/code&gt; ,&lt;/p&gt;
&lt;p&gt;但是如果除了机器磁盘数量不一样, 连机械硬盘和固态硬盘的顺序也各自不太一样, 并且集群中主机数和磁盘数可能还都比较多, 这种情形下我们可以使用脚本收集磁盘信息然后进行汇总.&lt;/p&gt;
&lt;p&gt;这里我们用一个简单的脚本就可以统计主机上不同类型的磁盘了.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
root_blk&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;lsblk -pr |grep boot$ |awk &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{print$1}&amp;#39;&lt;/span&gt; |sed &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;s/[0-9]//g&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
blk_list&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;lsblk |grep -v $root_blk |grep ^s |awk &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{print$1}&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i in $blk_list ;&lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;

    blk&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/dev/&lt;/span&gt;$i&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; $blk &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $root_blk &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;# &lt;/span&gt;$HOSTNAME&lt;span style=&#34;color:#e6db74&#34;&gt; root blk &lt;/span&gt;$blk&lt;span style=&#34;color:#e6db74&#34;&gt; skiped&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;

    ROTA&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt; lsblk -pd -o NAME,ROTA $blk | awk &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/dev/{print$2}&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; $ROTA -eq &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;&lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#echo &amp;#34;$blk: hdd&amp;#34;&lt;/span&gt;
        data_blk&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;$blk&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;, &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; $ROTA -eq &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;&lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#echo &amp;#34;$blk: ssd&amp;#34;&lt;/span&gt;
        journal_blk&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; - &lt;/span&gt;$blk&lt;span style=&#34;color:#e6db74&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;

echo -e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;\n&lt;/span&gt;$HOSTNAME&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; -n $data_blk &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; echo -e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;devices=\&amp;#34;[&lt;/span&gt;$data_blk&lt;span style=&#34;color:#e6db74&#34;&gt;]\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; -n $journal_blk &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; echo -e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;dedicated_devices=\&amp;#34;[&lt;/span&gt;$journal_blk&lt;span style=&#34;color:#e6db74&#34;&gt;]\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;将脚本批量在集群执行就可以得到汇总信息, 如.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# cat kvm&lt;/span&gt;
192.168.17.64
192.168.17.65
192.168.17.66

&lt;span style=&#34;color:#75715e&#34;&gt;# for i in $( &amp;lt; ~/kvm);do cat blk_info.sh |ssh $i &amp;#39;cat - |bash&amp;#39; ;done&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# kvm-64 root blk /dev/sda skiped&lt;/span&gt;
kvm-64
devices&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[&amp;#39;/dev/sdb&amp;#39;, &amp;#39;/dev/sdg&amp;#39;, &amp;#39;/dev/sdh&amp;#39;, &amp;#39;/dev/sdi&amp;#39;, &amp;#39;/dev/sdj&amp;#39;, &amp;#39;/dev/sdk&amp;#39;, &amp;#39;/dev/sdl&amp;#39;, &amp;#39;/dev/sdm&amp;#39;, &amp;#39;/dev/sdn&amp;#39;, &amp;#39;/dev/sdo&amp;#39;, &amp;#39;/dev/sdp&amp;#39;, &amp;#39;/dev/sdq&amp;#39;, &amp;#39;/dev/sdr&amp;#39;, &amp;#39;/dev/sds&amp;#39;, &amp;#39;/dev/sdt&amp;#39;, &amp;#39;/dev/sdu&amp;#39;, &amp;#39;/dev/sdv&amp;#39;, &amp;#39;/dev/sdw&amp;#39;, &amp;#39;/dev/sdx&amp;#39;, ]&amp;#34;&lt;/span&gt;
dedicated_devices&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[&amp;#39;/dev/sdc&amp;#39;, &amp;#39;/dev/sdd&amp;#39;, &amp;#39;/dev/sde&amp;#39;, &amp;#39;/dev/sdf&amp;#39;, ]&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# kvm-65 root blk /dev/sda skiped&lt;/span&gt;

kvm-65
devices&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[&amp;#39;/dev/sdb&amp;#39;, &amp;#39;/dev/sdg&amp;#39;, &amp;#39;/dev/sdh&amp;#39;, &amp;#39;/dev/sdi&amp;#39;, &amp;#39;/dev/sdj&amp;#39;, &amp;#39;/dev/sdk&amp;#39;, &amp;#39;/dev/sdl&amp;#39;, &amp;#39;/dev/sdm&amp;#39;, &amp;#39;/dev/sdn&amp;#39;, &amp;#39;/dev/sdo&amp;#39;, &amp;#39;/dev/sdp&amp;#39;, &amp;#39;/dev/sdq&amp;#39;, &amp;#39;/dev/sdr&amp;#39;, &amp;#39;/dev/sds&amp;#39;, &amp;#39;/dev/sdt&amp;#39;, &amp;#39;/dev/sdu&amp;#39;, &amp;#39;/dev/sdv&amp;#39;, &amp;#39;/dev/sdw&amp;#39;, &amp;#39;/dev/sdx&amp;#39;, ]&amp;#34;&lt;/span&gt;
dedicated_devices&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[&amp;#39;/dev/sdc&amp;#39;, &amp;#39;/dev/sdd&amp;#39;, &amp;#39;/dev/sde&amp;#39;, &amp;#39;/dev/sdf&amp;#39;, ]&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# kvm-66 root blk /dev/sda skiped&lt;/span&gt;

kvm-66
devices&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[&amp;#39;/dev/sdb&amp;#39;, &amp;#39;/dev/sdg&amp;#39;, &amp;#39;/dev/sdh&amp;#39;, &amp;#39;/dev/sdi&amp;#39;, &amp;#39;/dev/sdj&amp;#39;, &amp;#39;/dev/sdk&amp;#39;, &amp;#39;/dev/sdl&amp;#39;, &amp;#39;/dev/sdm&amp;#39;, &amp;#39;/dev/sdn&amp;#39;, &amp;#39;/dev/sdo&amp;#39;, &amp;#39;/dev/sdp&amp;#39;, &amp;#39;/dev/sdq&amp;#39;, &amp;#39;/dev/sdr&amp;#39;, &amp;#39;/dev/sds&amp;#39;, &amp;#39;/dev/sdt&amp;#39;, &amp;#39;/dev/sdu&amp;#39;, &amp;#39;/dev/sdv&amp;#39;, &amp;#39;/dev/sdw&amp;#39;, &amp;#39;/dev/sdx&amp;#39;, ]&amp;#34;&lt;/span&gt;
dedicated_devices&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[&amp;#39;/dev/sdc&amp;#39;, &amp;#39;/dev/sdd&amp;#39;, &amp;#39;/dev/sde&amp;#39;, &amp;#39;/dev/sdf&amp;#39;, ]&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后将信息编辑到主机清单 &lt;code&gt;/etc/ansible/hosts&lt;/code&gt;  , 结果就会像下面这样&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ini&#34; data-lang=&#34;ini&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;[mons]&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;kvm-64&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;kvm-65&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;kvm-66&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;[osds]&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;kvm-64 devices&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[&amp;#39;/dev/sdb&amp;#39;, &amp;#39;/dev/sdg&amp;#39;, &amp;#39;/dev/sdh&amp;#39;, &amp;#39;/dev/sdi&amp;#39;, &amp;#39;/dev/sdj&amp;#39;, &amp;#39;/dev/sdk&amp;#39;, &amp;#39;/dev/sdl&amp;#39;, &amp;#39;/dev/sdm&amp;#39;, &amp;#39;/dev/sdn&amp;#39;, &amp;#39;/dev/sdo&amp;#39;, &amp;#39;/dev/sdp&amp;#39;, &amp;#39;/dev/sdq&amp;#39;, &amp;#39;/dev/sdr&amp;#39;, &amp;#39;/dev/sds&amp;#39;, &amp;#39;/dev/sdt&amp;#39;, &amp;#39;/dev/sdu&amp;#39;, &amp;#39;/dev/sdv&amp;#39;, &amp;#39;/dev/sdw&amp;#39;, &amp;#39;/dev/sdx&amp;#39;, ]&amp;#34; dedicated_devices=&amp;#34;[&amp;#39;/dev/sdc&amp;#39;, &amp;#39;/dev/sdd&amp;#39;, &amp;#39;/dev/sde&amp;#39;, &amp;#39;/dev/sdf&amp;#39;, ]&amp;#34;osd_crush_location=&amp;#34;{ &amp;#39;root&amp;#39;: &amp;#39;default&amp;#39;, &amp;#39;rack&amp;#39;: &amp;#39;unknown-rack&amp;#39;, &amp;#39;host&amp;#39;: &amp;#39;kvm-64&amp;#39; }&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;kvm-65 devices&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[&amp;#39;/dev/sdb&amp;#39;, &amp;#39;/dev/sdg&amp;#39;, &amp;#39;/dev/sdh&amp;#39;, &amp;#39;/dev/sdi&amp;#39;, &amp;#39;/dev/sdj&amp;#39;, &amp;#39;/dev/sdk&amp;#39;, &amp;#39;/dev/sdl&amp;#39;, &amp;#39;/dev/sdm&amp;#39;, &amp;#39;/dev/sdn&amp;#39;, &amp;#39;/dev/sdo&amp;#39;, &amp;#39;/dev/sdp&amp;#39;, &amp;#39;/dev/sdq&amp;#39;, &amp;#39;/dev/sdr&amp;#39;, &amp;#39;/dev/sds&amp;#39;, &amp;#39;/dev/sdt&amp;#39;, &amp;#39;/dev/sdu&amp;#39;, &amp;#39;/dev/sdv&amp;#39;, &amp;#39;/dev/sdw&amp;#39;, &amp;#39;/dev/sdx&amp;#39;, ]&amp;#34; dedicated_devices=&amp;#34;[&amp;#39;/dev/sdc&amp;#39;, &amp;#39;/dev/sdd&amp;#39;, &amp;#39;/dev/sde&amp;#39;, &amp;#39;/dev/sdf&amp;#39;, ]&amp;#34;osd_crush_location=&amp;#34;{ &amp;#39;root&amp;#39;: &amp;#39;default&amp;#39;, &amp;#39;rack&amp;#39;: &amp;#39;unknown-rack&amp;#39;, &amp;#39;host&amp;#39;: &amp;#39;kvm-65&amp;#39; }&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;kvm-66 devices&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[&amp;#39;/dev/sdb&amp;#39;, &amp;#39;/dev/sdg&amp;#39;, &amp;#39;/dev/sdh&amp;#39;, &amp;#39;/dev/sdi&amp;#39;, &amp;#39;/dev/sdj&amp;#39;, &amp;#39;/dev/sdk&amp;#39;, &amp;#39;/dev/sdl&amp;#39;, &amp;#39;/dev/sdm&amp;#39;, &amp;#39;/dev/sdn&amp;#39;, &amp;#39;/dev/sdo&amp;#39;, &amp;#39;/dev/sdp&amp;#39;, &amp;#39;/dev/sdq&amp;#39;, &amp;#39;/dev/sdr&amp;#39;, &amp;#39;/dev/sds&amp;#39;, &amp;#39;/dev/sdt&amp;#39;, &amp;#39;/dev/sdu&amp;#39;, &amp;#39;/dev/sdv&amp;#39;, &amp;#39;/dev/sdw&amp;#39;, &amp;#39;/dev/sdx&amp;#39;, ]&amp;#34; dedicated_devices=&amp;#34;[&amp;#39;/dev/sdc&amp;#39;, &amp;#39;/dev/sdd&amp;#39;, &amp;#39;/dev/sde&amp;#39;, &amp;#39;/dev/sdf&amp;#39;, ]&amp;#34;osd_crush_location=&amp;#34;{ &amp;#39;root&amp;#39;: &amp;#39;default&amp;#39;, &amp;#39;rack&amp;#39;: &amp;#39;unknown-rack&amp;#39;, &amp;#39;host&amp;#39;: &amp;#39;kvm-66&amp;#39; }&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;[mgrs]&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;kvm-64&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;kvm-65&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;kvm-66&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;[rgws]&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;kvm-64&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;kvm-65&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;kvm-66&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里的配置已经足够你部署一套可用的集群了,关于其他的磁盘和网络配置的不同写法等等内容就不再展开了, 配置细节请参考 &lt;a href=&#34;https://access.redhat.com/documentation/en-us/red_hat_ceph_storage/3/html/installation_guide_for_red_hat_enterprise_linux/deploying-red-hat-ceph-storage&#34;&gt;官方部署文档&lt;/a&gt; 给出的各种配置写法说明.&lt;/p&gt;
&lt;h4 id=&#34;部署节点-部署检查&#34;&gt;部署节点-部署检查&lt;/h4&gt;
&lt;p&gt;部署前, 首先要进行测试连通性&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# ansible all -m ping&lt;/span&gt;
kvm-66 | SUCCESS &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;changed&amp;#34;&lt;/span&gt;: false,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ping&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pong&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
kvm-64 | SUCCESS &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;changed&amp;#34;&lt;/span&gt;: false,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ping&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pong&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
kvm-65 | SUCCESS &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;changed&amp;#34;&lt;/span&gt;: false,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ping&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pong&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;执行部署&#34;&gt;执行部署&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 进入工作目录&lt;/span&gt;
cd /usr/share/ceph-ansible

&lt;span style=&#34;color:#75715e&#34;&gt;# 执行部署的 playbook&lt;/span&gt;
ansible-playbook site.yml

&lt;span style=&#34;color:#75715e&#34;&gt;# 部署过程的输出太长这里就不贴了&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;检查部署&#34;&gt;检查部署&lt;/h2&gt;
&lt;p&gt;部署完成后, 登录 monitor 节点查看集群状态&lt;/p&gt;
&lt;p&gt;查看 osd 节点状态&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;ceph osd tree
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;查看集群的状态&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# ceph -s&lt;/span&gt;
  cluster:
    id:     65ed06ed-b309-4bd6-84ae-0982190c383b
    health: HEALTH_WARN
            too few PGs per OSD &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &amp;lt; min 30&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
            clock skew detected on mon.kvm-65, mon.kvm-66

  services:
    mon: &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; daemons, quorum kvm-64,kvm-65,kvm-66
    mgr: kvm-64&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;active&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, standbys: kvm-66, kvm-65
    osd: &lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt; osds: &lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt; up, &lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt; in
    rgw: &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; daemons active

  data:
    pools:   &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; pools, &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt; pgs
    objects: &lt;span style=&#34;color:#ae81ff&#34;&gt;190&lt;/span&gt; objects, &lt;span style=&#34;color:#ae81ff&#34;&gt;2822&lt;/span&gt; bytes
    usage:   &lt;span style=&#34;color:#ae81ff&#34;&gt;6262&lt;/span&gt; MB used, &lt;span style=&#34;color:#ae81ff&#34;&gt;103&lt;/span&gt; TB / &lt;span style=&#34;color:#ae81ff&#34;&gt;103&lt;/span&gt; TB avail
    pgs:     &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt; active+clean

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里的 pg 数为 64, 默认是 3 副本, osd 数量是 57,  每个 osd 上均分的 pg 数量为 &lt;code&gt;32/57 *3&lt;/code&gt;, 显然, 这个数量太小了.&lt;/p&gt;
&lt;p&gt;查看 &lt;code&gt;pg&lt;/code&gt; 数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i in &lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;rados lspools&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;;&lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; ceph osd pool get $i pg_num ;&lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;修改一下存储池 &lt;code&gt;pg&lt;/code&gt; 和 &lt;code&gt;pgp&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# for i in `rados lspools`;do ceph osd pool set $i pg_num 256;done&lt;/span&gt;
set pool &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; pg_num to &lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;
set pool &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; pg_num to &lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;
set pool &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; pg_num to &lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;
set pool &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; pg_num to &lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# for i in `rados lspools`;do ceph osd pool set $i pgp_num 256;done&lt;/span&gt;
set pool &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; pgp_num to &lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;
set pool &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; pgp_num to &lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;
set pool &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; pgp_num to &lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;
set pool &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; pgp_num to &lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;调整完 &lt;code&gt;pg&lt;/code&gt; 数量集群均衡数据需要稍等一会&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# ceph -s&lt;/span&gt;
  cluster:
    id:     65ed06ed-b309-4bd6-84ae-0982190c383b
    health: HEALTH_WARN
            40/636 objects misplaced &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;6.289%&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
            Reduced data availability: &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt; pgs inactive, &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt; pgs peering
            Degraded data redundancy: 5/636 objects degraded &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0.786%&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; pgs degraded
            clock skew detected on mon.kvm-65, mon.kvm-66

  services:
    mon: &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; daemons, quorum kvm-64,kvm-65,kvm-66
    mgr: kvm-64&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;active&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, standbys: kvm-66, kvm-65
    osd: &lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt; osds: &lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt; up, &lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt; in; &lt;span style=&#34;color:#ae81ff&#34;&gt;149&lt;/span&gt; remapped pgs
    rgw: &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; daemons active

  data:
    pools:   &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; pools, &lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt; pgs
    objects: &lt;span style=&#34;color:#ae81ff&#34;&gt;212&lt;/span&gt; objects, &lt;span style=&#34;color:#ae81ff&#34;&gt;2822&lt;/span&gt; bytes
    usage:   &lt;span style=&#34;color:#ae81ff&#34;&gt;6429&lt;/span&gt; MB used, &lt;span style=&#34;color:#ae81ff&#34;&gt;103&lt;/span&gt; TB / &lt;span style=&#34;color:#ae81ff&#34;&gt;103&lt;/span&gt; TB avail
    pgs:     13.672% pgs not active
             5/636 objects degraded &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0.786%&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
             40/636 objects misplaced &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;6.289%&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
             &lt;span style=&#34;color:#ae81ff&#34;&gt;861&lt;/span&gt; active+clean
             &lt;span style=&#34;color:#ae81ff&#34;&gt;73&lt;/span&gt;  peering
             &lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;  remapped+peering
             &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;  active+remapped+backfill_wait
             &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;   activating+degraded
             &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;   activating
             &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;   active+remapped+backfilling

  io:
    recovery: &lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt; B/s, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; objects/s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里的时间同步还是出了一点问题, 节点时间存在偏移, 向时间同步服务器同步时间即可.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  cluster:
    id:     65ed06ed-b309-4bd6-84ae-0982190c383b
    health: HEALTH_WARN
            clock skew detected on mon.kvm-65

  services:
    mon: &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; daemons, quorum kvm-64,kvm-65,kvm-66
    mgr: kvm-64&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;active&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, standbys: kvm-66, kvm-65
    osd: &lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt; osds: &lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt; up, &lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt; in
    rgw: &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; daemons active

  data:
    pools:   &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; pools, &lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt; pgs
    objects: &lt;span style=&#34;color:#ae81ff&#34;&gt;222&lt;/span&gt; objects, &lt;span style=&#34;color:#ae81ff&#34;&gt;2822&lt;/span&gt; bytes
    usage:   &lt;span style=&#34;color:#ae81ff&#34;&gt;6584&lt;/span&gt; MB used, &lt;span style=&#34;color:#ae81ff&#34;&gt;103&lt;/span&gt; TB / &lt;span style=&#34;color:#ae81ff&#34;&gt;103&lt;/span&gt; TB avail
    pgs:     &lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt; active+clean
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;集群状态正常.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# ceph -s&lt;/span&gt;
  cluster:
    id:     65ed06ed-b309-4bd6-84ae-0982190c383b
    health: HEALTH_OK

  services:
    mon: &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; daemons, quorum kvm-64,kvm-65,kvm-66
    mgr: kvm-64&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;active&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, standbys: kvm-66, kvm-65
    osd: &lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt; osds: &lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt; up, &lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt; in
    rgw: &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; daemons active

  data:
    pools:   &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; pools, &lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt; pgs
    objects: &lt;span style=&#34;color:#ae81ff&#34;&gt;222&lt;/span&gt; objects, &lt;span style=&#34;color:#ae81ff&#34;&gt;2822&lt;/span&gt; bytes
    usage:   &lt;span style=&#34;color:#ae81ff&#34;&gt;6584&lt;/span&gt; MB used, &lt;span style=&#34;color:#ae81ff&#34;&gt;103&lt;/span&gt; TB / &lt;span style=&#34;color:#ae81ff&#34;&gt;103&lt;/span&gt; TB avail
    pgs:     &lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt; active+clean
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;部署完成.&lt;/p&gt;
&lt;p&gt;创建存储池&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; pool in volumes backups images gnocchi vms ;&lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    ceph osd pool create &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;pool&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;-1 &lt;span style=&#34;color:#ae81ff&#34;&gt;128&lt;/span&gt;
    ceph osd pool create &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;pool&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;-2 &lt;span style=&#34;color:#ae81ff&#34;&gt;128&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# 结果&lt;/span&gt;
pool &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;volumes-1&amp;#39;&lt;/span&gt; created
pool &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;volumes-2&amp;#39;&lt;/span&gt; created
pool &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;backups-1&amp;#39;&lt;/span&gt; created
pool &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;backups-2&amp;#39;&lt;/span&gt; created
pool &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;images-1&amp;#39;&lt;/span&gt; created
pool &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;images-2&amp;#39;&lt;/span&gt; created
pool &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;gnocchi-1&amp;#39;&lt;/span&gt; created
pool &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;gnocchi-2&amp;#39;&lt;/span&gt; created
pool &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;vms-1&amp;#39;&lt;/span&gt; created
pool &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;vms-2&amp;#39;&lt;/span&gt; created
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;更多 ceph 使用维护,  参见 &lt;a href=&#34;https://docs.ceph.com/docs/master/rados/operations/&#34;&gt;ceph社区官方的运维文档&lt;/a&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Markdown 数学公式 Preview</title>
      <link>https://www.iterdaily.com/post/markdown-math-preview/</link>
      <pubDate>Mon, 04 Mar 2019 16:01:23 +0800</pubDate>
      
      <guid>https://www.iterdaily.com/post/markdown-math-preview/</guid>
      
        <description>&lt;p&gt;&lt;a href=&#34;https://www.intmath.com/cg5/katex-mathjax-comparison.php&#34;&gt;KaTeX and MathJax Comparison Demo, currently processed as KaTex&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;repeating-fractions&#34;&gt;Repeating fractions&lt;/h2&gt;
&lt;p&gt;$$
\frac{1}{\Bigl(\sqrt{\phi \sqrt{5}}-\phi\Bigr) e^{\frac25 \pi}} \equiv 1+\frac{e^{-2\pi}} {1+\frac{e^{-4\pi}} {1+\frac{e^{-6\pi}} {1+\frac{e^{-8\pi}} {1+\cdots} } } }
$$&lt;/p&gt;
&lt;h2 id=&#34;summation-notation&#34;&gt;Summation notation&lt;/h2&gt;
&lt;p&gt;$$
\left( \sum_{k=1}^n a_k b_k \right)^2 \leq \left( \sum_{k=1}^n a_k^2 \right) \left( \sum_{k=1}^n b_k^2 \right)
$$&lt;/p&gt;
&lt;h2 id=&#34;sum-of-a-series&#34;&gt;Sum of a Series&lt;/h2&gt;
&lt;p&gt;I broke up the next two examples into separate lines so it behaves better on a mobile phone. That&amp;rsquo;s why they include \displaystyle.&lt;/p&gt;
&lt;p&gt;$$
\displaystyle\sum_{i=1}^{k+1}i
$$&lt;/p&gt;
&lt;p&gt;$$
\displaystyle= \left(\sum_{i=1}^{k}i\right) +(k+1)
$$&lt;/p&gt;
&lt;p&gt;$$
\displaystyle= \frac{k(k+1)}{2}+k+1
$$&lt;/p&gt;
&lt;p&gt;$$
\displaystyle= \frac{k(k+1)+2(k+1)}{2}
$$&lt;/p&gt;
&lt;p&gt;$$
\displaystyle= \frac{(k+1)(k+2)}{2}
$$&lt;/p&gt;
&lt;p&gt;$$
\displaystyle= \frac{(k+1)((k+1)+1)}{2}
$$&lt;/p&gt;
&lt;h2 id=&#34;product-notation&#34;&gt;Product notation&lt;/h2&gt;
&lt;p&gt;$$
\displaystyle 1 + \frac{q^2}{(1-q)}+\frac{q^6}{(1-q)(1-q^2)}+\cdots = \displaystyle \prod_{j=0}^{\infty}\frac{1}{(1-q^{5j+2})(1-q^{5j+3})}, \displaystyle\text{ for }\lvert q\rvert &amp;lt; 1.
$$&lt;/p&gt;
&lt;h2 id=&#34;inline-math&#34;&gt;Inline math&lt;/h2&gt;
&lt;p&gt;And here is some in-line math: $$ k_{n+1} = n^2 + k_n^2 - k_{n-1} $$ , followed by some more text.&lt;/p&gt;
&lt;h2 id=&#34;greek-letters&#34;&gt;Greek Letters&lt;/h2&gt;
&lt;p&gt;$$
\Gamma\ \Delta\ \Theta\ \Lambda\ \Xi\ \Pi\ \Sigma\ \Upsilon\ \Phi\ \Psi\ \Omega
\alpha\ \beta\ \gamma\ \delta\ \epsilon\ \zeta\ \eta\ \theta\ \iota\ \kappa\ \lambda\ \mu\ \nu\ \xi \ \omicron\ \pi\ \rho\ \sigma\ \tau\ \upsilon\ \phi\ \chi\ \psi\ \omega\ \varepsilon\ \vartheta\ \varpi\ \varrho\ \varsigma\ \varphi
$$&lt;/p&gt;
&lt;h2 id=&#34;arrows&#34;&gt;Arrows&lt;/h2&gt;
&lt;p&gt;$$
\gets\ \to\ \leftarrow\ \rightarrow\ \uparrow\ \Uparrow\ \downarrow\ \Downarrow\ \updownarrow\ \Updownarrow
$$&lt;/p&gt;
&lt;p&gt;$$
\Leftarrow\ \Rightarrow\ \leftrightarrow\ \Leftrightarrow\ \mapsto\ \hookleftarrow
\leftharpoonup\ \leftharpoondown\ \rightleftharpoons\ \longleftarrow\ \Longleftarrow\ \longrightarrow
$$&lt;/p&gt;
&lt;p&gt;$$
\Longrightarrow\ \longleftrightarrow\ \Longleftrightarrow\ \longmapsto\ \hookrightarrow\ \rightharpoonup
$$&lt;/p&gt;
&lt;p&gt;$$
\rightharpoondown\ \leadsto\ \nearrow\ \searrow\ \swarrow\ \nwarrow
$$&lt;/p&gt;
&lt;h2 id=&#34;symbols&#34;&gt;Symbols&lt;/h2&gt;
&lt;p&gt;$$
\surd\ \barwedge\ \veebar\ \odot\ \oplus\ \otimes\ \oslash\ \circledcirc\ \boxdot\ \bigtriangleup
$$&lt;/p&gt;
&lt;p&gt;$$
\bigtriangledown\ \dagger\ \diamond\ \star\ \triangleleft\ \triangleright\ \angle\ \infty\ \prime\ \triangle
$$&lt;/p&gt;
&lt;h2 id=&#34;calculus&#34;&gt;Calculus&lt;/h2&gt;
&lt;p&gt;$$
\int u \frac{dv}{dx},dx=uv-\int \frac{du}{dx}v,dx
$$&lt;/p&gt;
&lt;p&gt;$$
f(x) = \int_{-\infty}^\infty \hat f(\xi),e^{2 \pi i \xi x}
$$&lt;/p&gt;
&lt;p&gt;$$
\oint \vec{F} \cdot d\vec{s}=0
$$&lt;/p&gt;
&lt;h2 id=&#34;lorenz-equations&#34;&gt;Lorenz Equations&lt;/h2&gt;
&lt;p&gt;$$
\begin{aligned} \dot{x} &amp;amp; = \sigma(y-x) \ \dot{y} &amp;amp; = \rho x - y - xz \ \dot{z} &amp;amp; = -\beta z + xy \end{aligned}
$$&lt;/p&gt;
&lt;h2 id=&#34;cross-product&#34;&gt;Cross Product&lt;/h2&gt;
&lt;p&gt;This works in KaTeX, but the separation of fractions in this environment is not so good.&lt;/p&gt;
&lt;p&gt;$$
\mathbf{V}_1 \times \mathbf{V}_2 = \begin{vmatrix} \mathbf{i} &amp;amp; \mathbf{j} &amp;amp; \mathbf{k} \ \frac{\partial X}{\partial u} &amp;amp; \frac{\partial Y}{\partial u} &amp;amp; 0 \ \frac{\partial X}{\partial v} &amp;amp; \frac{\partial Y}{\partial v} &amp;amp; 0 \end{vmatrix}
$$&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a workaround: make the fractions smaller with an extra class that targets the spans with &amp;ldquo;mfrac&amp;rdquo; class (makes no difference in the MathJax case):&lt;/p&gt;
&lt;p&gt;$$
\mathbf{V}_1 \times \mathbf{V}_2 = \begin{vmatrix} \mathbf{i} &amp;amp; \mathbf{j} &amp;amp; \mathbf{k} \ \frac{\partial X}{\partial u} &amp;amp; \frac{\partial Y}{\partial u} &amp;amp; 0 \ \frac{\partial X}{\partial v} &amp;amp; \frac{\partial Y}{\partial v} &amp;amp; 0 \end{vmatrix}
$$&lt;/p&gt;
&lt;h2 id=&#34;accents&#34;&gt;Accents&lt;/h2&gt;
&lt;p&gt;$$
\hat{x}\ \vec{x}\ \ddot{x}
$$&lt;/p&gt;
&lt;h2 id=&#34;stretchy-brackets&#34;&gt;Stretchy brackets&lt;/h2&gt;
&lt;p&gt;$$
\left(\frac{x^2}{y^3}\right)
$$&lt;/p&gt;
&lt;h2 id=&#34;evaluation-at-limits&#34;&gt;Evaluation at limits&lt;/h2&gt;
&lt;p&gt;$$
\left.\frac{x^3}{3}\right|_0^1
$$&lt;/p&gt;
&lt;h2 id=&#34;case-definitions&#34;&gt;Case definitions&lt;/h2&gt;
&lt;p&gt;$$
f(n) = \begin{cases} \frac{n}{2}, &amp;amp; \text{if } n\text{ is even} \ 3n+1, &amp;amp; \text{if } n\text{ is odd} \end{cases}
$$&lt;/p&gt;
&lt;h2 id=&#34;maxwells-equations&#34;&gt;&amp;ldquo;Maxwell&amp;rsquo;s Equations&amp;rdquo;&lt;/h2&gt;
&lt;p&gt;$$
\begin{aligned} \nabla \times \vec{\mathbf{B}} -, \frac1c, \frac{\partial\vec{\mathbf{E}}}{\partial t} &amp;amp; = \frac{4\pi}{c}\vec{\mathbf{j}} \ \nabla \cdot \vec{\mathbf{E}} &amp;amp; = 4 \pi \rho \ \nabla \times \vec{\mathbf{E}}, +, \frac1c, \frac{\partial\vec{\mathbf{B}}}{\partial t} &amp;amp; = \vec{\mathbf{0}} \ \nabla \cdot \vec{\mathbf{B}} &amp;amp; = 0 \end{aligned}
$$&lt;/p&gt;
&lt;p&gt;These equations are quite cramped. We can add vertical spacing using (for example) [1em] after each line break (\). as you can see here:&lt;/p&gt;
&lt;p&gt;$$
\begin{aligned} \nabla \times \vec{\mathbf{B}} -, \frac1c, \frac{\partial\vec{\mathbf{E}}}{\partial t} &amp;amp; = \frac{4\pi}{c}\vec{\mathbf{j}} \[1em] \nabla \cdot \vec{\mathbf{E}} &amp;amp; = 4 \pi \rho \[0.5em] \nabla \times \vec{\mathbf{E}}, +, \frac1c, \frac{\partial\vec{\mathbf{B}}}{\partial t} &amp;amp; = \vec{\mathbf{0}} \[1em] \nabla \cdot \vec{\mathbf{B}} &amp;amp; = 0 \end{aligned}
$$&lt;/p&gt;
&lt;h2 id=&#34;statistics&#34;&gt;Statistics&lt;/h2&gt;
&lt;p&gt;Definition of combination:&lt;/p&gt;
&lt;p&gt;$$
\frac{n!}{k!(n-k)!} = {^n}C_k
{n \choose k}
$$&lt;/p&gt;
&lt;h2 id=&#34;fractions-on-fractions&#34;&gt;Fractions on fractions&lt;/h2&gt;
&lt;p&gt;$$
\frac{\frac{1}{x}+\frac{1}{y}}{y-z}
$$&lt;/p&gt;
&lt;h2 id=&#34;n-th-root&#34;&gt;n-th root&lt;/h2&gt;
&lt;p&gt;$$
\sqrt[n]{1+x+x^2+x^3+\ldots}
$$&lt;/p&gt;
&lt;h2 id=&#34;matrices&#34;&gt;Matrices&lt;/h2&gt;
&lt;p&gt;$$
\begin{pmatrix} a_{11} &amp;amp; a_{12} &amp;amp; a_{13}\ a_{21} &amp;amp; a_{22} &amp;amp; a_{23}\ a_{31} &amp;amp; a_{32} &amp;amp; a_{33} \end{pmatrix}
\begin{bmatrix} 0 &amp;amp; \cdots &amp;amp; 0 \ \vdots &amp;amp; \ddots &amp;amp; \vdots \ 0 &amp;amp; \cdots &amp;amp; 0 \end{bmatrix}
$$&lt;/p&gt;
&lt;h2 id=&#34;punctuation&#34;&gt;Punctuation&lt;/h2&gt;
&lt;p&gt;$$
f(x) = \sqrt{1+x} \quad (x \ge -1)
f(x) \sim x^2 \quad (x\to\infty)
$$&lt;/p&gt;
&lt;p&gt;Now with punctuation:&lt;/p&gt;
&lt;p&gt;$$
f(x) = \sqrt{1+x}, \quad x \ge -1
f(x) \sim x^2, \quad x\to\infty
$$&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-viz-dot&#34; data-lang=&#34;viz-dot&#34;&gt;    digraph g { a -&amp;gt; b;}
&lt;/code&gt;&lt;/pre&gt;</description>
      
    </item>
    
    <item>
      <title>Nginx &#43; frp 部署和配置 web 服务的内网穿透</title>
      <link>https://www.iterdaily.com/post/hugo_nginx_proxy_setup/</link>
      <pubDate>Sat, 02 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.iterdaily.com/post/hugo_nginx_proxy_setup/</guid>
      
        <description>&lt;h2 id=&#34;内网穿透介绍&#34;&gt;内网穿透介绍&lt;/h2&gt;
&lt;p&gt;通常除了公司干活的企业服务器环境, 很多人都会在自己的闲置电脑或者老机器上搭建很多有意思的实验性服务练练手, 但是因为网络原因也只能在家里访问, 使用上还是很不方便的, 网上有很多 DDNS和 内网穿透的玩法和教程, 这里我也分享一种利用 &lt;code&gt;nginx&lt;/code&gt; + &lt;code&gt;frp&lt;/code&gt; 将内网服务部署到公网的操作方法, frp 提供穿透 NAT和防火墙的网络能力, 而 nginx 对 web 服务代理可以实现灵活的服务管理, 这种思路可以有很多其他玩法, 这里只是其中一种实践演示, 仅供大家参考.&lt;/p&gt;
&lt;p&gt;假设你已经了解基础的网络知识, 并且指导典型的web服务的搭建, 这里分享的是我们要怎么做把自己在内网环境的服务部署(转发)到公网上.&lt;/p&gt;
&lt;p&gt;这里的云主机是一台具有公网IP的Linux设备或者云服务器, 方案是将本地的服务通过 frp 透转发到云主机进行内网穿透, 云主机上当然也可以部署服务, 不过为了节省资源这里云主机只有很少量服务, 主要还是用来运行 nginx 作为前端代理服务, 如果有ssl证书也可以在nginx代理层进行配置, 这样站点就可以支持https了.&lt;/p&gt;
&lt;p&gt;先来一张整体的服务架构图:
&lt;img src=&#34;./hugo_nginx_proxy_setup1.svg&#34; alt=&#34;nginx+frp&#34;&gt;&lt;/p&gt;
&lt;p&gt;一般代理服务都会根据后端的服务协议类型对应进行有区分的配置, 这里 nginx 主要代理四层 TCP/UDP 和七层的 http 协议的服务为主, 这里以 nginx 和 web 服务为例子进行分享, 如果你熟悉其他代理软件(比如HAproxy)也可以将 nginx 换成别的你更顺手的工具.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;其实这种方案除了基础设施部分灵活性不足, 对于软件服务的注册,部署和更新等等, 这些动作都是可以通过 CI/CD 流水线完成自动化配置的, 但是我们这里先介绍一遍手动配置的基本流程.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;step-1-准备公网ip&#34;&gt;step 1. 准备公网IP&lt;/h2&gt;
&lt;p&gt;将内网服务部署到互联网,你需要有一台具备公网IP的主机, 不然外部是无法穿透NAT设备与防火墙访问到你的, 这里有两种常见的解决方案可选:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;你可以购买一台云主机, 云主机都会附送公网IP, 如果带宽不够还可以另外购买弹性公网IP.&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;多留意促销折扣云主机还是可以买的, 要是不差钱还喜欢折腾的还可以选多家云服务商各买一台(或几台)搞个多云灾备那就更安全了, 甚至支撑一些小流量的对公服务(比如搭一个小团队自己的分布式服务环境)也就可以嗨起来了.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;
&lt;p&gt;如果你不想购买云主机, 你可以试着向你家的宽带运营商(比如移动宽带, 一般打客服电话办理即可)申请固定公网IP, 不过有些地区的运营商并不提供固定IP, 这时候就只能买云主机了.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果购买了云主机千万记得安全问题一定要做到位, 配置 ssh 等服务使用更加严格的访问控制, 限制连接数, 限制重试次数, 自动断开等等, 最好是仅允许密钥进行远程登录并配置允许访问的白名单, 关闭所有不必要的服务和端口的安全组, 系统用户也务必使用强密码以防万一.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;本地服务也要加强安全防护, 后续暴露到公网的本地服务安全策略不要太大意, 对于安全问题原则上宁可信其有不可信其无.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;step-2-准备域名可选&#34;&gt;step 2. 准备域名(可选)&lt;/h2&gt;
&lt;p&gt;其实有公网IP已经可以达到暴露服务到公网访问的目的了, 只是使用域名会更加方便, 不然服务不方便被搜索引擎检索, 除了你自己别人一般都是看不到的, 每次都打IP才能访问不够方便, 来来回回记数字分享起来也怪麻烦的.&lt;/p&gt;
&lt;p&gt;如果没有域名的情况下, 除了访问的问题, 有些本地服务的配置也需要跟你的固定IP地址绑定上, 如果IP是发生变动了(比如搬家,换网)配置就也全部要重新改动, 架构灵活性鲁棒性都太差, 如果有域名这个问题就可以通过修改DNS记录来搞定, 使用和配置上都方便很多.&lt;/p&gt;
&lt;p&gt;有了域名, 把域名解析到你的固定公网IP上, 就可以通过域名来访问站点了, 一般购买域名通常都是赠送域名解析服务的, 只是国内的域名通常需要备案, 如果购买了云主机通常云服务商也会提供代理备案服务, 填写个人资料然后等待客服核实, 最后再等待N个工作日就完成备案了.&lt;/p&gt;
&lt;p&gt;后面的例子里面用到的域名我都已经配置解析到我的阿里云主机上了, 因此配置文件里面就不用写IP地址了.&lt;/p&gt;
&lt;h2 id=&#34;step-3-部署配置-nginx&#34;&gt;step 3. 部署配置 nginx&lt;/h2&gt;
&lt;p&gt;nginx 的部署就不讲了, 直接看看配置吧.&lt;/p&gt;
&lt;h3 id=&#34;主配置文件&#34;&gt;主配置文件&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;/etc/nginx/nginx.conf&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-nginx&#34; data-lang=&#34;nginx&#34;&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;user&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;nginx&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;worker_processes&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;auto&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;error_log&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/var/log/nginx/error.log&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;pid&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/run/nginx.pid&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;include&lt;/span&gt; /usr/share/nginx/modules/*.conf;
&lt;span style=&#34;color:#66d9ef&#34;&gt;events&lt;/span&gt; {
    &lt;span style=&#34;color:#f92672&#34;&gt;worker_connections&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt;;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;stream&lt;/span&gt; {
    &lt;span style=&#34;color:#f92672&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/etc/nginx/tcp.d/*.conf&lt;/span&gt;;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;http&lt;/span&gt; {
    &lt;span style=&#34;color:#f92672&#34;&gt;log_format&lt;/span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;main&lt;/span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;$remote_addr &lt;span style=&#34;color:#e6db74&#34;&gt;-&lt;/span&gt; $remote_user &lt;span style=&#34;color:#e6db74&#34;&gt;[&lt;/span&gt;$time_local] &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$request&amp;#34; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;
                      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;$status $body_bytes_sent &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$http_referer&amp;#34; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;
                      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#34;&lt;/span&gt;$http_user_agent&amp;#34; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$http_x_forwarded_for&amp;#34;&amp;#39;;
    &lt;span style=&#34;color:#f92672&#34;&gt;access_log&lt;/span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;/var/log/nginx/access.log&lt;/span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;main&lt;/span&gt;;
    &lt;span style=&#34;color:#f92672&#34;&gt;sendfile&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;on&lt;/span&gt;;
    &lt;span style=&#34;color:#f92672&#34;&gt;tcp_nopush&lt;/span&gt;          &lt;span style=&#34;color:#66d9ef&#34;&gt;on&lt;/span&gt;;
    &lt;span style=&#34;color:#f92672&#34;&gt;tcp_nodelay&lt;/span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;on&lt;/span&gt;;
    &lt;span style=&#34;color:#f92672&#34;&gt;keepalive_timeout&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;65&lt;/span&gt;;
    &lt;span style=&#34;color:#f92672&#34;&gt;types_hash_max_size&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2048&lt;/span&gt;;
    &lt;span style=&#34;color:#f92672&#34;&gt;include&lt;/span&gt;             &lt;span style=&#34;color:#e6db74&#34;&gt;/etc/nginx/mime.types&lt;/span&gt;;
    &lt;span style=&#34;color:#f92672&#34;&gt;default_type&lt;/span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;application/octet-stream&lt;/span&gt;;
    &lt;span style=&#34;color:#75715e&#34;&gt;# Load modular configuration files from the /etc/nginx/conf.d directory.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# See http://nginx.org/en/docs/ngx_core_module.html#include
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# for more information.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/etc/nginx/conf.d/*.conf&lt;/span&gt;;
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里注释了 &lt;code&gt;http&lt;/code&gt; 段落里面默认的虚拟主机, 增加了配置文件目录 &lt;code&gt;/etc/nginx/tcp.d/&lt;/code&gt;, 然后再将其引入到主配置文件的 &lt;code&gt;stream&lt;/code&gt; 段落方便管理TCP的代理服务.&lt;/p&gt;
&lt;h3 id=&#34;tcp配置文件&#34;&gt;TCP配置文件&lt;/h3&gt;
&lt;p&gt;一个简单的tcp配置示例:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/etc/nginx/tcp.d/frp.conf&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-nginx&#34; data-lang=&#34;nginx&#34;&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;###############
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# win10 test
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;###############
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;upstream&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;frps3_msts_win10_work_vm&lt;/span&gt; {
    &lt;span style=&#34;color:#f92672&#34;&gt;server&lt;/span&gt; localhost:&lt;span style=&#34;color:#ae81ff&#34;&gt;1003&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;fail_timeout=0&lt;/span&gt;;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;server&lt;/span&gt; {
    &lt;span style=&#34;color:#f92672&#34;&gt;listen&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2003&lt;/span&gt;;
    &lt;span style=&#34;color:#f92672&#34;&gt;proxy_pass&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;frps3_msts_win10_work_vm&lt;/span&gt;;
    &lt;span style=&#34;color:#f92672&#34;&gt;proxy_connect_timeout&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;5s&lt;/span&gt;;
    &lt;span style=&#34;color:#f92672&#34;&gt;proxy_timeout&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;1h&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当然在frp服务配置妥当之前这个配置是不会生效的, 不过你可以先写个模板检查一下语法是否正确方便后续套用.&lt;/p&gt;
&lt;h3 id=&#34;虚拟主机配置文件&#34;&gt;虚拟主机配置文件&lt;/h3&gt;
&lt;p&gt;虚拟主机配置示例:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/etc/nginx/conf.d/musicgeek-frpweb.conf&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-nginx&#34; data-lang=&#34;nginx&#34;&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;##################################################
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# web service (frp: http/https) 1080/1043
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;##################################################
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;upstream&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;frps_http&lt;/span&gt; {
    &lt;span style=&#34;color:#f92672&#34;&gt;server&lt;/span&gt; localhost:&lt;span style=&#34;color:#ae81ff&#34;&gt;1080&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;fail_timeout=0&lt;/span&gt;;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;upstream&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;frps_https&lt;/span&gt; {
    &lt;span style=&#34;color:#f92672&#34;&gt;server&lt;/span&gt; localhost:&lt;span style=&#34;color:#ae81ff&#34;&gt;1043&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;fail_timeout=0&lt;/span&gt;;
}

&lt;span style=&#34;color:#75715e&#34;&gt;#########################
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# respberryPi: zero-w 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#########################
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;server&lt;/span&gt; {
    &lt;span style=&#34;color:#f92672&#34;&gt;listen&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;;
    &lt;span style=&#34;color:#f92672&#34;&gt;server_name&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;www.musicgeek.club&lt;/span&gt;;

    &lt;span style=&#34;color:#f92672&#34;&gt;server_tokens&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;off&lt;/span&gt;;
    &lt;span style=&#34;color:#f92672&#34;&gt;server_name_in_redirect&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;off&lt;/span&gt;;

    &lt;span style=&#34;color:#f92672&#34;&gt;location&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/&lt;/span&gt; {
        &lt;span style=&#34;color:#f92672&#34;&gt;proxy_hide_header&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;X-Powered-By&lt;/span&gt;;
        &lt;span style=&#34;color:#f92672&#34;&gt;proxy_set_header&lt;/span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;Host&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;www.musicgeek.club:&lt;/span&gt;$server_port;
        &lt;span style=&#34;color:#f92672&#34;&gt;proxy_set_header&lt;/span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;X-Forwarded-For&lt;/span&gt; $proxy_add_x_forwarded_for;
        &lt;span style=&#34;color:#f92672&#34;&gt;proxy_set_header&lt;/span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;X-Real-IP&lt;/span&gt;  $remote_addr;
        &lt;span style=&#34;color:#f92672&#34;&gt;proxy_pass&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;http://frps_http&lt;/span&gt;;
        &lt;span style=&#34;color:#f92672&#34;&gt;client_max_body_size&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;10m&lt;/span&gt;;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;step-4-配置-frp-服务端-frps&#34;&gt;Step 4. 配置 frp 服务端 frps&lt;/h2&gt;
&lt;p&gt;打开 &lt;a href=&#34;https://github.com/fatedier/frp/releases&#34;&gt;frps release&lt;/a&gt; 然后根据你的操作系统下载合适的版本.&lt;/p&gt;
&lt;p&gt;关于部署, 项目主页有详细的配置指南, 并且还附带了Linux systemd 服务模板.&lt;/p&gt;
&lt;p&gt;总体步骤如下:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;下载 发行版压缩包&lt;/li&gt;
&lt;li&gt;解压 压缩包&lt;/li&gt;
&lt;li&gt;拷贝可执行文件到执行文件目录
&lt;ol&gt;
&lt;li&gt;服务端: frps / frps.exe&lt;/li&gt;
&lt;li&gt;客户端: frpc / frpc.exe&lt;/li&gt;
&lt;li&gt;执行文件目录(可以修改环境变量配置):
&lt;ol&gt;
&lt;li&gt;Linux: /bin/ 或者 /usr/bin/&lt;/li&gt;
&lt;li&gt;Win: C:\Windows\ (windows不太熟悉, 这个路径一般都可以用)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;创建配置文件目录, 比如:
&lt;ol&gt;
&lt;li&gt;Linux, /etc/frp/&lt;/li&gt;
&lt;li&gt;Win, C:\frp\&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;复制模板配置文件&lt;/li&gt;
&lt;li&gt;编辑配置文件&lt;/li&gt;
&lt;li&gt;试运行服务&lt;/li&gt;
&lt;li&gt;配置后台运行, 复制systemd服务模板到默认服务目录, (windows需要添加后台运行bat脚本)&lt;/li&gt;
&lt;li&gt;配置 logrotate 日志转储 (windows日志转储不太熟悉)&lt;/li&gt;
&lt;li&gt;配置并检查 frps/frpc 服务的开机启动&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;直接给个配置文件示例吧&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/etc/frp/frps.ini&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ini&#34; data-lang=&#34;ini&#34;&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;[common]&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;bind_port&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;1000&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;vhost_http_port&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;1080&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;vhost_https_port&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;1043&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;privilege_token&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;YourPassword!&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;use_encryption&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;true&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;use_compression&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;true&lt;/span&gt;

&lt;span style=&#34;color:#a6e22e&#34;&gt;proxy_bind_addr&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;127.0.0.1&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;log_file&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/var/log/frps.log&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;log_max_days&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;这里端口是乱写的, &amp;ldquo;YourPassword!&amp;ldquo;你要换成自己的密码, 建议设置一个强密.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;示例的绑定IP被设置成了回环地址, 因此注册到 frp 服务端的客户端服务并不直接暴露, 还需要经过 nginx 才能被访问.&lt;/p&gt;
&lt;p&gt;部署完成服务端后就可以准备客户端了.&lt;/p&gt;
&lt;h2 id=&#34;step-5-配置-frp-客户端-frpc&#34;&gt;Step 5. 配置 frp 客户端 frpc&lt;/h2&gt;
&lt;p&gt;frpc 的部署也是参考官方文档即可, 还是直接给出配置示例吧:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/etc/frp/frpc.ini&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ini&#34; data-lang=&#34;ini&#34;&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;[common]&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;server_addr&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;www.iterdaily.com&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;server_port&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;1000&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;privilege_token&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;YourPassword!&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;use_encryption&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;true&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;use_compression&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;true&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;log_file&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/var/log/frpc.log&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;[ssh_vm1]&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;tcp&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;local_ip&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;127.0.0.1&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;local_port&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;22&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;remote_port&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;1022&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;[web_pipe1]&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;http&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;local_port&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;80&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;custom_domains&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;www.musicgeek.club&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;这里的端口和密码我随便写的,记得改成你自己的.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;windows 开机启动运行脚本和自动运行方法:&lt;/p&gt;
&lt;p&gt;地址栏输入:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ini&#34; data-lang=&#34;ini&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 某个用户的开机启动项配置路径&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;C:\Users\你的账户名\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或者&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ini&#34; data-lang=&#34;ini&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#系统开机启动路径:&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;前者是针对某个账户的开机启动，账户默认是Administrator，后者是针对所有账户的启动&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;开机启动脚本示例:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp\frpc.vbs&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bat&#34; data-lang=&#34;bat&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;&lt;/span&gt;ws=WScript.CreateObject(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;WScript.Shell&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;) 
ws.Run &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;C:\frp_0.34.2_windows_amd64\frpc.exe  -c C:\frp_0.34.2_windows_amd64\frpc.ini&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;,0 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;因为熟悉Windows服务配置, 这个例子并不是配置了开机启动服务, 而是开机运行了脚本, 这种使用脚本的开机启动配置的方法其实很不优雅, 在实际使用上必须某个用户登录到系统里面开机脚本才会运行, 因为实在很少用, 也就懒得折腾Windows的服务配置了.&lt;/p&gt;
&lt;p&gt;到这里基本配置就完成了, 后续就可以按照相同的方式去添加更多的内网服务了.&lt;/p&gt;
&lt;p&gt;学会一样东西最好的方法就是实践起来.
动手试一试吧.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Hugo 博客的使用</title>
      <link>https://www.iterdaily.com/post/hugo_hugoisforlovers/</link>
      <pubDate>Sun, 02 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.iterdaily.com/post/hugo_hugoisforlovers/</guid>
      
        <description>&lt;h2 id=&#34;step-1-安装-hugo&#34;&gt;Step 1. 安装 Hugo&lt;/h2&gt;
&lt;p&gt;打开 &lt;a href=&#34;https://github.com/spf13/hugo/releases&#34;&gt;hugo releases&lt;/a&gt; 然后根据你的操作系统下载合适的版本.&lt;/p&gt;
&lt;p&gt;把它保存到指定的地方, 我们接下来会用到.&lt;/p&gt;
&lt;p&gt;这里有更详细的介绍 &lt;a href=&#34;https://gohugo.io/documentation/&#34;&gt;hugo&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;step-2-文档的构建&#34;&gt;Step 2. 文档的构建&lt;/h2&gt;
&lt;p&gt;Hugo 也有自己的模板站点.&lt;/p&gt;
&lt;p&gt;按照接下来的步骤:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Git 克隆 &lt;a href=&#34;http://github.com/spf13/hugo&#34;&gt;hugo repository&lt;/a&gt; 仓库&lt;/li&gt;
&lt;li&gt;进入克隆的仓库目录&lt;/li&gt;
&lt;li&gt;以 server mode 运行 Hugo 来构建文档&lt;/li&gt;
&lt;li&gt;在浏览器打开 http://localhost:1313&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;参考命令:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone https://github.com/spf13/hugo
cd hugo
/path/to/where/you/installed/hugo server --source=./docs
&amp;gt; 29 pages created
&amp;gt; 0 tags index created
&amp;gt; in 27 ms
&amp;gt; Web Server is available at http://localhost:1313
&amp;gt; Press ctrl+c to stop
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;到这里, 就可以按后续的步骤去完成本地的构建了.&lt;/p&gt;
&lt;h2 id=&#34;step-3-站点文档的修改&#34;&gt;Step 3. 站点文档的修改&lt;/h2&gt;
&lt;p&gt;按下 ctrl+c 停止 Hugo 进程.&lt;/p&gt;
&lt;p&gt;现在来重新运行 hugo, 但这次是 watch mode 运行.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/path/to/hugo/from/step/1/hugo server --source=./docs --watch
&amp;gt; 29 pages created
&amp;gt; 0 tags index created
&amp;gt; in 27 ms
&amp;gt; Web Server is available at http://localhost:1313
&amp;gt; Watching for changes in /Users/spf13/Code/hugo/docs/content
&amp;gt; Press ctrl+c to stop
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;打开 &lt;a href=&#34;http://vim.spf13.com&#34;&gt;vim 编辑器&lt;/a&gt; 然后修改源文件里面的页面内容. 可以在 &lt;code&gt;docs/content/&lt;/code&gt; 找到.&lt;/p&gt;
&lt;p&gt;除非特殊指定过, 文件的相对路径跟 url 里的是一样的, 这里是 &lt;code&gt;docs/content/overview/quickstart.md&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;修改并保存文件. 注意终端里的变化.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; Change detected, rebuilding site

&amp;gt; 29 pages created
&amp;gt; 0 tags index created
&amp;gt; in 26 ms
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;刷新浏览器, 就可以观察到变化了.&lt;/p&gt;
&lt;p&gt;留意一下这速度. 构建速度绝对比页面刷新快.
有了这样即时的反馈, 就能让你的创造流程不再受构建等待的影响.&lt;/p&gt;
&lt;h2 id=&#34;step-4-玩的开心&#34;&gt;Step 4. 玩的开心&lt;/h2&gt;
&lt;p&gt;学会一样东西最好的方法就是实践起来.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>keepalived &#43; nginx 负载均衡服务 配置示例</title>
      <link>https://www.iterdaily.com/post/lb-keepalived-config/</link>
      <pubDate>Sat, 10 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.iterdaily.com/post/lb-keepalived-config/</guid>
      
        <description>&lt;p&gt;Config file on LB server1&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-nginx&#34; data-lang=&#34;nginx&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;global_defs&lt;/span&gt; {
   &lt;span style=&#34;color:#f92672&#34;&gt;notification_email&lt;/span&gt; {
   &lt;span style=&#34;color:#f92672&#34;&gt;root@localhost&lt;/span&gt;
   &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;}&lt;/span&gt;
   &lt;span style=&#34;color:#e6db74&#34;&gt;notification_email_from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;keepalived@localhost&lt;/span&gt;
   &lt;span style=&#34;color:#e6db74&#34;&gt;smtp_server&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;127&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;.0.0.1&lt;/span&gt;                    &lt;span style=&#34;color:#75715e&#34;&gt;#邮件服务器的地址
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;   &lt;span style=&#34;color:#e6db74&#34;&gt;smtp_connect_timeout&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;
   &lt;span style=&#34;color:#e6db74&#34;&gt;router_id&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;lb1&lt;/span&gt;                            &lt;span style=&#34;color:#75715e&#34;&gt;#主调度器的主机名
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;#vrrp_mcast_group4 192.168.122.1          #发送心跳信息的组播地址
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#e6db74&#34;&gt;vrrp_script&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;chk_nginx&lt;/span&gt; {
    &lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/usr/local/sbin/check_nginx.sh&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;interval&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;weight&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;-10&lt;/span&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#e6db74&#34;&gt;vrrp_instance&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;VI_1&lt;/span&gt; {
    &lt;span style=&#34;color:#f92672&#34;&gt;state&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;MASTER&lt;/span&gt;                            &lt;span style=&#34;color:#75715e&#34;&gt;#主调度器的初始角色
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;eth1&lt;/span&gt;                          &lt;span style=&#34;color:#75715e&#34;&gt;#虚拟IP工作的网卡接口
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;virtual_router_id&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;                   &lt;span style=&#34;color:#75715e&#34;&gt;#虚拟路由的ID
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;priority&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;                            &lt;span style=&#34;color:#75715e&#34;&gt;#主调度器的选举优先级
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;advert_int&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;authentication&lt;/span&gt; {
        &lt;span style=&#34;color:#f92672&#34;&gt;auth_type&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;PASS&lt;/span&gt;                      &lt;span style=&#34;color:#75715e&#34;&gt;#集群主机的认证方式
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;auth_pass&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;123456&lt;/span&gt;                    &lt;span style=&#34;color:#75715e&#34;&gt;#密钥,最长8位
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;virtual_ipaddress&lt;/span&gt; {
        &lt;span style=&#34;color:#f92672&#34;&gt;192.168.2.2&lt;/span&gt;                     &lt;span style=&#34;color:#75715e&#34;&gt;#虚拟IP
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;track_script&lt;/span&gt; {
        &lt;span style=&#34;color:#f92672&#34;&gt;chk_nginx&lt;/span&gt;
    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Config file on LB server2&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-nginx&#34; data-lang=&#34;nginx&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;global_defs&lt;/span&gt; {
   &lt;span style=&#34;color:#f92672&#34;&gt;notification_email&lt;/span&gt; {
   &lt;span style=&#34;color:#f92672&#34;&gt;root@localhost&lt;/span&gt;
   &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;}&lt;/span&gt;
   &lt;span style=&#34;color:#e6db74&#34;&gt;notification_email_from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;keepalived@localhost&lt;/span&gt;
   &lt;span style=&#34;color:#e6db74&#34;&gt;smtp_server&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;127&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;.0.0.1&lt;/span&gt;                    &lt;span style=&#34;color:#75715e&#34;&gt;#邮件服务器的地址
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;   &lt;span style=&#34;color:#e6db74&#34;&gt;smtp_connect_timeout&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;
   &lt;span style=&#34;color:#e6db74&#34;&gt;router_id&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;lb1&lt;/span&gt;                            &lt;span style=&#34;color:#75715e&#34;&gt;#主调度器的主机名
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;#vrrp_mcast_group4 192.168.122.1          #发送心跳信息的组播地址
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#e6db74&#34;&gt;vrrp_script&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;chk_nginx&lt;/span&gt; {
    &lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/usr/local/sbin/check_nginx.sh&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;interval&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;weight&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;-10&lt;/span&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#e6db74&#34;&gt;vrrp_instance&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;VI_1&lt;/span&gt; {
    &lt;span style=&#34;color:#f92672&#34;&gt;state&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;MASTER&lt;/span&gt;                            &lt;span style=&#34;color:#75715e&#34;&gt;#主调度器的初始角色
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;eth1&lt;/span&gt;                          &lt;span style=&#34;color:#75715e&#34;&gt;#虚拟IP工作的网卡接口
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;virtual_router_id&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;                   &lt;span style=&#34;color:#75715e&#34;&gt;#虚拟路由的ID
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;priority&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;                            &lt;span style=&#34;color:#75715e&#34;&gt;#主调度器的选举优先级
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;advert_int&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;authentication&lt;/span&gt; {
        &lt;span style=&#34;color:#f92672&#34;&gt;auth_type&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;PASS&lt;/span&gt;                      &lt;span style=&#34;color:#75715e&#34;&gt;#集群主机的认证方式
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;auth_pass&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;123456&lt;/span&gt;                    &lt;span style=&#34;color:#75715e&#34;&gt;#密钥,最长8位
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;virtual_ipaddress&lt;/span&gt; {
        &lt;span style=&#34;color:#f92672&#34;&gt;192.168.2.2&lt;/span&gt;                     &lt;span style=&#34;color:#75715e&#34;&gt;#虚拟IP
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;track_script&lt;/span&gt; {
        &lt;span style=&#34;color:#f92672&#34;&gt;chk_nginx&lt;/span&gt;
    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Diff of those two files:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;10c10
&amp;lt;    router_id lb1                            #主调度器的主机名
&lt;span style=&#34;color:#f92672&#34;&gt;---
&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;&amp;gt;    router_id lb2                            #主调度器的主机名
15c15
&amp;lt; vrrp_script chk_nginx {
&lt;span style=&#34;color:#f92672&#34;&gt;---
&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;&amp;gt; vrrp_script chk_nginx{
22c22
&amp;lt;     state MASTER                            #主调度器的初始角色
&lt;span style=&#34;color:#f92672&#34;&gt;---
&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;&amp;gt;     state BACKUP                            #主调度器的初始角色
24,25c24,25
&amp;lt;     virtual_router_id 51                   #虚拟路由的ID
&amp;lt;     priority 100                            #主调度器的选举优先级
&lt;span style=&#34;color:#f92672&#34;&gt;---
&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;&amp;gt;     virtual_router_id 51                    #虚拟路由的ID
&amp;gt;     priority 85                             #主调度器的选举优先级
38d37
&amp;lt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;/usr/local/sbin/check_nginx.sh&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;ps -ef | grep &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nginx: master process&amp;#34;&lt;/span&gt;| grep -v grep &lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;&lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#echo 1&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#/etc/init.d/nginx start&lt;/span&gt;
    systemctl restart nginx.service
    sleep &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;ps -ef | grep &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nginx: master process&amp;#34;&lt;/span&gt;| grep -v grep &lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;&lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#/etc/init.d/keepalived stop&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#systemctl stop keepalived &amp;amp;&amp;gt;/tmp/log_stop&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#echo 2&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;/etc/nginx/nginx.conf&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-nginx&#34; data-lang=&#34;nginx&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;events{&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;worker_connections&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20480&lt;/span&gt;;  
&lt;span style=&#34;color:#66d9ef&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#设定http服务器，利用它的反向代理功能提供负载均衡支持
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;http&lt;/span&gt; {

    &lt;span style=&#34;color:#75715e&#34;&gt;#设定mime类型,类型由mime.type文件定义
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;include&lt;/span&gt;             &lt;span style=&#34;color:#e6db74&#34;&gt;/etc/nginx/mime.types&lt;/span&gt;;
    &lt;span style=&#34;color:#f92672&#34;&gt;default_type&lt;/span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;application/octet-stream&lt;/span&gt;;

    &lt;span style=&#34;color:#75715e&#34;&gt;#设定日志格式
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;access_log&lt;/span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;/var/log/nginx/access.log&lt;/span&gt;;

    &lt;span style=&#34;color:#75715e&#34;&gt;#省略上文有的一些配置节点
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#。。。。。。。。。。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#设定负载均衡的服务器列表
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;upstream&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;mysvr&lt;/span&gt; {
        &lt;span style=&#34;color:#75715e&#34;&gt;#weigth参数表示权值，权值越高被分配到的几率越大
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;server&lt;/span&gt; 192.168.122.36:&lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;     &lt;span style=&#34;color:#e6db74&#34;&gt;weight=1&lt;/span&gt;;
        &lt;span style=&#34;color:#f92672&#34;&gt;server&lt;/span&gt; 192.168.122.223:&lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;weight=1&lt;/span&gt;;
        &lt;span style=&#34;color:#f92672&#34;&gt;server&lt;/span&gt; 192.168.122.103:&lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;weight=1&lt;/span&gt;;
    }

    &lt;span style=&#34;color:#75715e&#34;&gt;#第一个虚拟服务器
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;server&lt;/span&gt; {
        &lt;span style=&#34;color:#75715e&#34;&gt;#侦听192.168.122.x的80端口
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;listen&lt;/span&gt;             &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;;
        &lt;span style=&#34;color:#f92672&#34;&gt;server_name&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;192&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;.168.122.x&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;#实际需要写服务器域名
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#对aspx后缀的进行负载均衡请求
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;location&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/&lt;/span&gt; {
            &lt;span style=&#34;color:#75715e&#34;&gt;#定义服务器的默认网站根目录位置
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;root&lt;/span&gt;     &lt;span style=&#34;color:#e6db74&#34;&gt;/root&lt;/span&gt;; 
            &lt;span style=&#34;color:#75715e&#34;&gt;#定义首页索引文件的名称
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;index&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;index.php&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;index.html&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;index.htm&lt;/span&gt;;
            
            &lt;span style=&#34;color:#75715e&#34;&gt;#请求转向mysvr 定义的服务器列表
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;proxy_pass&lt;/span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;http://mysvr&lt;/span&gt; ;

            &lt;span style=&#34;color:#75715e&#34;&gt;#以下是一些反向代理的配置可删除.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;proxy_redirect&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;off&lt;/span&gt;;

            &lt;span style=&#34;color:#75715e&#34;&gt;#后端的Web服务器可以通过X-Forwarded-For获取用户真实IP
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;proxy_set_header&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;Host&lt;/span&gt; $host;
            &lt;span style=&#34;color:#f92672&#34;&gt;proxy_set_header&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;X-Real-IP&lt;/span&gt; $remote_addr;
            &lt;span style=&#34;color:#f92672&#34;&gt;proxy_set_header&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;X-Forwarded-For&lt;/span&gt; $proxy_add_x_forwarded_for;

            &lt;span style=&#34;color:#75715e&#34;&gt;#允许客户端请求的最大单文件字节数
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;client_max_body_size&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10m&lt;/span&gt;; 

            &lt;span style=&#34;color:#75715e&#34;&gt;#缓冲区代理缓冲用户端请求的最大字节数，
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;client_body_buffer_size&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20m&lt;/span&gt;;

            &lt;span style=&#34;color:#75715e&#34;&gt;#nginx跟后端服务器连接超时时间(代理连接超时)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;proxy_connect_timeout&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;;

            &lt;span style=&#34;color:#75715e&#34;&gt;#连接成功后，后端服务器响应时间(代理接收超时)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;proxy_read_timeout&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;;

            &lt;span style=&#34;color:#75715e&#34;&gt;#设置代理服务器（nginx）保存用户头信息的缓冲区大小
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;proxy_buffer_size&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;128k&lt;/span&gt;;

            &lt;span style=&#34;color:#75715e&#34;&gt;#proxy_buffers缓冲区，网页平均在32k以下的话，这样设置
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;proxy_buffers&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;128&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32k&lt;/span&gt;;

            &lt;span style=&#34;color:#75715e&#34;&gt;#高负荷下缓冲大小（proxy_buffers*2）
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;#proxy_busy_buffers_size 64k; 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;proxy_busy_buffers_size&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;256k&lt;/span&gt;; 

            &lt;span style=&#34;color:#75715e&#34;&gt;#设定缓存文件夹大小，大于这个值，将从upstream服务器传
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;proxy_temp_file_write_size&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;256k&lt;/span&gt;;    

        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;End&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Hugo 博客 Shortcodes Preview</title>
      <link>https://www.iterdaily.com/post/hugo_shortcodes-preview/</link>
      <pubDate>Sun, 04 Mar 2018 16:01:23 +0800</pubDate>
      
      <guid>https://www.iterdaily.com/post/hugo_shortcodes-preview/</guid>
      
        <description>&lt;h2 id=&#34;what-a-shortcode-is&#34;&gt;What a Shortcode is&lt;/h2&gt;
&lt;p&gt;Hugo loves Markdown because of its simple content format, but there are times when Markdown falls short. Often, content authors are forced to add raw HTML (e.g., video &lt;code&gt;&amp;lt;iframes&amp;gt;&lt;/code&gt;) to Markdown content. We think this contradicts the beautiful simplicity of Markdown&amp;rsquo;s syntax.&lt;/p&gt;
&lt;p&gt;Hugo created &lt;strong&gt;shortcodes&lt;/strong&gt; to circumvent these limitations.&lt;/p&gt;
&lt;p&gt;A shortcode is a simple snippet inside a content file that Hugo will render using a predefined template. Note that shortcodes will not work in template files. If you need the type of drop-in functionality that shortcodes provide but in a template, you most likely want a [partial template][partials] instead.&lt;/p&gt;
&lt;p&gt;In addition to cleaner Markdown, shortcodes can be updated any time to reflect new classes, techniques, or standards. At the point of site generation, Hugo shortcodes will easily merge in your changes. You avoid a possibly complicated search and replace operation.&lt;/p&gt;
&lt;p&gt;More details: &lt;a href=&#34;https://gohugo.io/content-management/shortcodes/&#34;&gt;https://gohugo.io/content-management/shortcodes/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;blockquotes&#34;&gt;blockquotes&lt;/h2&gt;
&lt;p&gt;Normal quote:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{&amp;lt; blockquote &amp;gt;}}
  This is a simple quote.
{{&amp;lt; /blockquote &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Display:&lt;/p&gt;











  





  


&lt;blockquote&gt;
  &lt;p&gt;This is a simple quote.&lt;/p&gt;
  &lt;footer&gt;
    &lt;strong&gt;&lt;/strong&gt;
    
      
        
      
    
  &lt;/footer&gt;
&lt;/blockquote&gt;

&lt;p&gt;Test from the Octopress blockquote page at: &lt;a href=&#34;http://octopress.org/docs/plugins/blockquote/&#34;&gt;http://octopress.org/docs/plugins/blockquote/&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{&amp;lt; blockquote author=&amp;quot;@allanbranch&amp;quot; link=&amp;quot;https://twitter.com/allanbranch/status/90766146063712256&amp;quot; &amp;gt;}}
  Over the past 24 hours I&#39;ve been reflecting on my life &amp;amp; I&#39;ve realized only one thing. I need a medieval battle axe.
{{&amp;lt; /blockquote &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Display:&lt;/p&gt;











  
  
  
  





      
      
      
    
     
      
    
    

    
    
         
         
         

         
        
        
        
        
        
        
      
      
    
  


&lt;blockquote&gt;
  &lt;p&gt;Over the past 24 hours I&amp;rsquo;ve been reflecting on my life &amp;amp; I&amp;rsquo;ve realized only one thing. I need a medieval battle axe.&lt;/p&gt;
  &lt;footer&gt;
    &lt;strong&gt;@allanbranch&lt;/strong&gt;
    
      
        &lt;cite&gt;
          &lt;a href=&#34;https://twitter.com/allanbranch/status/90766146063712256&#34; title=&#34;https://twitter.com/allanbranch/status/90766146063712256&#34;&gt;twitter.com/allanbranch/status/...&lt;/a&gt; 
        &lt;/cite&gt;
      
    
  &lt;/footer&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;gist&#34;&gt;gist&lt;/h2&gt;
&lt;p&gt;We can embed the gist in our content via username and gist ID pulled from the URL:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{&amp;lt; gist spf13 7896402 &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Display:&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/spf13/7896402.js&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;expand&#34;&gt;expand&lt;/h2&gt;
&lt;p&gt;The Expand shortcode displays an expandable/collapsible section of text on your page. Here is an example&lt;/p&gt;
&lt;p&gt;Clik the text bellow:&lt;/p&gt;
&lt;details&gt;
  &lt;summary style=&#34;background-color:#f5f5f5;border:1px solid #ccc;padding:5px;&#34;&gt;
    Is this learn theme rocks ?
    
  &lt;/summary&gt;
  
Yes !.

&lt;/details&gt;

&lt;h3 id=&#34;usage&#34;&gt;Usage&lt;/h3&gt;
&lt;p&gt;this shortcode takes exactly one optional parameter to define the text that appears next to the expand/collapse icon. (default is “Click to expand”)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{&amp;lt; expand &amp;quot;Is this learn theme rocks ?&amp;quot; &amp;gt;}}
Yes !.
{{&amp;lt; /expand &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;youtube&#34;&gt;youtube&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;{{&amp;lt; youtube w7Ft2ymGmfc &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Display:&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/w7Ft2ymGmfc&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;vimeo&#34;&gt;vimeo&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;{{&amp;lt; vimeo 146022717 &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Display:&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://player.vimeo.com/video/146022717&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; title=&#34;vimeo video&#34; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;
 &lt;/div&gt;

&lt;h2 id=&#34;youku&#34;&gt;youku&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;{{&amp;lt; youku XMzQ0ODUxMjM2NA &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Display:&lt;/p&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; padding-top: 30px; height: 0; overflow: hidden;&#34;&gt;
    &lt;iframe src=&#34;https://player.youku.com/embed/XMzQ0ODUxMjM2NA?autoplay=0&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#34; allowfullscreen frameborder=&#34;0&#34; title=&#34;YouKu Video&#34;&gt;
    &lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;bilibili&#34;&gt;bilibili&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;{{&amp;lt; bilibili BV1qZ4y1W7Ha 1 &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;depend on the theme you selected, and you can do it yourself.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Display:&lt;/p&gt;
&lt;iframe
    src=&#34;//player.bilibili.com/player.html?bvid=BV1qZ4y1W7Ha&amp;page=1&#34;
    scrolling=&#34;no&#34;
    height=&#34;768px&#34;
    width=&#34;1024px&#34;
    frameborder=&#34;no&#34;
    framespacing=&#34;0&#34;
    allowfullscreen=&#34;true&#34;
&gt;
&lt;/iframe&gt;

&lt;h2 id=&#34;graphviz&#34;&gt;graphviz&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;```viz-dot
  digraph G {
    aize =&amp;quot;4,4&amp;quot;;
    main [shape=box];
    main -&amp;gt; parse [weight=8];
    parse -&amp;gt; execute;
    main -&amp;gt; init [style=dotted];
    main -&amp;gt; cleanup;
    execute -&amp;gt; { make_string; printf}
    init -&amp;gt; make_string;
    edge [color=red];
    main -&amp;gt; printf [style=bold,label=&amp;quot;100 times&amp;quot;];
    make_string [label=&amp;quot;make a string&amp;quot;];
    node [shape=box,style=filled,color=&amp;quot;.7 .3 1.0&amp;quot;];
    execute -&amp;gt; compare;
  }
\```
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;depend on the theme you selected&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Display&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-viz-dot&#34; data-lang=&#34;viz-dot&#34;&gt;  digraph G {
    aize =&amp;quot;4,4&amp;quot;;
    main [shape=box];
    main -&amp;gt; parse [weight=8];
    parse -&amp;gt; execute;
    main -&amp;gt; init [style=dotted];
    main -&amp;gt; cleanup;
    execute -&amp;gt; { make_string; printf}
    init -&amp;gt; make_string;
    edge [color=red];
    main -&amp;gt; printf [style=bold,label=&amp;quot;100 times&amp;quot;];
    make_string [label=&amp;quot;make a string&amp;quot;];
    node [shape=box,style=filled,color=&amp;quot;.7 .3 1.0&amp;quot;];
    execute -&amp;gt; compare;
  }
&lt;/code&gt;&lt;/pre&gt;</description>
      
    </item>
    
    <item>
      <title>(Hu)go Template Primer</title>
      <link>https://www.iterdaily.com/post/hugo_goisforlovers/</link>
      <pubDate>Sun, 04 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.iterdaily.com/post/hugo_goisforlovers/</guid>
      
        <description>&lt;p&gt;Hugo uses the excellent &lt;a href=&#34;http://golang.org/&#34;&gt;go&lt;/a&gt; &lt;a href=&#34;http://golang.org/pkg/html/template/&#34;&gt;html/template&lt;/a&gt; library for
its template engine. It is an extremely lightweight engine that provides a very
small amount of logic. In our experience that it is just the right amount of
logic to be able to create a good static website. If you have used other
template systems from different languages or frameworks you will find a lot of
similarities in go templates.&lt;/p&gt;
&lt;p&gt;This document is a brief primer on using go templates. The &lt;a href=&#34;http://golang.org/pkg/html/template/&#34;&gt;go docs&lt;/a&gt;
provide more details.&lt;/p&gt;
&lt;h2 id=&#34;introduction-to-go-templates&#34;&gt;Introduction to Go Templates&lt;/h2&gt;
&lt;p&gt;Go templates provide an extremely simple template language. It adheres to the
belief that only the most basic of logic belongs in the template or view layer.
One consequence of this simplicity is that go templates parse very quickly.&lt;/p&gt;
&lt;p&gt;A unique characteristic of go templates is they are content aware. Variables and
content will be sanitized depending on the context of where they are used. More
details can be found in the &lt;a href=&#34;http://golang.org/pkg/html/template/&#34;&gt;go docs&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;basic-syntax&#34;&gt;Basic Syntax&lt;/h2&gt;
&lt;p&gt;Go lang templates are html files with the addition of variables and
functions.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Go variables and functions are accessible within {{ }}&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Accessing a predefined variable &amp;ldquo;foo&amp;rdquo;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ foo }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Parameters are separated using spaces&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Calling the add function with input of 1, 2:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ add 1 2 }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Methods and fields are accessed via dot notation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Accessing the Page Parameter &amp;ldquo;bar&amp;rdquo;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ .Params.bar }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Parentheses can be used to group items together&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ if or (isset .Params &amp;quot;alt&amp;quot;) (isset .Params &amp;quot;caption&amp;quot;) }} Caption {{ end }}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;variables&#34;&gt;Variables&lt;/h2&gt;
&lt;p&gt;Each go template has a struct (object) made available to it. In hugo each
template is passed either a page or a node struct depending on which type of
page you are rendering. More details are available on the
&lt;a href=&#34;https://www.iterdaily.com/layout/variables&#34;&gt;variables&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;A variable is accessed by referencing the variable name.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;title&amp;gt;{{ .Title }}&amp;lt;/title&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Variables can also be defined and referenced.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ $address := &amp;quot;123 Main St.&amp;quot;}}
{{ $address }}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;functions&#34;&gt;Functions&lt;/h2&gt;
&lt;p&gt;Go template ship with a few functions which provide basic functionality. The go
template system also provides a mechanism for applications to extend the
available functions with their own. &lt;a href=&#34;https://www.iterdaily.com/layout/functions&#34;&gt;Hugo template
functions&lt;/a&gt; provide some additional functionality we believe
are useful for building websites. Functions are called by using their name
followed by the required parameters separated by spaces. Template
functions cannot be added without recompiling hugo.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ add 1 2 }}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;includes&#34;&gt;Includes&lt;/h2&gt;
&lt;p&gt;When including another template you will pass to it the data it will be
able to access. To pass along the current context please remember to
include a trailing dot. The templates location will always be starting at
the /layout/ directory within Hugo.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ template &amp;quot;chrome/header.html&amp;quot; . }}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;logic&#34;&gt;Logic&lt;/h2&gt;
&lt;p&gt;Go templates provide the most basic iteration and conditional logic.&lt;/p&gt;
&lt;h3 id=&#34;iteration&#34;&gt;Iteration&lt;/h3&gt;
&lt;p&gt;Just like in go, the go templates make heavy use of range to iterate over
a map, array or slice. The following are different examples of how to use
range.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1: Using Context&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ range array }}
    {{ . }}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Example 2: Declaring value variable name&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{range $element := array}}
    {{ $element }}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Example 2: Declaring key and value variable name&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{range $index, $element := array}}
    {{ $index }}
    {{ $element }}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;conditionals&#34;&gt;Conditionals&lt;/h3&gt;
&lt;p&gt;If, else, with, or, &amp;amp; and provide the framework for handling conditional
logic in Go Templates. Like range, each statement is closed with &lt;code&gt;end&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Go Templates treat the following values as false:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;false&lt;/li&gt;
&lt;li&gt;0&lt;/li&gt;
&lt;li&gt;any array, slice, map, or string of length zero&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example 1: If&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ if isset .Params &amp;quot;title&amp;quot; }}&amp;lt;h4&amp;gt;{{ index .Params &amp;quot;title&amp;quot; }}&amp;lt;/h4&amp;gt;{{ end }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Example 2: If -&amp;gt; Else&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ if isset .Params &amp;quot;alt&amp;quot; }}
    {{ index .Params &amp;quot;alt&amp;quot; }}
{{else}}
    {{ index .Params &amp;quot;caption&amp;quot; }}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Example 3: And &amp;amp; Or&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ if and (or (isset .Params &amp;quot;title&amp;quot;) (isset .Params &amp;quot;caption&amp;quot;)) (isset .Params &amp;quot;attr&amp;quot;)}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Example 4: With&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;An alternative way of writing &amp;ldquo;if&amp;rdquo; and then referencing the same value
is to use &amp;ldquo;with&amp;rdquo; instead. With rebinds the context &lt;code&gt;.&lt;/code&gt; within its scope,
and skips the block if the variable is absent.&lt;/p&gt;
&lt;p&gt;The first example above could be simplified as:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ with .Params.title }}&amp;lt;h4&amp;gt;{{ . }}&amp;lt;/h4&amp;gt;{{ end }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Example 5: If -&amp;gt; Else If&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ if isset .Params &amp;quot;alt&amp;quot; }}
    {{ index .Params &amp;quot;alt&amp;quot; }}
{{ else if isset .Params &amp;quot;caption&amp;quot; }}
    {{ index .Params &amp;quot;caption&amp;quot; }}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;pipes&#34;&gt;Pipes&lt;/h2&gt;
&lt;p&gt;One of the most powerful components of go templates is the ability to
stack actions one after another. This is done by using pipes. Borrowed
from unix pipes, the concept is simple, each pipeline&amp;rsquo;s output becomes the
input of the following pipe.&lt;/p&gt;
&lt;p&gt;Because of the very simple syntax of go templates, the pipe is essential
to being able to chain together function calls. One limitation of the
pipes is that they only can work with a single value and that value
becomes the last parameter of the next pipeline.&lt;/p&gt;
&lt;p&gt;A few simple examples should help convey how to use the pipe.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1 :&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ if eq 1 1 }} Same {{ end }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;is the same as&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ eq 1 1 | if }} Same {{ end }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It does look odd to place the if at the end, but it does provide a good
illustration of how to use the pipes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 2 :&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ index .Params &amp;quot;disqus_url&amp;quot; | html }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Access the page parameter called &amp;ldquo;disqus_url&amp;rdquo; and escape the HTML.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 3 :&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ if or (or (isset .Params &amp;quot;title&amp;quot;) (isset .Params &amp;quot;caption&amp;quot;)) (isset .Params &amp;quot;attr&amp;quot;)}}
Stuff Here
{{ end }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Could be rewritten as&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{  isset .Params &amp;quot;caption&amp;quot; | or isset .Params &amp;quot;title&amp;quot; | or isset .Params &amp;quot;attr&amp;quot; | if }}
Stuff Here
{{ end }}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;context-aka-the-dot&#34;&gt;Context (aka. the dot)&lt;/h2&gt;
&lt;p&gt;The most easily overlooked concept to understand about go templates is that {{ . }}
always refers to the current context. In the top level of your template this
will be the data set made available to it. Inside of a iteration it will have
the value of the current item. When inside of a loop the context has changed. .
will no longer refer to the data available to the entire page. If you need to
access this from within the loop you will likely want to set it to a variable
instead of depending on the context.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  {{ $title := .Site.Title }}
  {{ range .Params.tags }}
    &amp;lt;li&amp;gt; &amp;lt;a href=&amp;quot;{{ $baseurl }}/tags/{{ . | urlize }}&amp;quot;&amp;gt;{{ . }}&amp;lt;/a&amp;gt; - {{ $title }} &amp;lt;/li&amp;gt;
  {{ end }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice how once we have entered the loop the value of {{ . }} has changed. We
have defined a variable outside of the loop so we have access to it from within
the loop.&lt;/p&gt;
&lt;h1 id=&#34;hugo-parameters&#34;&gt;Hugo Parameters&lt;/h1&gt;
&lt;p&gt;Hugo provides the option of passing values to the template language
through the site configuration (for sitewide values), or through the meta
data of each specific piece of content. You can define any values of any
type (supported by your front matter/config format) and use them however
you want to inside of your templates.&lt;/p&gt;
&lt;h2 id=&#34;using-content-page-parameters&#34;&gt;Using Content (page) Parameters&lt;/h2&gt;
&lt;p&gt;In each piece of content you can provide variables to be used by the
templates. This happens in the &lt;a href=&#34;https://www.iterdaily.com/content/front-matter&#34;&gt;front matter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;An example of this is used in this documentation site. Most of the pages
benefit from having the table of contents provided. Sometimes the TOC just
doesn&amp;rsquo;t make a lot of sense. We&amp;rsquo;ve defined a variable in our front matter
of some pages to turn off the TOC from being displayed.&lt;/p&gt;
&lt;p&gt;Here is the example front matter:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;---
title: &amp;quot;Permalinks&amp;quot;
date: &amp;quot;2013-11-18&amp;quot;
aliases:
  - &amp;quot;/doc/permalinks/&amp;quot;
groups: [&amp;quot;extras&amp;quot;]
groups_weight: 30
notoc: true
---
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here is the corresponding code inside of the template:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  {{ if not .Params.notoc }}
    &amp;lt;div id=&amp;quot;toc&amp;quot; class=&amp;quot;well col-md-4 col-sm-6&amp;quot;&amp;gt;
    {{ .TableOfContents }}
    &amp;lt;/div&amp;gt;
  {{ end }}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;using-site-config-parameters&#34;&gt;Using Site (config) Parameters&lt;/h2&gt;
&lt;p&gt;In your top-level configuration file (eg, &lt;code&gt;config.yaml&lt;/code&gt;) you can define site
parameters, which are values which will be available to you in chrome.&lt;/p&gt;
&lt;p&gt;For instance, you might declare:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;params&lt;/span&gt;:
  &lt;span style=&#34;color:#66d9ef&#34;&gt;CopyrightHTML&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Copyright &amp;amp;#xA9; 2013 John Doe. All Rights Reserved.&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;TwitterUser&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;spf13&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;SidebarRecentLimit&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Within a footer layout, you might then declare a &lt;code&gt;&amp;lt;footer&amp;gt;&lt;/code&gt; which is only
provided if the &lt;code&gt;CopyrightHTML&lt;/code&gt; parameter is provided, and if it is given,
you would declare it to be HTML-safe, so that the HTML entity is not escaped
again.  This would let you easily update just your top-level config file each
January 1st, instead of hunting through your templates.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{if .Site.Params.CopyrightHTML}}&amp;lt;footer&amp;gt;
&amp;lt;div class=&amp;quot;text-center&amp;quot;&amp;gt;{{.Site.Params.CopyrightHTML | safeHtml}}&amp;lt;/div&amp;gt;
&amp;lt;/footer&amp;gt;{{end}}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;An alternative way of writing the &amp;ldquo;if&amp;rdquo; and then referencing the same value
is to use &amp;ldquo;with&amp;rdquo; instead. With rebinds the context &lt;code&gt;.&lt;/code&gt; within its scope,
and skips the block if the variable is absent:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{with .Site.Params.TwitterUser}}&amp;lt;span class=&amp;quot;twitter&amp;quot;&amp;gt;
&amp;lt;a href=&amp;quot;https://twitter.com/{{.}}&amp;quot; rel=&amp;quot;author&amp;quot;&amp;gt;
&amp;lt;img src=&amp;quot;/images/twitter.png&amp;quot; width=&amp;quot;48&amp;quot; height=&amp;quot;48&amp;quot; title=&amp;quot;Twitter: {{.}}&amp;quot;
 alt=&amp;quot;Twitter&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;
&amp;lt;/span&amp;gt;{{end}}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Finally, if you want to pull &amp;ldquo;magic constants&amp;rdquo; out of your layouts, you can do
so, such as in this example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;nav class=&amp;quot;recent&amp;quot;&amp;gt;
  &amp;lt;h1&amp;gt;Recent Posts&amp;lt;/h1&amp;gt;
  &amp;lt;ul&amp;gt;{{range first .Site.Params.SidebarRecentLimit .Site.Recent}}
    &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;{{.RelPermalink}}&amp;quot;&amp;gt;{{.Title}}&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  {{end}}&amp;lt;/ul&amp;gt;
&amp;lt;/nav&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</description>
      
    </item>
    
  </channel>
</rss>
